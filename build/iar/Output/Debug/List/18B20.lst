###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Nov/2016  14:39:58
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\ilya\vendicont\arm-periphery\Application\18B20.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\18B20.c -D STM32F10X_HD -D
#        USE_STDPERIPH_DRIVER -D DEBUG=1 -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\List --remarks
#        -o C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -On --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\List\18B20.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\Obj\18B20.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\18B20.c
      1          #include "stm32f10x.h"
      2          #include "one_wire.h"
      3          #include "18B20.h"
      4          

   \                                 In section .bss, align 4
      5          float t_18b20;
   \                     t_18b20:
   \   00000000                      DS8 4
      6          

   \                                 In section .text, align 2, keep-with-next
      7          void convertDs18b20( void ) { 
   \                     convertDs18b20: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      8             resetOnewire(); 
   \   00000002   0x.... 0x....      BL       resetOnewire
      9             wOnewire(0xcc); 
   \   00000006   0x20CC             MOVS     R0,#+204
   \   00000008   0x.... 0x....      BL       wOnewire
     10             wOnewire(0x44); 
   \   0000000C   0x2044             MOVS     R0,#+68
   \   0000000E   0x.... 0x....      BL       wOnewire
     11          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
     12          

   \                                 In section .text, align 2, keep-with-next
     13          u8* readID( void ) { 
   \                     readID: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     14             u8 ID[8], i, *p;
     15             resetOnewire(); 
   \   00000004   0x.... 0x....      BL       resetOnewire
     16             wOnewire(0x33);
   \   00000008   0x2033             MOVS     R0,#+51
   \   0000000A   0x.... 0x....      BL       wOnewire
     17             for ( i = 0; i < 8; i++ ) {
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x0004             MOVS     R4,R0
   \                     ??readID_0: (+1)
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x2C08             CMP      R4,#+8
   \   00000016   0xDA06             BGE.N    ??readID_1
     18                ID[i] = rOnewire();
   \   00000018   0x.... 0x....      BL       rOnewire
   \   0000001C   0x4669             MOV      R1,SP
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x5460             STRB     R0,[R4, R1]
     19             }
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \   00000024   0xE7F5             B.N      ??readID_0
     20             p=ID;
   \                     ??readID_1: (+1)
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x0005             MOVS     R5,R0
     21             return p;
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0xBD3E             POP      {R1-R5,PC}       ;; return
     22          }
     23          

   \                                 In section .text, align 2, keep-with-next
     24          u16 readTemp( void ) { 
   \                     readTemp: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     25          	u8 temp1, temp2;
     26          	convertDs18b20();
   \   00000002   0x.... 0x....      BL       convertDs18b20
     27          	resetOnewire(); 
   \   00000006   0x.... 0x....      BL       resetOnewire
     28          	wOnewire(0xcc); 
   \   0000000A   0x20CC             MOVS     R0,#+204
   \   0000000C   0x.... 0x....      BL       wOnewire
     29          	wOnewire(0xbe); 	
   \   00000010   0x20BE             MOVS     R0,#+190
   \   00000012   0x.... 0x....      BL       wOnewire
     30          	temp1 = rOnewire(); 
   \   00000016   0x.... 0x....      BL       rOnewire
   \   0000001A   0x0004             MOVS     R4,R0
     31          	temp2 = rOnewire(); 
   \   0000001C   0x.... 0x....      BL       rOnewire
   \   00000020   0x0005             MOVS     R5,R0
     32          #if 0   
     33          	temp2 = temp2<<4;
     34          	temp1 = temp1>>4;
     35          	temp2 |= temp1;
     36          	return ( temp2 & 0x7F );
     37          #else
     38          	return ( ( (u16)temp2 << 8 ) | temp1 );   
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0xEA54 0x2005      ORRS     R0,R4,R5, LSL #+8
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     39          #endif   
     40          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   convertDs18b20
         8   -> resetOnewire
         8   -> wOnewire
      24   readID
        24   -> rOnewire
        24   -> resetOnewire
        24   -> wOnewire
      16   readTemp
        16   -> convertDs18b20
        16   -> rOnewire
        16   -> resetOnewire
        16   -> wOnewire


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  convertDs18b20
      46  readID
      46  readTemp
       4  t_18b20

 
   4 bytes in section .bss
 112 bytes in section .text
 
 112 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none

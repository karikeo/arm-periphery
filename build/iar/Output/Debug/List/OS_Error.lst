###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Nov/2016  14:40:00
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ilya\vendicont\arm-periphery\rtos\embos\iar\setup\OS_Error.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\rtos\embos\iar\setup\OS_Error.c -D
#        STM32F10X_HD -D USE_STDPERIPH_DRIVER -D DEBUG=1 -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\List --remarks
#        -o C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -On --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\List\OS_Error.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\Obj\OS_Error.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\rtos\embos\iar\setup\OS_Error.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER GmbH & Co KG                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2014  SEGGER Microcontroller GmbH & Co KG         *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       OS version: 4.02a                                            *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : OS_Error.c
     31          Purpose : OS error handler. Not required in "R" (release) builds
     32                    Feel free to modify this file acc. to your target system.
     33          --------  END-OF-HEADER  ---------------------------------------------
     34          */
     35          
     36          #include "RTOS.h"
     37          
     38          /*********************************************************************
     39          *
     40          *       Global functions
     41          *
     42          **********************************************************************
     43          */
     44          
     45          /*********************************************************************
     46          *
     47          *       (OS_Error)
     48          *
     49          **********************************************************************
     50          
     51           Run-time error reaction
     52          
     53           When this happens, a fatal error has occured and the kernel
     54           can not continue. In linux, the equivalent would be a
     55           "kernel panic"
     56          
     57           This routine can be modified to suit your needs ...
     58           E.g. a red LED could light up. When using an
     59           emulator, you may set a breakpoint here.
     60           In the release builds of the library (R), this routine is not required
     61           (as no checks are performed).
     62           In the stack check builds (S/SP), only error 120 may occur.
     63           In the debug builds(D/DP), all of the listed errors may occur.
     64          
     65           The following are the current errorcodes:
     66           (Please refer to the documentation for more info)
     67          
     68          *** Port 100..119 ********************************
     69          OS_ERR_ISR_INDEX                      (100 = 0x64)
     70          OS_ERR_ISR_VECTOR                     (101 = 0x65)
     71          OS_ERR_ISR_PRIO                       (102 = 0x66)
     72          OS_ERR_WRONG_STACK                    (103 = 0x67)
     73          OS_ERR_ISR_NO_HANDLER                 (104 = 0x68)  *** No interrupt handler was defined for this interrupt
     74          OS_ERR_TLS_INIT                       (105 = 0x69)  *** OS_TLS_Init() called multiple times from one task
     75          OS_ERR_MB_BUFFER_SIZE                 (106 = 0x6A)  *** For 16bit CPUs, the maximum buffer size for a mailbox (64KB) exceeded
     76          
     77          *** OS generic ***********************************
     78          
     79          OS_ERR_EXTEND_CONTEXT                 (116 = 0x74)  *** OS_ExtendTaskContext called multiple times from one task
     80          OS_ERR_TIMESLICE                      (117 = 0x75)  *** A timeslice value of 0 (illegal) was set.
     81          OS_ERR_INTERNAL                       (118 = 0x76)  *** OS_ChangeTask called without RegionCnt set (or other internal error)
     82          OS_ERR_IDLE_RETURNS                   (119 = 0x77)  *** Idle loop should not return
     83          
     84          *** Stack overflow ******************************
     85          OS_ERR_STACK                          (120 = 0x78)  *** Stack overflow or invalid stack
     86          
     87          *** Counting semaphore overflow ******************
     88          OS_ERR_CSEMA_OVERFLOW                 (121 = 0x79)
     89          
     90          *** Power handling module ************************
     91          OS_ERR_POWER_OVER                     (122 = 0x7A)
     92          OS_ERR_POWER_UNDER                    (123 = 0x7B)
     93          OS_ERR_POWER_INDEX                    (124 = 0x7C)
     94          
     95          *** System/interrupt stack ***********************
     96          OS_ERR_SYS_STACK                      (125 = 0x7D)  *** embOS system stack overflow
     97          OS_ERR_INT_STACK                      (126 = 0x7E)  *** Interrupt stack overflow
     98          
     99          *** Invalid or non-initialized data structures ***
    100          OS_ERR_INV_TASK                       (128 = 0x80)
    101          OS_ERR_INV_TIMER                      (129 = 0x81)
    102          OS_ERR_INV_MAILBOX                    (130 = 0x82)
    103          OS_ERR_INV_CSEMA                      (132 = 0x84)
    104          OS_ERR_INV_RSEMA                      (133 = 0x85)
    105          
    106          *** Using GetMail1, PutMail1, GetMailCond1 or PutMailCond1
    107          *** on a non-1 byte mailbox  *********************
    108          OS_ERR_MAILBOX_NOT1                   (135 = 0x87)
    109          
    110          *** Waitable objects deleted with waiting tasks or occupied by task ***
    111          OS_ERR_MAILBOX_DELETE                 (136 = 0x88)
    112          OS_ERR_CSEMA_DELETE                   (137 = 0x89)
    113          OS_ERR_RSEMA_DELETE                   (138 = 0x8A)
    114          
    115          *** Internal errors, please contact SEGGER Microcontroller ***
    116          OS_ERR_MAILBOX_NOT_IN_LIST            (140 = 0x8C)
    117          OS_ERR_TASKLIST_CORRUPT               (142 = 0x8E)
    118          
    119          *** Queue errors *********************************
    120          OS_ERR_QUEUE_INUSE                    (143 = 0x8F)
    121          OS_ERR_QUEUE_NOT_INUSE                (144 = 0x90)
    122          OS_ERR_QUEUE_INVALID                  (145 = 0x91)
    123          OS_ERR_QUEUE_DELETE                   (146 = 0x92)
    124          
    125          *** Not matching routine calls or macro usage ****
    126          OS_ERR_UNUSE_BEFORE_USE               (150 = 0x96)
    127          OS_ERR_LEAVEREGION_BEFORE_ENTERREGION (151 = 0x97)
    128          OS_ERR_LEAVEINT                       (152 = 0x98)
    129          OS_ERR_DICNT                          (153 = 0x99)
    130          OS_ERR_INTERRUPT_DISABLED             (154 = 0x9A)
    131          OS_ERR_TASK_ENDS_WITHOUT_TERMINATE    (155 = 0x9B)
    132          OS_ERR_RESOURCE_OWNER                 (156 = 0x9C)
    133          OS_ERR_REGIONCNT                      (157 = 0x9D)
    134          
    135          *** Not a legal system call during interrupt *****
    136          OS_ERR_ILLEGAL_IN_ISR                 (160 = 0xA0)
    137          
    138          *** Not a legal system call during timer *********
    139          OS_ERR_ILLEGAL_IN_TIMER               (161 = 0xA1)
    140          
    141          *** Not a legal system call outside interrupt ****
    142          OS_ERR_ILLEGAL_OUT_ISR                (162 = 0xA2)
    143          
    144          *** Illegal states or function calls *************
    145          OS_ERR_NOT_IN_ISR                     (163 = 0xA3)  *** OS_EnterInterrupt() has been called, but CPU is not in ISR state
    146          OS_ERR_IN_ISR                         (164 = 0xA4)  *** OS_EnterInterrupt() has not been called, but CPU is in ISR state
    147          
    148          OS_ERR_INIT_NOT_CALLED                (165 = 0xA5)  *** OS_InitKern() was not called
    149          
    150          OS_ERR_CPU_STATE_ISR_ILLEGAL          (166 = 0xA6)  *** OS-function called from ISR with high priority
    151          OS_ERR_CPU_STATE_ILLEGAL              (167 = 0xA7)  *** CPU runs in illegal mode
    152          OS_ERR_CPU_STATE_UNKNOWN              (168 = 0xA8)  *** CPU runs in unknown mode or mode could not be read
    153          
    154          *** Double used data structures **
    155          OS_ERR_2USE_TASK                      (170 = 0xAA)
    156          OS_ERR_2USE_TIMER                     (171 = 0xAB)
    157          OS_ERR_2USE_MAILBOX                   (172 = 0xAC)
    158          OS_ERR_2USE_BSEMA                     (173 = 0xAD)
    159          OS_ERR_2USE_CSEMA                     (174 = 0xAE)
    160          OS_ERR_2USE_RSEMA                     (175 = 0xAF)
    161          OS_ERR_2USE_MEMF                      (176 = 0xB0)
    162          
    163          *** Communication errors (OSCOM) **
    164          OS_ERR_NESTED_RX_INT                  (180 = 0xB4)
    165          
    166          *** Fixed block memory pool  ***
    167          OS_ERR_MEMF_INV                       (190 = 0xBE)
    168          OS_ERR_MEMF_INV_PTR                   (191 = 0xBF)
    169          OS_ERR_MEMF_PTR_FREE                  (192 = 0xC0)
    170          OS_ERR_MEMF_RELEASE                   (193 = 0xC1)
    171          OS_ERR_MEMF_POOLADDR                  (194 = 0xC2)
    172          OS_ERR_MEMF_BLOCKSIZE                 (195 = 0xC3)
    173          
    174          *** Task suspend / resume errors ***
    175          OS_ERR_SUSPEND_TOO_OFTEN              (200 = 0xC8)
    176          OS_ERR_RESUME_BEFORE_SUSPEND          (201 = 0xC9)
    177          
    178          *** Other task related errors ***
    179          OS_ERR_TASK_PRIORITY                  (202 = 0xCA)
    180          
    181          *** Event object ***
    182          OS_ERR_EVENT_INVALID                  (210 = 0xD2)
    183          OS_ERR_EVENT_DELETE                   (212 = 0xD4)
    184          
    185          *** Tick Hook ***
    186          OS_ERR_TICKHOOK_INVALID               (223 = 0xDF)
    187          OS_ERR_TICKHOOK_FUNC_INVALID          (224 = 0xE0)
    188          
    189          *** Cache related ***
    190          OS_ERR_NON_ALIGNED_INVALIDATE         (230 = 0xE6)  *** Cache invalidation needs to be cache line aligned
    191          
    192          *** System timer config related ***
    193          OS_ERR_NON_TIMERCYCLES_FUNC           (235 = 0xEB)
    194          OS_ERR_NON_TIMERINTPENDING_FUNC       (236 = 0xEC)
    195          
    196          *** embOS special build, or internal
    197          OS_ERR_TRIAL_LIMIT                    (254 = 0xFE)
    198          
    199          */
    200          

   \                                 In section .text, align 4, keep-with-next
    201          void OS_Error(int ErrCode) {
    202            OS_EnterRegion();      /* Avoid further task switches            */
   \                     OS_Error: (+1)
   \   00000000   0x4908             LDR.N    R1,??OS_Error_0
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x1C49             ADDS     R1,R1,#+1
   \   00000006   0x4A07             LDR.N    R2,??OS_Error_0
   \   00000008   0x7011             STRB     R1,[R2, #+0]
    203            OS_DICnt = 0u;         /* Allow interrupts so we can communicate */
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x4A05             LDR.N    R2,??OS_Error_0
   \   0000000E   0x7051             STRB     R1,[R2, #+1]
    204            OS_EI();
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0xF381 0x8811      MSR      BASEPRI,R1
    205            OS_Status = (OS_U8) ErrCode;
   \   00000016   0x4904             LDR.N    R1,??OS_Error_0+0x4
   \   00000018   0x7008             STRB     R0,[R1, #+0]
    206            while (OS_Status) {
   \                     ??OS_Error_1: (+1)
   \   0000001A   0x4903             LDR.N    R1,??OS_Error_0+0x4
   \   0000001C   0x7809             LDRB     R1,[R1, #+0]
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xD1FB             BNE.N    ??OS_Error_1
    207              /* Endless loop may be left by setting OS_Status to 0. */
    208            }
    209          }
   \   00000022   0x4770             BX       LR               ;; return
   \                     ??OS_Error_0:
   \   00000024   0x........         DC32     OS_Global
   \   00000028   0x........         DC32     OS_Status
    210          
    211          /****** End Of File *************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OS_Error


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      44  OS_Error

 
 44 bytes in section .text
 
 44 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       15/Nov/2016  14:53:02
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\ilya\vendicont\arm-periphery\Application\Start.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\Start.c -D STM32F10X_HD -D
#        USE_STDPERIPH_DRIVER -D DEBUG=1 -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\List --remarks
#        -o C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -On --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\List\Start.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\Obj\Start.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\Start.c
      1          /*********************************************************************
      2          --------- END-OF-HEADER --------------------------------------------*/
      3          #include "stm32f10x.h"
      4          #include "RTOS.h"
      5          #include "BSP.h"
      6          #include "log.h"
      7          #include "spi_slave.h"
      8          #include "flash.h"
      9          #include "vending/pt-vending.h"
     10          #include "18B20.h"
     11          
     12          /* Task stacks */

   \                                 In section .bss, align 4
     13          OS_STACKPTR int Stack1[256], Stack2[256], Stack3[256]/*, Stack4[256]*/;
   \                     Stack1:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 4
   \                     Stack2:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 4
   \                     Stack3:
   \   00000000                      DS8 1024
     14          /* Task-control-blocks */

   \                                 In section .bss, align 4
     15          OS_TASK TCB1, TCB2, TCB3, TCB4;
   \                     TCB1:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     TCB2:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     TCB3:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     TCB4:
   \   00000000                      DS8 80
     16          
     17          static void Task4(void) {
     18             extern float t_18b20;
     19             while (1) {
     20                float f;
     21                u16 u;
     22                OS_Delay (1000);
     23                u = readTemp();
     24                f = (float)u;
     25                f /= 16.0;
     26                //log( "t: %.1fC\r\n", f );
     27                t_18b20 = f;
     28             }
     29          }
     30          
     31          /*********************************************************************
     32          *
     33          *       main
     34          *
     35          *********************************************************************/
     36          

   \                                 In section .text, align 4, keep-with-next
     37          int main(void)
     38          {
   \                     main: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     39          	OS_IncDI();                      /* Initially disable interrupts  */
   \   00000002   0x4823             LDR.N    R0,??main_0
   \   00000004   0x7840             LDRB     R0,[R0, #+1]
   \   00000006   0x21F0             MOVS     R1,#+240
   \   00000008   0x4208             TST      R0,R1
   \   0000000A   0xD002             BEQ.N    ??main_1
   \   0000000C   0x2099             MOVS     R0,#+153
   \   0000000E   0x.... 0x....      BL       OS_Error
   \                     ??main_1: (+1)
   \   00000012   0x2080             MOVS     R0,#+128
   \   00000014   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000018   0xBF00             Nop      
   \   0000001A   0xBF00             Nop      
   \   0000001C   0x481C             LDR.N    R0,??main_0
   \   0000001E   0x7840             LDRB     R0,[R0, #+1]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0x491B             LDR.N    R1,??main_0
   \   00000024   0x7048             STRB     R0,[R1, #+1]
     40          	OS_InitKern();                   /* Initialize OS                 */
   \   00000026   0x.... 0x....      BL       OS_InitKern_STD
     41          	OS_InitHW();                     /* Initialize Hardware for OS    */
   \   0000002A   0x.... 0x....      BL       OS_InitHW
     42          	BSP_Init();                      /* Initialize LED ports          */
   \   0000002E   0x.... 0x....      BL       BSP_Init
     43          	OS_CREATETASK(&TCB1, "Task SPI", Task_spi,  50, Stack1);
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x9002             STR      R0,[SP, #+8]
   \   00000036   0xF44F 0x6080      MOV      R0,#+1024
   \   0000003A   0x9001             STR      R0,[SP, #+4]
   \   0000003C   0x4815             LDR.N    R0,??main_0+0x4
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x4B15             LDR.N    R3,??main_0+0x8
   \   00000042   0x2232             MOVS     R2,#+50
   \   00000044   0x4915             LDR.N    R1,??main_0+0xC
   \   00000046   0x4816             LDR.N    R0,??main_0+0x10
   \   00000048   0x.... 0x....      BL       OS_CreateTask_DP
     44          	OS_CREATETASK(&TCB2, "Task Vending", Task_vending,  51, Stack2);
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x9002             STR      R0,[SP, #+8]
   \   00000050   0xF44F 0x6080      MOV      R0,#+1024
   \   00000054   0x9001             STR      R0,[SP, #+4]
   \   00000056   0x4813             LDR.N    R0,??main_0+0x14
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0x4B13             LDR.N    R3,??main_0+0x18
   \   0000005C   0x2233             MOVS     R2,#+51
   \   0000005E   0x4913             LDR.N    R1,??main_0+0x1C
   \   00000060   0x4813             LDR.N    R0,??main_0+0x20
   \   00000062   0x.... 0x....      BL       OS_CreateTask_DP
     45          	OS_CREATETASK(&TCB3, "USART3", Task_USART3,  52, Stack3);
   \   00000066   0x2002             MOVS     R0,#+2
   \   00000068   0x9002             STR      R0,[SP, #+8]
   \   0000006A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000006E   0x9001             STR      R0,[SP, #+4]
   \   00000070   0x4810             LDR.N    R0,??main_0+0x24
   \   00000072   0x9000             STR      R0,[SP, #+0]
   \   00000074   0x4B10             LDR.N    R3,??main_0+0x28
   \   00000076   0x2234             MOVS     R2,#+52
   \   00000078   0x4910             LDR.N    R1,??main_0+0x2C
   \   0000007A   0x4811             LDR.N    R0,??main_0+0x30
   \   0000007C   0x.... 0x....      BL       OS_CreateTask_DP
     46          	//OS_CREATETASK(&TCB4, "Task4", Task4,  53, Stack4);
     47          	OS_Start();                      /* Start multitasking            */
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x4910             LDR.N    R1,??main_0+0x34
   \   00000084   0x7008             STRB     R0,[R1, #+0]
   \   00000086   0x.... 0x....      BL       OS_StartASM
     48          	return 0;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0xBD0E             POP      {R1-R3,PC}       ;; return
   \   0000008E   0xBF00             Nop      
   \                     ??main_0:
   \   00000090   0x........         DC32     OS_Global
   \   00000094   0x........         DC32     Stack1
   \   00000098   0x........         DC32     Task_spi
   \   0000009C   0x........         DC32     ?_0
   \   000000A0   0x........         DC32     TCB1
   \   000000A4   0x........         DC32     Stack2
   \   000000A8   0x........         DC32     Task_vending
   \   000000AC   0x........         DC32     ?_1
   \   000000B0   0x........         DC32     TCB2
   \   000000B4   0x........         DC32     Stack3
   \   000000B8   0x........         DC32     Task_USART3
   \   000000BC   0x........         DC32     ?_2
   \   000000C0   0x........         DC32     TCB3
   \   000000C4   0x........         DC32     OS_Running
     49          }

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x54 0x61          DC8 "Task SPI"
   \              0x73 0x6B    
   \              0x20 0x53    
   \              0x50 0x49    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x54 0x61          DC8 "Task Vending"
   \              0x73 0x6B    
   \              0x20 0x56    
   \              0x65 0x6E    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x55 0x53          DC8 "USART3"
   \              0x41 0x52    
   \              0x54 0x33    
   \              0x00         
   \   00000007   0x00               DC8 0
     50          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   main
        16   -> BSP_Init
        16   -> OS_CreateTask_DP
        16   -> OS_Error
        16   -> OS_InitHW
        16   -> OS_InitKern_STD
        16   -> OS_StartASM


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?_0
      16  ?_1
       8  ?_2
    1024  Stack1
    1024  Stack2
    1024  Stack3
      80  TCB1
      80  TCB2
      80  TCB3
      80  TCB4
     200  main

 
 3 392 bytes in section .bss
    36 bytes in section .rodata
   200 bytes in section .text
 
   200 bytes of CODE  memory
    36 bytes of CONST memory
 3 392 bytes of DATA  memory

Errors: none
Warnings: 1

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Nov/2016  14:39:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\ilya\vendicont\arm-periphery\Application\log.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\log.c -D STM32F10X_HD -D
#        USE_STDPERIPH_DRIVER -D DEBUG=1 -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\List --remarks
#        -o C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -On --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\List\log.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\Obj\log.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\log.c
      1          #include "stm32f10x.h"
      2          #include "log.h"
      3          #include "stdarg.h"
      4          #include "stdio.h"
      5          #include "string.h"
      6          #include "RTOS.h"
      7          
      8          

   \                                 In section .bss, align 4
      9          OS_RSEMA SemaLog;
   \                     SemaLog:
   \   00000000                      DS8 20
     10          
     11          #define SPRINTF_BUF_SIZE 1024

   \                                 In section .bss, align 4
     12          char sprintf_buf[ SPRINTF_BUF_SIZE ];
   \                     sprintf_buf:
   \   00000000                      DS8 1024
     13          

   \                                 In section .bss, align 4
     14          tLog logDesc;
   \                     logDesc:
   \   00000000                      DS8 2572
     15          
     16          #if defined (LOG)
     17          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     18          void enableLogging() {
     19             logDesc.prevEnabled = logDesc.enabled;
   \                     enableLogging: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0xF890 0x0A08      LDRB     R0,[R0, #+2568]
   \   00000006   0x....             LDR.N    R1,??DataTable8
   \   00000008   0xF891 0x1A08      LDRB     R1,[R1, #+2568]
   \   0000000C   0xF360 0x0141      BFI      R1,R0,#+1,#+1
   \   00000010   0x....             LDR.N    R0,??DataTable8
   \   00000012   0xF880 0x1A08      STRB     R1,[R0, #+2568]
     20             logDesc.enabled = 1;
   \   00000016   0x....             LDR.N    R0,??DataTable8
   \   00000018   0xF890 0x0A08      LDRB     R0,[R0, #+2568]
   \   0000001C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000020   0x....             LDR.N    R1,??DataTable8
   \   00000022   0xF881 0x0A08      STRB     R0,[R1, #+2568]
     21          }
   \   00000026   0x4770             BX       LR               ;; return
     22          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     23          void disableLogging() {
     24             logDesc.prevEnabled = logDesc.enabled;
   \                     disableLogging: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0xF890 0x0A08      LDRB     R0,[R0, #+2568]
   \   00000006   0x....             LDR.N    R1,??DataTable8
   \   00000008   0xF891 0x1A08      LDRB     R1,[R1, #+2568]
   \   0000000C   0xF360 0x0141      BFI      R1,R0,#+1,#+1
   \   00000010   0x....             LDR.N    R0,??DataTable8
   \   00000012   0xF880 0x1A08      STRB     R1,[R0, #+2568]
     25             logDesc.enabled = 0;
   \   00000016   0x....             LDR.N    R0,??DataTable8
   \   00000018   0xF890 0x0A08      LDRB     R0,[R0, #+2568]
   \   0000001C   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   00000020   0x....             LDR.N    R1,??DataTable8
   \   00000022   0xF881 0x0A08      STRB     R0,[R1, #+2568]
     26          }
   \   00000026   0x4770             BX       LR               ;; return
     27          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     28          u8 isLoggingEnabled() {
     29             return logDesc.enabled;
   \                     isLoggingEnabled: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0xF890 0x0A08      LDRB     R0,[R0, #+2568]
   \   00000006   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000A   0x4770             BX       LR               ;; return
     30          }
     31          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     32          u8 restoreLogging( void ) {
     33             return logDesc.enabled = logDesc.prevEnabled;
   \                     restoreLogging: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0xF890 0x0A08      LDRB     R0,[R0, #+2568]
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x0840             LSRS     R0,R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable8
   \   0000000C   0xF891 0x1A08      LDRB     R1,[R1, #+2568]
   \   00000010   0xF360 0x0100      BFI      R1,R0,#+0,#+1
   \   00000014   0x....             LDR.N    R0,??DataTable8
   \   00000016   0xF880 0x1A08      STRB     R1,[R0, #+2568]
   \   0000001A   0x....             LDR.N    R0,??DataTable8
   \   0000001C   0xF890 0x0A08      LDRB     R0,[R0, #+2568]
   \   00000020   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000024   0x4770             BX       LR               ;; return
     34          }
     35          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     36          void logInit() {
     37             int i = 0;
   \                     logInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
     38          #if 1
     39             logDesc.head = 0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x....             LDR.N    R2,??DataTable8
   \   00000006   0xF8C2 0x1A00      STR      R1,[R2, #+2560]
     40             logDesc.head = 0;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x....             LDR.N    R2,??DataTable8
   \   0000000E   0xF8C2 0x1A00      STR      R1,[R2, #+2560]
     41          #endif
     42             for ( i = 0; i < LOG_BUFFER_NUMBUFFERS; i++ ) {
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x0008             MOVS     R0,R1
   \                     ??logInit_0: (+1)
   \   00000016   0x2880             CMP      R0,#+128
   \   00000018   0xDA07             BGE.N    ??logInit_1
     43                //dbg( " buf#%d) %d \r\n", i, logDesc.buffers[ i ].size );
     44          #if 1
     45                logDesc.buffers[ i ].size = 0;
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x....             LDR.N    R2,??DataTable8
   \   0000001E   0x2314             MOVS     R3,#+20
   \   00000020   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000024   0x6111             STR      R1,[R2, #+16]
     46          #else
     47                if ( logDesc.buffers[ i ].size > LOG_BUFFER_DATASIZE )
     48                   logDesc.buffers[ i ].size = 0;
     49          
     50          #endif
     51          
     52          #if !defined (BOOTLOADER)
     53          
     54          #else
     55          #endif
     56             }
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0xE7F5             B.N      ??logInit_0
     57          }
   \                     ??logInit_1: (+1)
   \   0000002A   0x4770             BX       LR               ;; return
     58          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     59          u32 isLogEmpty() {
     60             u8 i;
     61             u32 size = 0;
   \                     isLogEmpty: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
     62             for ( i = 0 ; i < LOG_BUFFER_NUMBUFFERS; i++ ) {
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x0011             MOVS     R1,R2
   \                     ??isLogEmpty_0: (+1)
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x2980             CMP      R1,#+128
   \   0000000A   0xDA08             BGE.N    ??isLogEmpty_1
     63                size += logDesc.buffers[ i ].size;
   \   0000000C   0x....             LDR.N    R2,??DataTable8
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x2314             MOVS     R3,#+20
   \   00000012   0xFB03 0x2201      MLA      R2,R3,R1,R2
   \   00000016   0x6912             LDR      R2,[R2, #+16]
   \   00000018   0x1810             ADDS     R0,R2,R0
     64             }
   \   0000001A   0x1C49             ADDS     R1,R1,#+1
   \   0000001C   0xE7F3             B.N      ??isLogEmpty_0
     65             return size;
   \                     ??isLogEmpty_1: (+1)
   \   0000001E   0x4770             BX       LR               ;; return
     66          }
     67          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     68          void logWrite( char* data, int size ) {
   \                     logWrite: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     69             tLogBuffer *b;
     70             char* p;
     71             int sizeLeft;
     72             int chunkSize;
     73          
     74             if ( !logDesc.enabled )
   \   00000008   0x....             LDR.N    R0,??DataTable8
   \   0000000A   0xF890 0x0A08      LDRB     R0,[R0, #+2568]
   \   0000000E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD05E             BEQ.N    ??logWrite_0
     75                return;
     76          
     77             sizeLeft = size;
   \                     ??logWrite_1: (+1)
   \   00000016   0x46A8             MOV      R8,R5
     78          
     79             for ( ; sizeLeft ; ) {
   \                     ??logWrite_2: (+1)
   \   00000018   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000001C   0xD05A             BEQ.N    ??logWrite_3
     80          
     81                b = &logDesc.buffers[ logDesc.head ];
   \   0000001E   0x....             LDR.N    R0,??DataTable8
   \   00000020   0x....             LDR.N    R1,??DataTable8
   \   00000022   0xF8D1 0x1A00      LDR      R1,[R1, #+2560]
   \   00000026   0x2214             MOVS     R2,#+20
   \   00000028   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   0000002C   0x0006             MOVS     R6,R0
     82                p = &b->data[ b->size ];
   \   0000002E   0x6930             LDR      R0,[R6, #+16]
   \   00000030   0x1980             ADDS     R0,R0,R6
   \   00000032   0x0007             MOVS     R7,R0
     83          
     84                if ( LOG_BUFFER_DATASIZE - b->size < sizeLeft ) {
   \   00000034   0x6930             LDR      R0,[R6, #+16]
   \   00000036   0xF1D0 0x0010      RSBS     R0,R0,#+16
   \   0000003A   0x4540             CMP      R0,R8
   \   0000003C   0xDA39             BGE.N    ??logWrite_4
     85                   chunkSize = LOG_BUFFER_DATASIZE - b->size;
   \   0000003E   0x6930             LDR      R0,[R6, #+16]
   \   00000040   0xF1D0 0x0010      RSBS     R0,R0,#+16
   \   00000044   0x4681             MOV      R9,R0
     86                   logDesc.head++;
   \   00000046   0x....             LDR.N    R0,??DataTable8
   \   00000048   0xF8D0 0x0A00      LDR      R0,[R0, #+2560]
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
   \   0000004E   0x....             LDR.N    R1,??DataTable8
   \   00000050   0xF8C1 0x0A00      STR      R0,[R1, #+2560]
     87                   logDesc.head = logDesc.head % LOG_BUFFER_NUMBUFFERS;
   \   00000054   0x....             LDR.N    R0,??DataTable8
   \   00000056   0xF8D0 0x0A00      LDR      R0,[R0, #+2560]
   \   0000005A   0x2180             MOVS     R1,#+128
   \   0000005C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000060   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000064   0x....             LDR.N    R0,??DataTable8
   \   00000066   0xF8C0 0x2A00      STR      R2,[R0, #+2560]
     88                   logDesc.buffers[ logDesc.head ].size = 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x....             LDR.N    R1,??DataTable8
   \   0000006E   0x....             LDR.N    R2,??DataTable8
   \   00000070   0xF8D2 0x2A00      LDR      R2,[R2, #+2560]
   \   00000074   0x2314             MOVS     R3,#+20
   \   00000076   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   0000007A   0x6108             STR      R0,[R1, #+16]
     89                   if ( logDesc.head == logDesc.tail )
   \   0000007C   0x....             LDR.N    R0,??DataTable8
   \   0000007E   0xF8D0 0x0A00      LDR      R0,[R0, #+2560]
   \   00000082   0x....             LDR.N    R1,??DataTable8
   \   00000084   0xF8D1 0x1A04      LDR      R1,[R1, #+2564]
   \   00000088   0x4288             CMP      R0,R1
   \   0000008A   0xD106             BNE.N    ??logWrite_5
     90                      logDesc.tail++;
   \   0000008C   0x....             LDR.N    R0,??DataTable8
   \   0000008E   0xF8D0 0x0A04      LDR      R0,[R0, #+2564]
   \   00000092   0x1C40             ADDS     R0,R0,#+1
   \   00000094   0x....             LDR.N    R1,??DataTable8
   \   00000096   0xF8C1 0x0A04      STR      R0,[R1, #+2564]
     91                      logDesc.tail = logDesc.tail % LOG_BUFFER_NUMBUFFERS;
   \                     ??logWrite_5: (+1)
   \   0000009A   0x....             LDR.N    R0,??DataTable8
   \   0000009C   0xF8D0 0x0A04      LDR      R0,[R0, #+2564]
   \   000000A0   0x2180             MOVS     R1,#+128
   \   000000A2   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000A6   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000AA   0x....             LDR.N    R0,??DataTable8
   \   000000AC   0xF8C0 0x2A04      STR      R2,[R0, #+2564]
   \   000000B0   0xE000             B.N      ??logWrite_6
     92                } else {
     93                   chunkSize = sizeLeft;
   \                     ??logWrite_4: (+1)
   \   000000B2   0x46C1             MOV      R9,R8
     94                }
     95          
     96                memcpy( p, &data[ size - sizeLeft ], chunkSize );
   \                     ??logWrite_6: (+1)
   \   000000B4   0xEBB5 0x0008      SUBS     R0,R5,R8
   \   000000B8   0xEB10 0x0A04      ADDS     R10,R0,R4
   \   000000BC   0x464A             MOV      R2,R9
   \   000000BE   0x4651             MOV      R1,R10
   \   000000C0   0x0038             MOVS     R0,R7
   \   000000C2   0x.... 0x....      BL       __aeabi_memcpy
     97                b->size += chunkSize;
   \   000000C6   0x6930             LDR      R0,[R6, #+16]
   \   000000C8   0xEB19 0x0000      ADDS     R0,R9,R0
   \   000000CC   0x6130             STR      R0,[R6, #+16]
     98                sizeLeft -= chunkSize;
   \   000000CE   0xEBB8 0x0809      SUBS     R8,R8,R9
   \   000000D2   0xE7A1             B.N      ??logWrite_2
     99          
    100          #ifdef DEBUG
    101                //if ( sizeLeft )
    102                //   dbg("\r\nLOG:%d written, h:%d, t:%d, chsz:%d, sizeLeft:%d\r\n\r\n", chunkSize, logDesc.head, logDesc.tail, logDesc.buffers[ logDesc.head ].size, sizeLeft );
    103          #endif
    104             }
    105          
    106          }
   \                     ??logWrite_3: (+1)
   \                     ??logWrite_0: (+1)
   \   000000D4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    107          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    108          int logRead( char* data, int maxSize ) {
   \                     logRead: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    109             tLogBuffer *b;
    110             int chunkSize;
    111             int totalSize = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
    112          
    113          #if !defined (BOOTLOADER)
    114             OS_Use( &SemaLog );
   \   0000000C   0x....             LDR.N    R0,??DataTable8_1
   \   0000000E   0x.... 0x....      BL       OS_Use
    115          #endif
    116          
    117             for ( ; totalSize < maxSize ; ) {
   \                     ??logRead_0: (+1)
   \   00000012   0x45A8             CMP      R8,R5
   \   00000014   0xDA44             BGE.N    ??logRead_1
    118          
    119                b = &logDesc.buffers[ logDesc.tail ];
   \   00000016   0x....             LDR.N    R0,??DataTable8
   \   00000018   0x....             LDR.N    R1,??DataTable8
   \   0000001A   0xF8D1 0x1A04      LDR      R1,[R1, #+2564]
   \   0000001E   0x2214             MOVS     R2,#+20
   \   00000020   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000024   0x0006             MOVS     R6,R0
    120                if ( totalSize + b->size < maxSize )
   \   00000026   0x6930             LDR      R0,[R6, #+16]
   \   00000028   0xEB10 0x0008      ADDS     R0,R0,R8
   \   0000002C   0x42A8             CMP      R0,R5
   \   0000002E   0xDA02             BGE.N    ??logRead_2
    121                   chunkSize = b->size;
   \   00000030   0x6930             LDR      R0,[R6, #+16]
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0xE002             B.N      ??logRead_3
    122                else
    123                   chunkSize = maxSize - totalSize ;
   \                     ??logRead_2: (+1)
   \   00000036   0xEBB5 0x0008      SUBS     R0,R5,R8
   \   0000003A   0x0007             MOVS     R7,R0
    124          #ifdef DEBUG
    125                //dbg( "tail:%d chunk:%d\r\n", logDesc.tail, chunkSize );
    126          #endif
    127                memcpy( &data[ totalSize ], b->data, chunkSize );
   \                     ??logRead_3: (+1)
   \   0000003C   0xEB18 0x0904      ADDS     R9,R8,R4
   \   00000040   0x003A             MOVS     R2,R7
   \   00000042   0x0031             MOVS     R1,R6
   \   00000044   0x4648             MOV      R0,R9
   \   00000046   0x.... 0x....      BL       __aeabi_memcpy
    128                totalSize += chunkSize;
   \   0000004A   0xEB17 0x0808      ADDS     R8,R7,R8
    129          
    130                if ( b->size < LOG_BUFFER_DATASIZE ) {
   \   0000004E   0x6930             LDR      R0,[R6, #+16]
   \   00000050   0x2810             CMP      R0,#+16
   \   00000052   0xDA08             BGE.N    ??logRead_4
    131                   if ( maxSize < LOG_BUFFER_DATASIZE ) {
   \   00000054   0x2D10             CMP      R5,#+16
   \   00000056   0xDA03             BGE.N    ??logRead_5
    132                      b->size -= chunkSize;
   \   00000058   0x6930             LDR      R0,[R6, #+16]
   \   0000005A   0x1BC0             SUBS     R0,R0,R7
   \   0000005C   0x6130             STR      R0,[R6, #+16]
   \   0000005E   0xE001             B.N      ??logRead_6
    133                   } else {
    134                      b->size = 0;
   \                     ??logRead_5: (+1)
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x6130             STR      R0,[R6, #+16]
    135                   }
    136                   break;
   \                     ??logRead_6: (+1)
   \   00000064   0xE01C             B.N      ??logRead_1
    137                }
    138          
    139                b->size = 0;
   \                     ??logRead_4: (+1)
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x6130             STR      R0,[R6, #+16]
    140                if ( logDesc.tail == logDesc.head )
   \   0000006A   0x....             LDR.N    R0,??DataTable8
   \   0000006C   0xF8D0 0x0A04      LDR      R0,[R0, #+2564]
   \   00000070   0x....             LDR.N    R1,??DataTable8
   \   00000072   0xF8D1 0x1A00      LDR      R1,[R1, #+2560]
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD012             BEQ.N    ??logRead_1
    141                   break;
    142          
    143                logDesc.tail++;
   \                     ??logRead_7: (+1)
   \   0000007A   0x....             LDR.N    R0,??DataTable8
   \   0000007C   0xF8D0 0x0A04      LDR      R0,[R0, #+2564]
   \   00000080   0x1C40             ADDS     R0,R0,#+1
   \   00000082   0x....             LDR.N    R1,??DataTable8
   \   00000084   0xF8C1 0x0A04      STR      R0,[R1, #+2564]
    144                logDesc.tail = logDesc.tail % LOG_BUFFER_NUMBUFFERS;
   \   00000088   0x....             LDR.N    R0,??DataTable8
   \   0000008A   0xF8D0 0x0A04      LDR      R0,[R0, #+2564]
   \   0000008E   0x2180             MOVS     R1,#+128
   \   00000090   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000094   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000098   0x....             LDR.N    R0,??DataTable8
   \   0000009A   0xF8C0 0x2A04      STR      R2,[R0, #+2564]
   \   0000009E   0xE7B8             B.N      ??logRead_0
    145             }
    146          
    147          #if !defined (BOOTLOADER)
    148             OS_Unuse( &SemaLog );
   \                     ??logRead_1: (+1)
   \   000000A0   0x....             LDR.N    R0,??DataTable8_1
   \   000000A2   0x.... 0x....      BL       OS_Unuse
    149          #endif
    150          
    151             return totalSize;
   \   000000A6   0x4640             MOV      R0,R8
   \   000000A8   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    152          }
    153          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    154          void log1( char* fmt, ...) {
   \                     log1: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB578             PUSH     {R3-R6,LR}
   \   00000004   0x0004             MOVS     R4,R0
    155             int rc;
    156             va_list  list;
    157             va_start( list, fmt );
   \   00000006   0xA805             ADD      R0,SP,#+20
   \   00000008   0x0006             MOVS     R6,R0
    158          
    159          #if !defined (BOOTLOADER)
    160            OS_Use( &SemaLog );
   \   0000000A   0x....             LDR.N    R0,??DataTable8_1
   \   0000000C   0x.... 0x....      BL       OS_Use
    161          #endif
    162          
    163          
    164          #if 1
    165             rc = vsnprintf( sprintf_buf, SPRINTF_BUF_SIZE, fmt, list );
   \   00000010   0x0033             MOVS     R3,R6
   \   00000012   0x0022             MOVS     R2,R4
   \   00000014   0xF44F 0x6180      MOV      R1,#+1024
   \   00000018   0x....             LDR.N    R0,??DataTable8_2
   \   0000001A   0x.... 0x....      BL       vsnprintf
   \   0000001E   0x0005             MOVS     R5,R0
    166             if ( rc > 0 ) {
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xDB0A             BLT.N    ??log1_0
    167          
    168          //#ifdef DEBUG
    169          #if 0
    170                int i;
    171                for ( i = 0; i < rc; ) {
    172                   int n = ( rc - i > 512 ) ? 512 : rc - i;
    173                   //ebdat7_02DebugUartSend( (u8*)&sprintf_buf[ i ], n );
    174                   i += n;
    175                }
    176          #endif
    177          
    178                if ( logDesc.enabled )
   \   00000024   0x....             LDR.N    R0,??DataTable8
   \   00000026   0xF890 0x0A08      LDRB     R0,[R0, #+2568]
   \   0000002A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD003             BEQ.N    ??log1_0
    179                   logWrite( sprintf_buf, rc );
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0x....             LDR.N    R0,??DataTable8_2
   \   00000036   0x.... 0x....      BL       logWrite
    180             }
    181          #else
    182             dbg( fmt, list );
    183          #endif
    184          
    185          #if !defined (BOOTLOADER)
    186            OS_Unuse( &SemaLog );
   \                     ??log1_0: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable8_1
   \   0000003C   0x.... 0x....      BL       OS_Unuse
    187          #endif
    188          
    189             va_end( list );
    190          }
   \   00000040   0xBC71             POP      {R0,R4-R6}
   \   00000042   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     logDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     SemaLog

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     sprintf_buf
    191          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   disableLogging
       0   enableLogging
       0   isLogEmpty
       0   isLoggingEnabled
      32   log1
        32   -> OS_Unuse
        32   -> OS_Use
        32   -> logWrite
        32   -> vsnprintf
       0   logInit
      32   logRead
        32   -> OS_Unuse
        32   -> OS_Use
        32   -> __aeabi_memcpy
      32   logWrite
        32   -> __aeabi_memcpy
       0   restoreLogging


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
      20  SemaLog
      40  disableLogging
      40  enableLogging
      32  isLogEmpty
      12  isLoggingEnabled
      70  log1
    2572  logDesc
      44  logInit
     172  logRead
     216  logWrite
      38  restoreLogging
    1024  sprintf_buf

 
 3 616 bytes in section .bss
   676 bytes in section .text
 
   676 bytes of CODE memory
 3 616 bytes of DATA memory

Errors: none
Warnings: none

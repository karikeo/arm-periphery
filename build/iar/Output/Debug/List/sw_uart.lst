###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Nov/2016  14:40:04
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\ilya\vendicont\arm-periphery\Application\sw_uart.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\sw_uart.c -D STM32F10X_HD
#        -D USE_STDPERIPH_DRIVER -D DEBUG=1 -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\List --remarks
#        -o C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -On --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\List\sw_uart.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Debug\Obj\sw_uart.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\sw_uart.c
      1          #include "stm32f10x.h"
      2          #include "stm32f10x_dbgmcu.h"
      3          #include "RTOS.h"
      4          #include "BSP.h"
      5          //#include "stdio.h"
      6          //#include "log.h"
      7          //#include "vending/pt-vending.h"
      8          //#include "vending/dex.h"
      9          //#include "vending/mdb.h"
     10          #include "utils.h"
     11          #include "sw_uart.h"
     12          
     13          extern GPIO_InitTypeDef GPIO_InitStructure;

   \                                 In section .bss, align 4
     14          TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
   \                     TIM_TimeBaseInitStruct:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     15          TIM_ICInitTypeDef TIM_ICInitStruct;
   \                     TIM_ICInitStruct:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     16          TIM_OCInitTypeDef TIM_OCInitStruct;
   \                     TIM_OCInitStruct:
   \   00000000                      DS8 16
     17          

   \                                 In section .bss, align 4
     18          t_sw_uart sw_uart;
   \                     sw_uart:
   \   00000000                      DS8 76
     19          

   \                                 In section .text, align 2, keep-with-next
     20          void sw_uart_init()
     21          {
   \                     sw_uart_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     22            //sw_uart.tx.buf[0] = 0xFF;
     23            //sw_uart.tx.size = 1;
     24            sw_uart.tx.pos = 0;   
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable5
   \   00000008   0x7048             STRB     R0,[R1, #+1]
     25          
     26            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
   \   0000000A   0xF44F 0x7080      MOV      R0,#+256
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000012   0x8008             STRH     R0,[R1, #+0]
     27            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000001A   0x7088             STRB     R0,[R1, #+2]
     28            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000022   0x70C8             STRB     R0,[R1, #+3]
     29            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0x40010c00
   \   0000002C   0x.... 0x....      BL       GPIO_Init
     30            TX_H;
   \   00000030   0xF44F 0x7180      MOV      R1,#+256
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0x40010c00
   \   00000038   0x.... 0x....      BL       GPIO_SetBits
     31          
     32            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \   0000003C   0xF44F 0x7000      MOV      R0,#+512
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000044   0x8008             STRH     R0,[R1, #+0]
     33            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000046   0x2003             MOVS     R0,#+3
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000004C   0x7088             STRB     R0,[R1, #+2]
     34            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   \   0000004E   0x2048             MOVS     R0,#+72
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000054   0x70C8             STRB     R0,[R1, #+3]
     35            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0x40010c00
   \   0000005E   0x.... 0x....      BL       GPIO_Init
     36          
     37            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x2004             MOVS     R0,#+4
   \   00000066   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     38          
     39            TIM_TimeBaseInitStruct.TIM_Period = (1000000/9523)-1;
   \   0000006A   0x2068             MOVS     R0,#+104
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000070   0x8088             STRH     R0,[R1, #+4]
     40            //TIM_TimeBaseInitStruct.TIM_Period = (1000000/9600)-1;  
     41            TIM_TimeBaseInitStruct.TIM_Prescaler = 36-1;
   \   00000072   0x2023             MOVS     R0,#+35
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000078   0x8008             STRH     R0,[R1, #+0]
     42            TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000080   0x80C8             STRH     R0,[R1, #+6]
     43            TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000088   0x8048             STRH     R0,[R1, #+2]
     44            TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStruct);
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable5_4  ;; 0x40000800
   \   00000092   0x.... 0x....      BL       TIM_TimeBaseInit
     45          
     46            TIM_ICInitStruct.TIM_Channel = TIM_Channel_4;
   \   00000096   0x200C             MOVS     R0,#+12
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   0000009C   0x8008             STRH     R0,[R1, #+0]
     47            TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Falling;
   \   0000009E   0x2002             MOVS     R0,#+2
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000A4   0x8048             STRH     R0,[R1, #+2]
     48            TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000AC   0x8088             STRH     R0,[R1, #+4]
     49            TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000B4   0x80C8             STRH     R0,[R1, #+6]
     50            TIM_ICInitStruct.TIM_ICFilter = 0;
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000BC   0x8108             STRH     R0,[R1, #+8]
     51            TIM_ICInit(TIM4, &TIM_ICInitStruct);
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable5_4  ;; 0x40000800
   \   000000C6   0x.... 0x....      BL       TIM_ICInit
     52          
     53            TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE );
   \   000000CA   0x2201             MOVS     R2,#+1
   \   000000CC   0x2101             MOVS     R1,#+1
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable5_4  ;; 0x40000800
   \   000000D2   0x.... 0x....      BL       TIM_ITConfig
     54            TIM_ITConfig(TIM4, TIM_IT_CC4, ENABLE );   
   \   000000D6   0x2201             MOVS     R2,#+1
   \   000000D8   0x2110             MOVS     R1,#+16
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable5_4  ;; 0x40000800
   \   000000DE   0x.... 0x....      BL       TIM_ITConfig
     55            TIM_Cmd(TIM4, ENABLE);
   \   000000E2   0x2101             MOVS     R1,#+1
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable5_4  ;; 0x40000800
   \   000000E8   0x.... 0x....      BL       TIM_Cmd
     56            OS_ARM_EnableISR( TIM4_IRQn + 16 );
   \   000000EC   0x202E             MOVS     R0,#+46
   \   000000EE   0x.... 0x....      BL       OS_ARM_EnableISR
     57          }
   \   000000F2   0xBD01             POP      {R0,PC}          ;; return
     58          
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void sw_uart_tx(u8* p, int size)
     61          {
   \                     sw_uart_tx: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     62            sw_uart.tx.pos = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable5
   \   0000000C   0x7048             STRB     R0,[R1, #+1]
     63            memcpy( sw_uart.tx.buf, p, size );
   \   0000000E   0x.... 0x....      LDR.W    R6,??DataTable5_6
   \   00000012   0x002A             MOVS     R2,R5
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x0030             MOVS     R0,R6
   \   00000018   0x.... 0x....      BL       __aeabi_memcpy
     64            sw_uart.tx.size = size;  
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable5
   \   00000020   0x7005             STRB     R5,[R0, #+0]
     65          }
   \   00000022   0xBD70             POP      {R4-R6,PC}       ;; return
     66          

   \                                 In section .bss, align 1
     67          u8 pin8 = 0;
   \                     pin8:
   \   00000000                      DS8 1
     68          

   \                                 In section .text, align 2, keep-with-next
     69          void swuart_isr_tx()
     70          {
   \                     swuart_isr_tx: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     71          #if 0
     72            if ( pin8 )
     73            {
     74              TX_H;
     75            }
     76            else
     77            {
     78              TX_L;
     79            }
     80            pin8 = !pin8;
     81          #else  
     82            
     83            static u8 st = 0;
     84            static u8 b = 0;
     85            static u8 bit_no = 0;  
     86            switch( st )
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_7
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD014             BEQ.N    ??swuart_isr_tx_0
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xD038             BEQ.N    ??swuart_isr_tx_1
   \   00000010   0x2804             CMP      R0,#+4
   \   00000012   0xD036             BEQ.N    ??swuart_isr_tx_1
   \   00000014   0x2806             CMP      R0,#+6
   \   00000016   0xD034             BEQ.N    ??swuart_isr_tx_1
   \   00000018   0x2808             CMP      R0,#+8
   \   0000001A   0xD032             BEQ.N    ??swuart_isr_tx_1
   \   0000001C   0x280A             CMP      R0,#+10
   \   0000001E   0xD030             BEQ.N    ??swuart_isr_tx_1
   \   00000020   0x280C             CMP      R0,#+12
   \   00000022   0xD02E             BEQ.N    ??swuart_isr_tx_1
   \   00000024   0x280E             CMP      R0,#+14
   \   00000026   0xD02C             BEQ.N    ??swuart_isr_tx_1
   \   00000028   0x2810             CMP      R0,#+16
   \   0000002A   0xD02A             BEQ.N    ??swuart_isr_tx_1
   \   0000002C   0x2812             CMP      R0,#+18
   \   0000002E   0xD040             BEQ.N    ??swuart_isr_tx_2
   \   00000030   0x2814             CMP      R0,#+20
   \   00000032   0xD044             BEQ.N    ??swuart_isr_tx_3
   \   00000034   0xE048             B.N      ??swuart_isr_tx_4
     87            {
     88              case 0:
     89                if ( sw_uart.tx.pos < sw_uart.tx.size )
   \                     ??swuart_isr_tx_0: (+1)
   \   00000036   0x....             LDR.N    R0,??DataTable5
   \   00000038   0x7840             LDRB     R0,[R0, #+1]
   \   0000003A   0x....             LDR.N    R1,??DataTable5
   \   0000003C   0x7809             LDRB     R1,[R1, #+0]
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD214             BCS.N    ??swuart_isr_tx_5
     90                {
     91                  b = sw_uart.tx.buf[ sw_uart.tx.pos ];
   \   00000042   0x....             LDR.N    R0,??DataTable5
   \   00000044   0x....             LDR.N    R1,??DataTable5
   \   00000046   0x7849             LDRB     R1,[R1, #+1]
   \   00000048   0x1808             ADDS     R0,R1,R0
   \   0000004A   0x7880             LDRB     R0,[R0, #+2]
   \   0000004C   0x....             LDR.N    R1,??DataTable5_8
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
     92                  bit_no = 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             LDR.N    R1,??DataTable5_9
   \   00000054   0x7008             STRB     R0,[R1, #+0]
     93                  TX_L;
   \   00000056   0xF44F 0x7180      MOV      R1,#+256
   \   0000005A   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40010c00
   \   0000005C   0x.... 0x....      BL       GPIO_ResetBits
     94                  st++;
   \   00000060   0x....             LDR.N    R0,??DataTable5_7
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x1C40             ADDS     R0,R0,#+1
   \   00000066   0x....             LDR.N    R1,??DataTable5_7
   \   00000068   0x7008             STRB     R0,[R1, #+0]
     95                  return;
   \   0000006A   0xE03E             B.N      ??swuart_isr_tx_6
     96                }
     97                else if ( sw_uart.tx.pos > 0 )
   \                     ??swuart_isr_tx_5: (+1)
   \   0000006C   0x....             LDR.N    R0,??DataTable5
   \   0000006E   0x7840             LDRB     R0,[R0, #+1]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD005             BEQ.N    ??swuart_isr_tx_7
     98                {
     99                  sw_uart.tx.pos = 0;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x....             LDR.N    R1,??DataTable5
   \   00000078   0x7048             STRB     R0,[R1, #+1]
    100                  sw_uart.tx.size = 0;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x....             LDR.N    R1,??DataTable5
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    101                }
    102                break;
   \                     ??swuart_isr_tx_7: (+1)
   \   00000080   0xE022             B.N      ??swuart_isr_tx_4
    103               
    104              case 2:
    105              case 4:
    106              case 6:      
    107              case 8:
    108              case 10:
    109              case 12:
    110              case 14:      
    111              case 16:      
    112                ( b & ( 0x01 << bit_no++ ) ) ? TX_H : TX_L;
   \                     ??swuart_isr_tx_1: (+1)
   \   00000082   0x....             LDR.N    R0,??DataTable5_9
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x1C41             ADDS     R1,R0,#+1
   \   00000088   0x....             LDR.N    R2,??DataTable5_9
   \   0000008A   0x7011             STRB     R1,[R2, #+0]
   \   0000008C   0x....             LDR.N    R1,??DataTable5_8
   \   0000008E   0x7809             LDRB     R1,[R1, #+0]
   \   00000090   0x2201             MOVS     R2,#+1
   \   00000092   0xFA12 0xF000      LSLS     R0,R2,R0
   \   00000096   0x4201             TST      R1,R0
   \   00000098   0xD005             BEQ.N    ??swuart_isr_tx_8
   \   0000009A   0xF44F 0x7180      MOV      R1,#+256
   \   0000009E   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40010c00
   \   000000A0   0x.... 0x....      BL       GPIO_SetBits
   \   000000A4   0xE004             B.N      ??swuart_isr_tx_9
   \                     ??swuart_isr_tx_8: (+1)
   \   000000A6   0xF44F 0x7180      MOV      R1,#+256
   \   000000AA   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40010c00
   \   000000AC   0x.... 0x....      BL       GPIO_ResetBits
    113                break;
   \                     ??swuart_isr_tx_9: (+1)
   \   000000B0   0xE00A             B.N      ??swuart_isr_tx_4
    114                
    115              case 18:
    116                TX_H;
   \                     ??swuart_isr_tx_2: (+1)
   \   000000B2   0xF44F 0x7180      MOV      R1,#+256
   \   000000B6   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40010c00
   \   000000B8   0x.... 0x....      BL       GPIO_SetBits
    117                break;
   \   000000BC   0xE004             B.N      ??swuart_isr_tx_4
    118                
    119              case 20:
    120                sw_uart.tx.pos++;
   \                     ??swuart_isr_tx_3: (+1)
   \   000000BE   0x....             LDR.N    R0,??DataTable5
   \   000000C0   0x7840             LDRB     R0,[R0, #+1]
   \   000000C2   0x1C40             ADDS     R0,R0,#+1
   \   000000C4   0x....             LDR.N    R1,??DataTable5
   \   000000C6   0x7048             STRB     R0,[R1, #+1]
    121                //sw_uart.tx.buf[0]++;
    122                break;      
    123            }
    124                
    125            if ( st >= 20 )  
   \                     ??swuart_isr_tx_4: (+1)
   \   000000C8   0x....             LDR.N    R0,??DataTable5_7
   \   000000CA   0x7800             LDRB     R0,[R0, #+0]
   \   000000CC   0x2814             CMP      R0,#+20
   \   000000CE   0xDB03             BLT.N    ??swuart_isr_tx_10
    126            {
    127              st = 0;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x....             LDR.N    R1,??DataTable5_7
   \   000000D4   0x7008             STRB     R0,[R1, #+0]
   \   000000D6   0xE008             B.N      ??swuart_isr_tx_11
    128            }
    129            else if ( st != 0 )
   \                     ??swuart_isr_tx_10: (+1)
   \   000000D8   0x....             LDR.N    R0,??DataTable5_7
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD004             BEQ.N    ??swuart_isr_tx_11
    130            {
    131              st++;
   \   000000E0   0x....             LDR.N    R0,??DataTable5_7
   \   000000E2   0x7800             LDRB     R0,[R0, #+0]
   \   000000E4   0x1C40             ADDS     R0,R0,#+1
   \   000000E6   0x....             LDR.N    R1,??DataTable5_7
   \   000000E8   0x7008             STRB     R0,[R1, #+0]
    132            }
    133          #endif  
    134          }
   \                     ??swuart_isr_tx_11: (+1)
   \                     ??swuart_isr_tx_6: (+1)
   \   000000EA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??st:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??b:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??bit_no:
   \   00000000                      DS8 1
    135          

   \                                 In section .text, align 2, keep-with-next
    136          void swuart_isr_rx(void)
    137          {
   \                     swuart_isr_rx: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    138            u8 bit = RX;
   \   00000004   0xF44F 0x7100      MOV      R1,#+512
   \   00000008   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40010c00
   \   0000000A   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   0000000E   0x0004             MOVS     R4,R0
    139            u8 bit1 = RX;
   \   00000010   0xF44F 0x7100      MOV      R1,#+512
   \   00000014   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40010c00
   \   00000016   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   0000001A   0x0005             MOVS     R5,R0
    140            u8 bit2 = RX;
   \   0000001C   0xF44F 0x7100      MOV      R1,#+512
   \   00000020   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40010c00
   \   00000022   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   00000026   0x0006             MOVS     R6,R0
    141            u8 done = 0;
   \   00000028   0x2700             MOVS     R7,#+0
    142            u8 framing_err = 0;  
   \   0000002A   0xF05F 0x0800      MOVS     R8,#+0
    143            static u8 st = 0;
    144            static u8 b = 0;
    145            static u8 bit_no = 0;  
    146            
    147            if ( bit != bit1 || bit != bit2 )
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x42AC             CMP      R4,R5
   \   00000034   0xD103             BNE.N    ??swuart_isr_rx_0
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003A   0x42B4             CMP      R4,R6
   \   0000003C   0xD002             BEQ.N    ??swuart_isr_rx_1
    148            {
    149              b = 0;
   \                     ??swuart_isr_rx_0: (+1)
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable5_10
   \   00000042   0x7008             STRB     R0,[R1, #+0]
    150            }
    151            
    152            switch( st )
   \                     ??swuart_isr_rx_1: (+1)
   \   00000044   0x....             LDR.N    R0,??DataTable5_11
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD014             BEQ.N    ??swuart_isr_rx_2
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD035             BEQ.N    ??swuart_isr_rx_3
   \   00000050   0x2803             CMP      R0,#+3
   \   00000052   0xD040             BEQ.N    ??swuart_isr_rx_4
   \   00000054   0x2805             CMP      R0,#+5
   \   00000056   0xD03E             BEQ.N    ??swuart_isr_rx_4
   \   00000058   0x2807             CMP      R0,#+7
   \   0000005A   0xD03C             BEQ.N    ??swuart_isr_rx_4
   \   0000005C   0x2809             CMP      R0,#+9
   \   0000005E   0xD03A             BEQ.N    ??swuart_isr_rx_4
   \   00000060   0x280B             CMP      R0,#+11
   \   00000062   0xD038             BEQ.N    ??swuart_isr_rx_4
   \   00000064   0x280D             CMP      R0,#+13
   \   00000066   0xD036             BEQ.N    ??swuart_isr_rx_4
   \   00000068   0x280F             CMP      R0,#+15
   \   0000006A   0xD034             BEQ.N    ??swuart_isr_rx_4
   \   0000006C   0x2811             CMP      R0,#+17
   \   0000006E   0xD032             BEQ.N    ??swuart_isr_rx_4
   \   00000070   0x2813             CMP      R0,#+19
   \   00000072   0xD043             BEQ.N    ??swuart_isr_rx_5
   \   00000074   0xE06D             B.N      ??swuart_isr_rx_6
    153            {
    154              case 0:
    155                TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_Timing;
   \                     ??swuart_isr_rx_2: (+1)
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x....             LDR.N    R1,??DataTable5_12
   \   0000007A   0x8008             STRH     R0,[R1, #+0]
    156                TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Disable;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x....             LDR.N    R1,??DataTable5_12
   \   00000080   0x8048             STRH     R0,[R1, #+2]
    157                TIM_OCInitStruct.TIM_OutputNState = TIM_OutputNState_Disable;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x....             LDR.N    R1,??DataTable5_12
   \   00000086   0x8088             STRH     R0,[R1, #+4]
    158                TIM_OCInitStruct.TIM_Pulse = TIM4->CCR4;
   \   00000088   0x....             LDR.N    R0,??DataTable5_13  ;; 0x40000840
   \   0000008A   0x8800             LDRH     R0,[R0, #+0]
   \   0000008C   0x....             LDR.N    R1,??DataTable5_12
   \   0000008E   0x80C8             STRH     R0,[R1, #+6]
    159                TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x....             LDR.N    R1,??DataTable5_12
   \   00000094   0x8108             STRH     R0,[R1, #+8]
    160                TIM_OCInitStruct.TIM_OCNPolarity = TIM_OCPolarity_High;
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x....             LDR.N    R1,??DataTable5_12
   \   0000009A   0x8148             STRH     R0,[R1, #+10]
    161                TIM_OCInitStruct.TIM_OCIdleState = TIM_OCIdleState_Reset;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x....             LDR.N    R1,??DataTable5_12
   \   000000A0   0x8188             STRH     R0,[R1, #+12]
    162                TIM_OCInitStruct.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x....             LDR.N    R1,??DataTable5_12
   \   000000A6   0x81C8             STRH     R0,[R1, #+14]
    163                TIM_OC4Init(TIM4, &TIM_OCInitStruct);
   \   000000A8   0x....             LDR.N    R1,??DataTable5_12
   \   000000AA   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40000800
   \   000000AC   0x.... 0x....      BL       TIM_OC4Init
    164                st++;
   \   000000B0   0x....             LDR.N    R0,??DataTable5_11
   \   000000B2   0x7800             LDRB     R0,[R0, #+0]
   \   000000B4   0x1C40             ADDS     R0,R0,#+1
   \   000000B6   0x....             LDR.N    R1,??DataTable5_11
   \   000000B8   0x7008             STRB     R0,[R1, #+0]
    165                return;
   \   000000BA   0xE075             B.N      ??swuart_isr_rx_7
    166                
    167              case 1:
    168                if ( !bit )
   \                     ??swuart_isr_rx_3: (+1)
   \   000000BC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BE   0x2C00             CMP      R4,#+0
   \   000000C0   0xD106             BNE.N    ??swuart_isr_rx_8
    169                {//start bit
    170                  b = 0;
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x....             LDR.N    R1,??DataTable5_10
   \   000000C6   0x7008             STRB     R0,[R1, #+0]
    171                  bit_no = 0;        
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x....             LDR.N    R1,??DataTable5_14
   \   000000CC   0x7008             STRB     R0,[R1, #+0]
   \   000000CE   0xE001             B.N      ??swuart_isr_rx_9
    172                }
    173                else
    174                {//framimg error, no start bit
    175                  framing_err = 1;
   \                     ??swuart_isr_rx_8: (+1)
   \   000000D0   0x2001             MOVS     R0,#+1
   \   000000D2   0x4680             MOV      R8,R0
    176                }
    177                break;
   \                     ??swuart_isr_rx_9: (+1)
   \   000000D4   0xE03D             B.N      ??swuart_isr_rx_6
    178            
    179              case 3 + 0:
    180              case 3 + 2:
    181              case 3 + 4:
    182              case 3 + 6:
    183              case 3 + 8:
    184              case 3 + 10:
    185              case 3 + 12:
    186              case 3 + 14:      
    187                if ( bit )
   \                     ??swuart_isr_rx_4: (+1)
   \   000000D6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D8   0x2C00             CMP      R4,#+0
   \   000000DA   0xD009             BEQ.N    ??swuart_isr_rx_10
    188                {
    189                  b |= ( 1 << bit_no );
   \   000000DC   0x....             LDR.N    R0,??DataTable5_10
   \   000000DE   0x7800             LDRB     R0,[R0, #+0]
   \   000000E0   0x2101             MOVS     R1,#+1
   \   000000E2   0x....             LDR.N    R2,??DataTable5_14
   \   000000E4   0xF992 0x2000      LDRSB    R2,[R2, #+0]
   \   000000E8   0x4091             LSLS     R1,R1,R2
   \   000000EA   0x4308             ORRS     R0,R1,R0
   \   000000EC   0x....             LDR.N    R1,??DataTable5_10
   \   000000EE   0x7008             STRB     R0,[R1, #+0]
    190                }
    191                bit_no++;
   \                     ??swuart_isr_rx_10: (+1)
   \   000000F0   0x....             LDR.N    R0,??DataTable5_14
   \   000000F2   0x7800             LDRB     R0,[R0, #+0]
   \   000000F4   0x1C40             ADDS     R0,R0,#+1
   \   000000F6   0x....             LDR.N    R1,??DataTable5_14
   \   000000F8   0x7008             STRB     R0,[R1, #+0]
    192                break;
   \   000000FA   0xE02A             B.N      ??swuart_isr_rx_6
    193                
    194              case 3 + 16:
    195                if ( bit )
   \                     ??swuart_isr_rx_5: (+1)
   \   000000FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FE   0x2C00             CMP      R4,#+0
   \   00000100   0xD025             BEQ.N    ??swuart_isr_rx_11
    196                {
    197                  if ( sw_uart.rx.size < sizeof(sw_uart.rx.buf)-1)
   \   00000102   0x....             LDR.N    R0,??DataTable5
   \   00000104   0xF890 0x0024      LDRB     R0,[R0, #+36]
   \   00000108   0x281F             CMP      R0,#+31
   \   0000010A   0xD21D             BCS.N    ??swuart_isr_rx_12
    198                  {
    199                    sw_uart.rx.buf[ sw_uart.rx.size++ ] = b;       
   \   0000010C   0x....             LDR.N    R0,??DataTable5_10
   \   0000010E   0x7800             LDRB     R0,[R0, #+0]
   \   00000110   0x....             LDR.N    R1,??DataTable5
   \   00000112   0x....             LDR.N    R2,??DataTable5
   \   00000114   0xF892 0x2024      LDRB     R2,[R2, #+36]
   \   00000118   0x1851             ADDS     R1,R2,R1
   \   0000011A   0xF881 0x0025      STRB     R0,[R1, #+37]
   \   0000011E   0x....             LDR.N    R0,??DataTable5
   \   00000120   0xF890 0x0024      LDRB     R0,[R0, #+36]
   \   00000124   0x1C40             ADDS     R0,R0,#+1
   \   00000126   0x....             LDR.N    R1,??DataTable5
   \   00000128   0xF881 0x0024      STRB     R0,[R1, #+36]
    200                    if ( b == sw_uart.rx.mes && sw_uart.rx.handler )
   \   0000012C   0x....             LDR.N    R0,??DataTable5_10
   \   0000012E   0x7800             LDRB     R0,[R0, #+0]
   \   00000130   0x....             LDR.N    R1,??DataTable5
   \   00000132   0xF891 0x1045      LDRB     R1,[R1, #+69]
   \   00000136   0x4288             CMP      R0,R1
   \   00000138   0xD106             BNE.N    ??swuart_isr_rx_12
   \   0000013A   0x....             LDR.N    R0,??DataTable5
   \   0000013C   0x6C80             LDR      R0,[R0, #+72]
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xD002             BEQ.N    ??swuart_isr_rx_12
    201                    {
    202                      sw_uart.rx.handler();
   \   00000142   0x....             LDR.N    R0,??DataTable5
   \   00000144   0x6C80             LDR      R0,[R0, #+72]
   \   00000146   0x4780             BLX      R0
    203                    }
    204                  }
    205                  done = 1;
   \                     ??swuart_isr_rx_12: (+1)
   \   00000148   0x2001             MOVS     R0,#+1
   \   0000014A   0x0007             MOVS     R7,R0
   \   0000014C   0xE001             B.N      ??swuart_isr_rx_13
    206                }
    207                else
    208                {
    209                  framing_err = 1;
   \                     ??swuart_isr_rx_11: (+1)
   \   0000014E   0x2001             MOVS     R0,#+1
   \   00000150   0x4680             MOV      R8,R0
    210                }
    211                break;
    212                      
    213            }
    214          
    215            if ( done || framing_err )
   \                     ??swuart_isr_rx_13: (+1)
   \                     ??swuart_isr_rx_6: (+1)
   \   00000152   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000154   0x2F00             CMP      R7,#+0
   \   00000156   0xD104             BNE.N    ??swuart_isr_rx_14
   \   00000158   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000015C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000160   0xD015             BEQ.N    ??swuart_isr_rx_15
    216            {
    217                st = 0;
   \                     ??swuart_isr_rx_14: (+1)
   \   00000162   0x2000             MOVS     R0,#+0
   \   00000164   0x....             LDR.N    R1,??DataTable5_11
   \   00000166   0x7008             STRB     R0,[R1, #+0]
    218                TIM_ICInitStruct.TIM_Channel = TIM_Channel_4;
   \   00000168   0x200C             MOVS     R0,#+12
   \   0000016A   0x....             LDR.N    R1,??DataTable5_5
   \   0000016C   0x8008             STRH     R0,[R1, #+0]
    219                TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Falling;
   \   0000016E   0x2002             MOVS     R0,#+2
   \   00000170   0x....             LDR.N    R1,??DataTable5_5
   \   00000172   0x8048             STRH     R0,[R1, #+2]
    220                TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
   \   00000174   0x2001             MOVS     R0,#+1
   \   00000176   0x....             LDR.N    R1,??DataTable5_5
   \   00000178   0x8088             STRH     R0,[R1, #+4]
    221                TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \   0000017A   0x2000             MOVS     R0,#+0
   \   0000017C   0x....             LDR.N    R1,??DataTable5_5
   \   0000017E   0x80C8             STRH     R0,[R1, #+6]
    222                TIM_ICInitStruct.TIM_ICFilter = 0;
   \   00000180   0x2000             MOVS     R0,#+0
   \   00000182   0x....             LDR.N    R1,??DataTable5_5
   \   00000184   0x8108             STRH     R0,[R1, #+8]
    223                TIM_ICInit(TIM4, &TIM_ICInitStruct);                  
   \   00000186   0x....             LDR.N    R1,??DataTable5_5
   \   00000188   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40000800
   \   0000018A   0x.... 0x....      BL       TIM_ICInit
    224            }
    225              
    226            if ( st > 0 && st < 100 )
   \                     ??swuart_isr_rx_15: (+1)
   \   0000018E   0x....             LDR.N    R0,??DataTable5_11
   \   00000190   0x7800             LDRB     R0,[R0, #+0]
   \   00000192   0x2800             CMP      R0,#+0
   \   00000194   0xD008             BEQ.N    ??swuart_isr_rx_16
   \   00000196   0x....             LDR.N    R0,??DataTable5_11
   \   00000198   0x7800             LDRB     R0,[R0, #+0]
   \   0000019A   0x2864             CMP      R0,#+100
   \   0000019C   0xDA04             BGE.N    ??swuart_isr_rx_16
    227            {
    228              st++;
   \   0000019E   0x....             LDR.N    R0,??DataTable5_11
   \   000001A0   0x7800             LDRB     R0,[R0, #+0]
   \   000001A2   0x1C40             ADDS     R0,R0,#+1
   \   000001A4   0x....             LDR.N    R1,??DataTable5_11
   \   000001A6   0x7008             STRB     R0,[R1, #+0]
    229            }
    230          }
   \                     ??swuart_isr_rx_16: (+1)
   \                     ??swuart_isr_rx_7: (+1)
   \   000001A8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .bss, align 1
   \                     ??st_1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??b_1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??bit_no_1:
   \   00000000                      DS8 1
    231          

   \                                 In section .text, align 2, keep-with-next
    232          __irq void TIM4_IRQHandler(void) 
    233          {
   \                     TIM4_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    234            //OS_EnterNestableInterrupt();
    235            if ( TIM_GetITStatus(TIM4, TIM_IT_Update ) )
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40000800
   \   00000006   0x.... 0x....      BL       TIM_GetITStatus
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD005             BEQ.N    ??TIM4_IRQHandler_0
    236            {
    237              TIM_ClearITPendingBit(TIM4, TIM_IT_Update);    
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40000800
   \   00000012   0x.... 0x....      BL       TIM_ClearITPendingBit
    238              swuart_isr_tx();      
   \   00000016   0x.... 0x....      BL       swuart_isr_tx
    239            }
    240            if ( TIM_GetITStatus(TIM4, TIM_IT_CC4 ) )
   \                     ??TIM4_IRQHandler_0: (+1)
   \   0000001A   0x2110             MOVS     R1,#+16
   \   0000001C   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40000800
   \   0000001E   0x.... 0x....      BL       TIM_GetITStatus
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD005             BEQ.N    ??TIM4_IRQHandler_1
    241            {
    242              TIM_ClearITPendingBit(TIM4, TIM_IT_CC4 );    
   \   00000026   0x2110             MOVS     R1,#+16
   \   00000028   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40000800
   \   0000002A   0x.... 0x....      BL       TIM_ClearITPendingBit
    243              swuart_isr_rx();      
   \   0000002E   0x.... 0x....      BL       swuart_isr_rx
    244            }              
    245            //OS_LeaveNestableInterrupt();
    246          }
   \                     ??TIM4_IRQHandler_1: (+1)
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
    247          

   \                                 In section .text, align 2, keep-with-next
    248          void sw_uart_reset_buffers()
    249          {
   \                     sw_uart_reset_buffers: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    250            sw_uart.rx.size = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable5
   \   00000008   0xF881 0x0024      STRB     R0,[R1, #+36]
    251            memset( sw_uart.rx.buf, 0, sizeof(sw_uart.rx.buf));
   \   0000000C   0x2420             MOVS     R4,#+32
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0x....             LDR.N    R6,??DataTable5_15
   \   00000012   0x002A             MOVS     R2,R5
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x0030             MOVS     R0,R6
   \   00000018   0x.... 0x....      BL       __aeabi_memset
    252            sw_uart.tx.size = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR.N    R1,??DataTable5
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    253            memset( sw_uart.tx.buf, 0, sizeof(sw_uart.tx.buf));  
   \   00000022   0x2620             MOVS     R6,#+32
   \   00000024   0x2700             MOVS     R7,#+0
   \   00000026   0x.... 0x....      LDR.W    R8,??DataTable5_6
   \   0000002A   0x003A             MOVS     R2,R7
   \   0000002C   0x0031             MOVS     R1,R6
   \   0000002E   0x4640             MOV      R0,R8
   \   00000030   0x.... 0x....      BL       __aeabi_memset
    254          }
   \   00000034   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     sw_uart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     GPIO_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     TIM_TimeBaseInitStruct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     TIM_ICInitStruct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     sw_uart+0x2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ??st

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     ??b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     ??bit_no

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     ??b_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     ??st_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     TIM_OCInitStruct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x40000840         DC32     0x40000840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     ??bit_no_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     sw_uart+0x25

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TIM4_IRQHandler
         8   -> TIM_ClearITPendingBit
         8   -> TIM_GetITStatus
         8   -> swuart_isr_rx
         8   -> swuart_isr_tx
       8   sw_uart_init
         8   -> GPIO_Init
         8   -> GPIO_SetBits
         8   -> OS_ARM_EnableISR
         8   -> RCC_APB1PeriphClockCmd
         8   -> TIM_Cmd
         8   -> TIM_ICInit
         8   -> TIM_ITConfig
         8   -> TIM_TimeBaseInit
      24   sw_uart_reset_buffers
        24   -> __aeabi_memset
      16   sw_uart_tx
        16   -> __aeabi_memcpy
      24   swuart_isr_rx
        24   -- Indirect call
        24   -> GPIO_ReadInputDataBit
        24   -> TIM_ICInit
        24   -> TIM_OC4Init
       8   swuart_isr_tx
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      52  TIM4_IRQHandler
      12  TIM_ICInitStruct
      16  TIM_OCInitStruct
      12  TIM_TimeBaseInitStruct
       1  b
       1  b
       1  bit_no
       1  bit_no
       1  pin8
       1  st
       1  st
      76  sw_uart
     244  sw_uart_init
      56  sw_uart_reset_buffers
      36  sw_uart_tx
     428  swuart_isr_rx
     236  swuart_isr_tx

 
   123 bytes in section .bss
 1 116 bytes in section .text
 
 1 116 bytes of CODE memory
   123 bytes of DATA memory

Errors: none
Warnings: none

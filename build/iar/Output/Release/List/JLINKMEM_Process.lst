###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       12/Sep/2016  16:26:12
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ilya\vendicont\arm-periphery\rtos\embos\iar\setup\JLINKMEM_Process.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\rtos\embos\iar\setup\JLINKMEM_Process.c
#        -D STM32F10X_HD -D USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\JLINKMEM_Process.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\JLINKMEM_Process.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\rtos\embos\iar\setup\JLINKMEM_Process.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER GmbH & Co KG                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2014  SEGGER Microcontroller GmbH & Co KG         *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       OS version: 4.02a                                            *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : JLINKMEM_Process.c
     31          Purpose : Data handler for ARM J-Link communication over memory
     32          
     33          Layout of communication area:
     34          
     35            +----------+  TOS - TX_SIZE - RX_SIZE - 6
     36            |          |
     37            | RX_BUF   |
     38            |          |
     39            +----------+  TOS - TX_SIZE - 6
     40            | RX_CNT   |
     41            +----------+  TOS - TX_SIZE - 5
     42            | HOST_ACT |
     43            +----------+  TOS - TX_SIZE - 4
     44            | TX_CNT   |
     45            +----------+  TOS - TX_SIZE - 3
     46            |          |
     47            | TX_BUF   |
     48            |          |
     49            +----------+  TOS - 3
     50            | TX_SIZE  |
     51            +----------+  TOS - 2
     52            | RX_SIZE  |
     53            +----------+  TOS - 1
     54            | PROT_ID  |
     55            +----------+  TOS
     56          
     57          TOS       Initial top of stack as defined by linker settings (top of CSTACK)
     58          PROT_ID   Magic number indicating the start of communication area
     59          RX_SIZE   Size of receiving buffer in bytes
     60          TX_SIZE   Size of sending buffer in bytes
     61          TX_BUF    Sending buffer
     62          TX_CNT    Number of bytes in sending buffer
     63          HOST_ACT  Set to oen by host to indicate it is still active
     64          RX_CNT    Number of bytes in the receiving buffer
     65          RX_BUF    Receiving buffer
     66          
     67          ---------------------------END-OF-HEADER------------------------------
     68          */
     69          
     70          #include "RTOS.h"
     71          #include "JLINKMEM.h"
     72          
     73          /*********************************************************************
     74          *
     75          *       Defines, configurable
     76          *
     77          **********************************************************************
     78          */
     79          
     80          /*********************************************************************
     81          *
     82          *       Sizes of receiving and sending buffer.
     83          *
     84          * NOTE:
     85          *   Before you change any of these values make sure OS_Start()
     86          *   reserves enough bytes for the communication area.
     87          */
     88          #define RX_BUF_SIZE   8
     89          #define TX_BUF_SIZE   18
     90          
     91          /*********************************************************************
     92          *
     93          *       Defines, non- configurable
     94          *
     95          **********************************************************************
     96          */
     97          
     98          #define U8  unsigned char
     99          #define U16 unsigned short
    100          #define U32 unsigned int
    101          
    102          #define MAGIC_NUM   0x52 /* Identifies the start of our communication area. */
    103          
    104          #define PROT_ID     (*(volatile U8 *)(_BaseAddr - 1))  /* Id of the protocol. Always set to MAGIC_NUM */
    105          #define RX_SIZE     (*(volatile U8 *)(_BaseAddr - 2))  /* Size of receiving buffer in bytes */
    106          #define TX_SIZE     (*(volatile U8 *)(_BaseAddr - 3))  /* Size of sending buffer in bytes */
    107          #define TX_CNT      (*(volatile U8 *)(_BaseAddr - TX_BUF_SIZE - 4))  /* Stores the number of bytes we send to host */
    108          /* Set by host to a non-null value when it connects to target.
    109           * The target sets this to null when it detects a communication timeout.
    110           */
    111          
    112          #define HOST_CON    (*(volatile U8 *)(_BaseAddr - TX_BUF_SIZE - 5))
    113          #define RX_CNT      (*(volatile U8 *)(_BaseAddr - TX_BUF_SIZE - 6)) /* Stores the number of bytes the host sent to us */
    114          
    115          #define TX_TIMEOUT  1000 /* Time to wait for host to fetch the data from sending buffer (in ms) */
    116          
    117          #define VTOR_ADDR   (*(volatile OS_U32*) (0xE000ED08)) /* Vector table base register address */
    118          
    119          /*********************************************************************
    120          *
    121          *       Static data
    122          *
    123          **********************************************************************
    124          */
    125          
    126          /* Pointer to user callbacks */

   \                                 In section .bss, align 4
    127          void (* _pfOnRx) (U8 Data);
    128          void (* _pfOnTx) (void);
    129          OS_INT (* _pfGetNextChar) (void);
    130          
    131          static U32  _BaseAddr;
    132          static int  _TxIsPending;    /* Set when there is a character waiting to be sent */
    133          static U8   _TxPendingData;  /* Holds tha character waiting to be sent */
   \                     _TxPendingData:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     _pfOnRx:
   \   00000004                      DS8 4
   \                     _pfOnTx:
   \   00000008                      DS8 4
   \                     _pfGetNextChar:
   \   0000000C                      DS8 4
   \   00000010                      DS8 4
   \   00000014                      DS8 4
   \   00000018                      DS8 4
   \   0000001C                      DS8 4
   \   00000020                      DS8 4
   \   00000024                      DS8 4
   \   00000028                      DS8 4
   \   0000002C                      DS8 4
    134          static int  _IsInited;       /* Set when the communication is initialised */
    135          static U8*  _pRxBuf;         /* Start of receiving buffer */
    136          static U8*  _pTxBuf;         /* Start of sending buffer */
    137          
    138          /* Supervises the connection to host */
    139          static int  _TxTimeout;      /* Set when the host fails to fetch our data */
    140          static int  _TxTimeoutTimer;
    141          static int  _TxBufLocked;    /* Serialises the access to our sending buffer */
    142          
    143          /*********************************************************************
    144          *
    145          *       Static code
    146          *
    147          **********************************************************************
    148          */
    149          
    150          /*********************************************************************
    151          *
    152          *       _RetriggerTimer
    153          *
    154          * Function description
    155          */
    156          static void _RetriggerTimer(void) {
    157            _TxTimeoutTimer = TX_TIMEOUT;
    158          }
    159          
    160          /*********************************************************************
    161          *
    162          *       _HandleTxTimeout
    163          *
    164          * Function description
    165          *   Sets the connection to host to inactive when the host fails to
    166          *   fetch the data we send to it. Called when the send timeout
    167          *   expires.
    168          */
    169          static void _StopTimer(void) {
    170            _TxTimeoutTimer = 0;
    171          }
    172          
    173          /*********************************************************************
    174          *
    175          *       _Init
    176          *
    177          * Function description
    178          *   Performs initalisation of memory locations used for communication.
    179          */

   \                                 In section .text, align 2, keep-with-next
    180          static void _Init(void) {
    181            OS_U32 VectorTableBaseAddr;
    182            /* On Cortex-M initial top of stack is stored at address defined by VTOR */
    183            VectorTableBaseAddr  = VTOR_ADDR;
   \                     _Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6  ;; 0xe000ed08
    184            VectorTableBaseAddr &= ~(0x3FuL);  // Mask b6..b0 as those might not be zero ARM DDI 0403D chapter B3.2.5 page B3-716
    185            _BaseAddr = (*(OS_U32*)VectorTableBaseAddr);
   \   00000002   0x....             LDR.N    R1,??DataTable6_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0980             LSRS     R0,R0,#+6
   \   00000008   0x0180             LSLS     R0,R0,#+6
    186            HOST_CON  = 0;
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x6108             STR      R0,[R1, #+16]
   \   00000010   0xF800 0x2C17      STRB     R2,[R0, #-23]
    187            RX_SIZE   = RX_BUF_SIZE;
   \   00000014   0x2208             MOVS     R2,#+8
   \   00000016   0xF800 0x2C02      STRB     R2,[R0, #-2]
    188            TX_SIZE   = TX_BUF_SIZE;
   \   0000001A   0x2212             MOVS     R2,#+18
   \   0000001C   0xF800 0x2C03      STRB     R2,[R0, #-3]
    189            RX_CNT    = 0;
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0xF800 0x2C18      STRB     R2,[R0, #-24]
    190            TX_CNT    = 0;
   \   00000026   0xF800 0x2C16      STRB     R2,[R0, #-22]
    191            PROT_ID   = MAGIC_NUM;
   \   0000002A   0x2252             MOVS     R2,#+82
   \   0000002C   0xF800 0x2C01      STRB     R2,[R0, #-1]
    192            _pTxBuf   = (U8 *)(_BaseAddr - TX_BUF_SIZE - 3);
   \   00000030   0xF1A0 0x0215      SUB      R2,R0,#+21
    193            _pRxBuf   = (U8 *)(_BaseAddr - TX_BUF_SIZE - RX_BUF_SIZE - 6);
   \   00000034   0x3820             SUBS     R0,R0,#+32
   \   00000036   0x61C8             STR      R0,[R1, #+28]
   \   00000038   0x620A             STR      R2,[R1, #+32]
    194            _TxIsPending = 0;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x6148             STR      R0,[R1, #+20]
    195          }
   \   0000003E   0x4770             BX       LR               ;; return
    196          
    197          /*********************************************************************
    198          *
    199          *       _LockTxBuf
    200          *
    201          * Function description
    202          *   Gains exclusive access to sending buffer.
    203          *
    204          * Return value
    205          *   1   Sending buffer locked
    206          *   0   Sending buffer couldn't be locked as already in use.
    207          */
    208          static int _LockTxBuf(void) {
    209            int Locked = 0;
    210          
    211            OS_DI();
    212            if (!_TxBufLocked) {
    213              _TxBufLocked = 1;
    214              Locked = 1;
    215            }
    216            OS_RestoreI();
    217            return Locked;
    218          }
    219          
    220          /*********************************************************************
    221          *
    222          *       _UnlockTxBuf
    223          *
    224          * Function description
    225          *   Releases the exclusive access to sending buffer.
    226          */
    227          static void _UnlockTxBuf(void) {
    228            _TxBufLocked = 0;
    229          }
    230          
    231          /*********************************************************************
    232          *
    233          *       _Receive
    234          *
    235          *  Function description
    236          *    Performs Command / data read from host
    237          */
    238          static void _Receive(void) {
    239            int i;
    240            U8 *pBuf;
    241          
    242            if (RX_CNT > 0) {    /* Data received ? */
    243              if (_pfOnRx != NULL) {
    244                pBuf = _pRxBuf + (RX_BUF_SIZE - RX_CNT);
    245                for (i = 0; i < RX_CNT; ++i) {
    246                  _pfOnRx(*pBuf);
    247                  ++pBuf;
    248                }
    249              }
    250              RX_CNT = 0;
    251            }
    252          }
    253          
    254          /*********************************************************************
    255          *
    256          *       _FillTxBuf
    257          *
    258          *  Function description
    259          *    Stores bytes in the sending buffer.
    260          */

   \                                 In section .text, align 2, keep-with-next
    261          static void _FillTxBuf(U8 Data) {
   \                     _FillTxBuf: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    262            int Cnt = 0;
    263            OS_INT Byte;
    264            U8 *pBuf;
    265          
    266            pBuf = _pTxBuf;
   \   00000002   0x....             LDR.N    R4,??DataTable6_1
   \   00000004   0x6A25             LDR      R5,[R4, #+32]
    267            *pBuf = Data;
   \   00000006   0xF805 0x0B01      STRB     R0,[R5], #+1
    268            ++pBuf;
    269            ++Cnt;
   \   0000000A   0x2601             MOVS     R6,#+1
    270            if (_pfGetNextChar != NULL) {
   \   0000000C   0x68E0             LDR      R0,[R4, #+12]
   \   0000000E   0xB140             CBZ.N    R0,??_FillTxBuf_0
    271              /* Get more bytes from the communication state machine
    272               * until the sending buffer is full.
    273               */
    274              while (1) {
    275                if (Cnt >= TX_BUF_SIZE) {
    276                  break;
    277                }
    278                Byte = _pfGetNextChar();
   \                     ??_FillTxBuf_1: (+1)
   \   00000010   0x68E0             LDR      R0,[R4, #+12]
   \   00000012   0x4780             BLX      R0
    279                if (Byte < 0) {
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD404             BMI.N    ??_FillTxBuf_0
    280                  break;
    281                }
    282                *pBuf = (U8)Byte;
    283                ++pBuf;
    284                ++Cnt;
   \   00000018   0x1C76             ADDS     R6,R6,#+1
   \   0000001A   0x2E12             CMP      R6,#+18
   \   0000001C   0xF805 0x0B01      STRB     R0,[R5], #+1
   \   00000020   0xDBF6             BLT.N    ??_FillTxBuf_1
    285              }
    286            }
    287            OS_DI();
   \                     ??_FillTxBuf_0: (+1)
   \   00000022   0x2080             MOVS     R0,#+128
   \   00000024   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000028   0xBF00             Nop      
   \   0000002A   0xBF00             Nop      
    288            _RetriggerTimer();
   \   0000002C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000030   0x62A0             STR      R0,[R4, #+40]
    289            TX_CNT = (U8)Cnt;
   \   00000032   0x6920             LDR      R0,[R4, #+16]
   \   00000034   0xF800 0x6C16      STRB     R6,[R0, #-22]
    290            OS_RestoreI();
   \   00000038   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000003C   0x.... 0x....      B.W      OS_RestoreI
    291          }
    292          
    293          /*********************************************************************
    294          *
    295          *       _DropTxData
    296          *
    297          *  Function description
    298          *    Empties the sending buffer of embOS.
    299          */
    300          static void _DropTxData(void) {
    301            if (_pfGetNextChar != NULL) {
    302              while (_pfGetNextChar() >= 0) {
    303                ;
    304              }
    305            }
    306          }
    307          
    308          /*********************************************************************
    309          *
    310          *       _Send
    311          *
    312          *  Function description
    313          *    Sends data back to host if embOSView is ready to receive data.
    314          */
    315          static void _Send(void) {
    316            if (TX_CNT == 0) {        /* Can we send data? */
    317              _StopTimer();
    318              if (_TxIsPending) {
    319                _FillTxBuf(_TxPendingData);
    320                _TxIsPending = 0;
    321              } else {
    322                if (_pfOnTx != NULL) {
    323                  if (_LockTxBuf()) {
    324                    _pfOnTx();
    325                    _UnlockTxBuf();
    326                  }
    327                }
    328              }
    329            }
    330          }
    331          
    332          /*********************************************************************
    333          *
    334          *       Public code
    335          *
    336          **********************************************************************
    337          */
    338          
    339          /*********************************************************************
    340          *
    341          *       JLINKMEM_Process
    342          *
    343          *  Function description
    344          *    This function should be called more or less regularily to allow
    345          *    memory reads while the application progam is running.
    346          *    The more often it is called, the higher the transfer speed.
    347          */

   \                                 In section .text, align 4, keep-with-next
    348          void JLINKMEM_Process(void) {
    349            if (OS_IsRunning()) {         /* No communication until the embOS starts */
   \                     JLINKMEM_Process: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB900             CBNZ.N   R0,??JLINKMEM_Process_0
   \   00000006   0x4770             BX       LR
    350              if (!_IsInited) {
   \                     ??JLINKMEM_Process_0: (+1)
   \   00000008   0xB570             PUSH     {R4-R6,LR}
   \   0000000A   0x....             LDR.N    R4,??DataTable6_1
   \   0000000C   0x69A0             LDR      R0,[R4, #+24]
   \   0000000E   0xB918             CBNZ.N   R0,??JLINKMEM_Process_1
    351                _Init();
   \   00000010   0x.... 0x....      BL       _Init
    352                _IsInited = 1;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x61A0             STR      R0,[R4, #+24]
    353              }
    354              if (HOST_CON) {             /* Do nothing until the host connects to us */
   \                     ??JLINKMEM_Process_1: (+1)
   \   00000018   0x6920             LDR      R0,[R4, #+16]
   \   0000001A   0xF1A0 0x0117      SUB      R1,R0,#+23
   \   0000001E   0x780A             LDRB     R2,[R1, #+0]
   \   00000020   0x2A00             CMP      R2,#+0
   \   00000022   0xD050             BEQ.N    ??JLINKMEM_Process_2
    355                //
    356                // Handle Timeout timer
    357                //
    358                if (_TxTimeoutTimer != 0) {
   \   00000024   0x6AA2             LDR      R2,[R4, #+40]
   \   00000026   0xB112             CBZ.N    R2,??JLINKMEM_Process_3
    359                  _TxTimeoutTimer--;
   \   00000028   0x1E52             SUBS     R2,R2,#+1
   \   0000002A   0x62A2             STR      R2,[R4, #+40]
    360                  if (_TxTimeoutTimer == 0) {
   \   0000002C   0xD001             BEQ.N    ??JLINKMEM_Process_4
    361                    _TxTimeout = 1;
    362                  }
    363                }
    364          
    365                if (_TxTimeout) {
   \                     ??JLINKMEM_Process_3: (+1)
   \   0000002E   0x6A62             LDR      R2,[R4, #+36]
   \   00000030   0xB172             CBZ.N    R2,??JLINKMEM_Process_5
    366                  HOST_CON = 0;
   \                     ??JLINKMEM_Process_4: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    367                  _TxTimeout = 0;
   \   00000036   0x6260             STR      R0,[R4, #+36]
    368                  _TxIsPending = 0;
   \   00000038   0x6160             STR      R0,[R4, #+20]
    369                  _DropTxData();
   \   0000003A   0x68E0             LDR      R0,[R4, #+12]
   \   0000003C   0xB118             CBZ.N    R0,??JLINKMEM_Process_6
   \                     ??JLINKMEM_Process_7: (+1)
   \   0000003E   0x68E0             LDR      R0,[R4, #+12]
   \   00000040   0x4780             BLX      R0
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD5FB             BPL.N    ??JLINKMEM_Process_7
    370                  RX_CNT = 0;               /* Drop all bytes form receiving buffer. */
   \                     ??JLINKMEM_Process_6: (+1)
   \   00000046   0x6921             LDR      R1,[R4, #+16]
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF801 0x0C18      STRB     R0,[R1, #-24]
   \   0000004E   0xBD70             POP      {R4-R6,PC}
    371                } else {
    372                  _Receive();
   \                     ??JLINKMEM_Process_5: (+1)
   \   00000050   0xF810 0x1D18      LDRB     R1,[R0, #-24]!
   \   00000054   0xB1B1             CBZ.N    R1,??JLINKMEM_Process_8
   \   00000056   0x6861             LDR      R1,[R4, #+4]
   \   00000058   0xB181             CBZ.N    R1,??JLINKMEM_Process_9
   \   0000005A   0x69E1             LDR      R1,[R4, #+28]
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x1A08             SUBS     R0,R1,R0
   \   00000060   0xF100 0x0508      ADD      R5,R0,#+8
   \   00000064   0x2600             MOVS     R6,#+0
   \   00000066   0xE004             B.N      ??JLINKMEM_Process_10
   \                     ??JLINKMEM_Process_11: (+1)
   \   00000068   0xF815 0x0B01      LDRB     R0,[R5], #+1
   \   0000006C   0x6861             LDR      R1,[R4, #+4]
   \   0000006E   0x4788             BLX      R1
   \   00000070   0x1C76             ADDS     R6,R6,#+1
   \                     ??JLINKMEM_Process_10: (+1)
   \   00000072   0x6920             LDR      R0,[R4, #+16]
   \   00000074   0xF810 0x0C18      LDRB     R0,[R0, #-24]
   \   00000078   0x4286             CMP      R6,R0
   \   0000007A   0xDBF5             BLT.N    ??JLINKMEM_Process_11
   \                     ??JLINKMEM_Process_9: (+1)
   \   0000007C   0x6921             LDR      R1,[R4, #+16]
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xF801 0x0C18      STRB     R0,[R1, #-24]
    373                  _Send();
   \                     ??JLINKMEM_Process_8: (+1)
   \   00000084   0x6920             LDR      R0,[R4, #+16]
   \   00000086   0xF810 0x0C16      LDRB     R0,[R0, #-22]
   \   0000008A   0xB9E0             CBNZ.N   R0,??JLINKMEM_Process_2
   \   0000008C   0x62A0             STR      R0,[R4, #+40]
   \   0000008E   0x6960             LDR      R0,[R4, #+20]
   \   00000090   0xB128             CBZ.N    R0,??JLINKMEM_Process_12
   \   00000092   0x7820             LDRB     R0,[R4, #+0]
   \   00000094   0x.... 0x....      BL       _FillTxBuf
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x6160             STR      R0,[R4, #+20]
   \   0000009C   0xBD70             POP      {R4-R6,PC}
   \                     ??JLINKMEM_Process_12: (+1)
   \   0000009E   0x68A0             LDR      R0,[R4, #+8]
   \   000000A0   0xB188             CBZ.N    R0,??JLINKMEM_Process_2
   \   000000A2   0x2500             MOVS     R5,#+0
   \   000000A4   0x2080             MOVS     R0,#+128
   \   000000A6   0xF380 0x8811      MSR      BASEPRI,R0
   \   000000AA   0xBF00             Nop      
   \   000000AC   0xBF00             Nop      
   \   000000AE   0x6AE0             LDR      R0,[R4, #+44]
   \   000000B0   0xB910             CBNZ.N   R0,??JLINKMEM_Process_13
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x62E0             STR      R0,[R4, #+44]
   \   000000B6   0x2501             MOVS     R5,#+1
   \                     ??JLINKMEM_Process_13: (+1)
   \   000000B8   0x.... 0x....      BL       OS_RestoreI
   \   000000BC   0xB11D             CBZ.N    R5,??JLINKMEM_Process_2
   \   000000BE   0x68A0             LDR      R0,[R4, #+8]
   \   000000C0   0x4780             BLX      R0
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x62E0             STR      R0,[R4, #+44]
    374                }
    375              }
    376            }
    377          }
   \                     ??JLINKMEM_Process_2: (+1)
   \   000000C6   0xBD70             POP      {R4-R6,PC}       ;; return
    378          
    379          /*********************************************************************
    380          *
    381          *       JLINKMEM_SendChar
    382          *
    383          *  Function description
    384          *    Send data to the host. This function is non-blocking.
    385          *    If data can not be send it is stored in a buffer
    386          *    and sent later, when the handler is called.
    387          */

   \                                 In section .text, align 2, keep-with-next
    388          void JLINKMEM_SendChar(U8 Data) {
   \                     JLINKMEM_SendChar: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    389            if (OS_IsRunning()) {         /* No communication until the embOS starts */
   \   00000004   0x....             LDR.N    R0,??DataTable6_2
   \   00000006   0x....             LDR.N    R5,??DataTable6_1
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0xB320             CBZ.N    R0,??JLINKMEM_SendChar_0
    390              if (!_IsInited) {
   \   0000000C   0x69A8             LDR      R0,[R5, #+24]
   \   0000000E   0xB918             CBNZ.N   R0,??JLINKMEM_SendChar_1
    391                _Init();
   \   00000010   0x.... 0x....      BL       _Init
    392                _IsInited = 1;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x61A8             STR      R0,[R5, #+24]
    393              }
    394              if (HOST_CON) {             /* Do nothing until embOSView connects to us */
   \                     ??JLINKMEM_SendChar_1: (+1)
   \   00000018   0x6928             LDR      R0,[R5, #+16]
   \   0000001A   0xF810 0x1C17      LDRB     R1,[R0, #-23]
   \   0000001E   0xB1D1             CBZ.N    R1,??JLINKMEM_SendChar_0
    395                if (TX_CNT == 0) {
   \   00000020   0xF810 0x0C16      LDRB     R0,[R0, #-22]
   \   00000024   0xB998             CBNZ.N   R0,??JLINKMEM_SendChar_2
    396                  if (_LockTxBuf()) {
   \   00000026   0x2600             MOVS     R6,#+0
   \   00000028   0x2080             MOVS     R0,#+128
   \   0000002A   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000002E   0xBF00             Nop      
   \   00000030   0xBF00             Nop      
   \   00000032   0x6AE8             LDR      R0,[R5, #+44]
   \   00000034   0xB910             CBNZ.N   R0,??JLINKMEM_SendChar_3
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x62E8             STR      R0,[R5, #+44]
   \   0000003A   0x2601             MOVS     R6,#+1
   \                     ??JLINKMEM_SendChar_3: (+1)
   \   0000003C   0x.... 0x....      BL       OS_RestoreI
   \   00000040   0xB12E             CBZ.N    R6,??JLINKMEM_SendChar_2
    397                    _FillTxBuf(Data);
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       _FillTxBuf
    398                    _UnlockTxBuf();
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x62E8             STR      R0,[R5, #+44]
    399                  } else {
    400                    _TxIsPending = 1;
    401                    _TxPendingData = Data;
    402                  }
    403                } else {
   \   0000004C   0xBD70             POP      {R4-R6,PC}
    404                  _TxIsPending = 1;
   \                     ??JLINKMEM_SendChar_2: (+1)
   \   0000004E   0x2001             MOVS     R0,#+1
    405                  _TxPendingData = Data;
   \   00000050   0x702C             STRB     R4,[R5, #+0]
   \   00000052   0x6168             STR      R0,[R5, #+20]
   \   00000054   0xBD70             POP      {R4-R6,PC}
    406                }
    407              } else {
    408                //
    409                // Host not connected, drop characters
    410                //
    411                _DropTxData();
    412              }
    413            } else {
    414              //
    415              // embOS not started, drop characters
    416              //
    417              _DropTxData();
   \                     ??JLINKMEM_SendChar_0: (+1)
   \   00000056   0x68E8             LDR      R0,[R5, #+12]
   \   00000058   0xB118             CBZ.N    R0,??JLINKMEM_SendChar_4
   \                     ??JLINKMEM_SendChar_5: (+1)
   \   0000005A   0x68E8             LDR      R0,[R5, #+12]
   \   0000005C   0x4780             BLX      R0
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD5FB             BPL.N    ??JLINKMEM_SendChar_5
    418            }
    419          }
   \                     ??JLINKMEM_SendChar_4: (+1)
   \   00000062   0xBD70             POP      {R4-R6,PC}       ;; return
    420          
    421          /*********************************************************************
    422          *
    423          *       JLINKMEM_SetpfOnRx
    424          */

   \                                 In section .text, align 2, keep-with-next
    425          void JLINKMEM_SetpfOnRx(void (* pf)(U8 Data)) {
    426            _pfOnRx = pf;
   \                     JLINKMEM_SetpfOnRx: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable6_1
   \   00000002   0x6048             STR      R0,[R1, #+4]
    427          }
   \   00000004   0x4770             BX       LR               ;; return
    428          
    429          /*********************************************************************
    430          *
    431          *       JLINKMEM_SetpfOnTx
    432          */

   \                                 In section .text, align 2, keep-with-next
    433          void JLINKMEM_SetpfOnTx(void (* pf)(void)) {
    434            _pfOnTx = pf;
   \                     JLINKMEM_SetpfOnTx: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable6_1
   \   00000002   0x6088             STR      R0,[R1, #+8]
    435          }
   \   00000004   0x4770             BX       LR               ;; return
    436          
    437          /*********************************************************************
    438          *
    439          *       JLINKMEM_SetpfGetNextChar
    440          */

   \                                 In section .text, align 2, keep-with-next
    441          void JLINKMEM_SetpfGetNextChar(OS_INT (* pf)(void)) {
    442            _pfGetNextChar = pf;
   \                     JLINKMEM_SetpfGetNextChar: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable6_1
   \   00000002   0x60C8             STR      R0,[R1, #+12]
    443          }
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     _TxPendingData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     OS_Running
    444          
    445          /*************************** end of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   JLINKMEM_Process
        16   -- Indirect call
        16   -> OS_RestoreI
        16   -> _FillTxBuf
        16   -> _Init
      16   JLINKMEM_SendChar
        16   -- Indirect call
        16   -> OS_RestoreI
        16   -> _FillTxBuf
        16   -> _Init
       0   JLINKMEM_SetpfGetNextChar
       0   JLINKMEM_SetpfOnRx
       0   JLINKMEM_SetpfOnTx
      16   _FillTxBuf
        16   -- Indirect call
         0   -> OS_RestoreI
       0   _Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
     200  JLINKMEM_Process
     100  JLINKMEM_SendChar
       6  JLINKMEM_SetpfGetNextChar
       6  JLINKMEM_SetpfOnRx
       6  JLINKMEM_SetpfOnTx
      64  _FillTxBuf
      64  _Init
      48  _TxPendingData
          _pfOnRx
          _pfOnTx
          _pfGetNextChar
          _BaseAddr
          _TxIsPending
          _IsInited
          _pRxBuf
          _pTxBuf
          _TxTimeout
          _TxTimeoutTimer
          _TxBufLocked

 
  48 bytes in section .bss
 458 bytes in section .text
 
 458 bytes of CODE memory
  48 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       12/Sep/2016  16:26:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\ilya\vendicont\arm-periphery\Application\Start.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\Start.c -D STM32F10X_HD -D
#        USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\Start.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\Start.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\Start.c
      1          /*********************************************************************
      2          --------- END-OF-HEADER --------------------------------------------*/
      3          #include "stm32f10x.h"
      4          #include "RTOS.h"
      5          #include "BSP.h"
      6          #include "log.h"
      7          #include "spi_slave.h"
      8          #include "flash.h"
      9          #include "vending/pt-vending.h"
     10          #include "18B20.h"
     11          
     12          /* Task stacks */

   \                                 In section .bss, align 4
     13          OS_STACKPTR int Stack1[256], Stack2[256], Stack3[256]/*, Stack4[256]*/;
   \                     Stack1:
   \   00000000                      DS8 1024
   \                     Stack2:
   \   00000400                      DS8 1024
   \                     Stack3:
   \   00000800                      DS8 1024
     14          /* Task-control-blocks */
     15          OS_TASK TCB1, TCB2, TCB3, TCB4;
   \                     TCB1:
   \   00000C00                      DS8 48
   \                     TCB2:
   \   00000C30                      DS8 48
   \                     TCB3:
   \   00000C60                      DS8 48

   \                                 In section .bss, align 4
   \                     TCB4:
   \   00000000                      DS8 48
     16          
     17          static void Task4(void) {
     18             extern float t_18b20;
     19             while (1) {
     20                float f;
     21                u16 u;
     22                OS_Delay (1000);
     23                u = readTemp();
     24                f = (float)u;
     25                f /= 16.0;
     26                //log( "t: %.1fC\r\n", f );
     27                t_18b20 = f;
     28             }
     29          }
     30          
     31          /*********************************************************************
     32          *
     33          *       main
     34          *
     35          *********************************************************************/
     36          

   \                                 In section .text, align 2, keep-with-next
     37          int main(void)
     38          {
   \                     main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
     39          	OS_IncDI();                      /* Initially disable interrupts  */
   \   00000004   0x2080             MOVS     R0,#+128
   \   00000006   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000000A   0xBF00             Nop      
   \   0000000C   0xBF00             Nop      
   \   0000000E   0x....             LDR.N    R0,??DataTable3
   \   00000010   0x....             LDR.N    R4,??DataTable3_1
   \   00000012   0x7841             LDRB     R1,[R0, #+1]
   \   00000014   0x1C49             ADDS     R1,R1,#+1
   \   00000016   0x7041             STRB     R1,[R0, #+1]
     40          	OS_InitKern();                   /* Initialize OS                 */
   \   00000018   0x.... 0x....      BL       OS_InitKern_STD
     41          	OS_InitHW();                     /* Initialize Hardware for OS    */
   \   0000001C   0x.... 0x....      BL       OS_InitHW
     42          	BSP_Init();                      /* Initialize LED ports          */
   \   00000020   0x.... 0x....      BL       BSP_Init
     43          	OS_CREATETASK(&TCB1, "Task SPI", Task_spi,  50, Stack1);
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x9002             STR      R0,[SP, #+8]
   \   00000028   0x9400             STR      R4,[SP, #+0]
   \   0000002A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000002E   0x9001             STR      R0,[SP, #+4]
   \   00000030   0x2232             MOVS     R2,#+50
   \   00000032   0x....             LDR.N    R3,??DataTable3_2
   \   00000034   0x.... 0x....      ADR.W    R1,?_0
   \   00000038   0xF504 0x6040      ADD      R0,R4,#+3072
   \   0000003C   0x.... 0x....      BL       OS_CreateTask_R
     44          	OS_CREATETASK(&TCB2, "Task Vending", Task_vending,  51, Stack2);
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x9002             STR      R0,[SP, #+8]
   \   00000044   0xF44F 0x6080      MOV      R0,#+1024
   \   00000048   0x9001             STR      R0,[SP, #+4]
   \   0000004A   0xF504 0x6080      ADD      R0,R4,#+1024
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0x2233             MOVS     R2,#+51
   \   00000052   0x....             LDR.N    R3,??DataTable3_3
   \   00000054   0x.... 0x....      ADR.W    R1,?_1
   \   00000058   0xF504 0x6043      ADD      R0,R4,#+3120
   \   0000005C   0x.... 0x....      BL       OS_CreateTask_R
     45          	OS_CREATETASK(&TCB3, "USART3", Task_USART3,  52, Stack3);
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0xF44F 0x6080      MOV      R0,#+1024
   \   00000068   0x9001             STR      R0,[SP, #+4]
   \   0000006A   0xF504 0x6000      ADD      R0,R4,#+2048
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   \   00000070   0x2234             MOVS     R2,#+52
   \   00000072   0x....             LDR.N    R3,??DataTable3_4
   \   00000074   0x.... 0x....      ADR.W    R1,?_2
   \   00000078   0xF504 0x6046      ADD      R0,R4,#+3168
   \   0000007C   0x.... 0x....      BL       OS_CreateTask_R
     46          	//OS_CREATETASK(&TCB4, "Task4", Task4,  53, Stack4);
     47          	OS_Start();                      /* Start multitasking            */
   \   00000080   0x....             LDR.N    R1,??DataTable3_5
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x7008             STRB     R0,[R1, #+0]
   \   00000086   0x.... 0x....      BL       OS_StartASM
     48          	return 0;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0xB004             ADD      SP,SP,#+16
   \   0000008E   0xBD10             POP      {R4,PC}          ;; return
     49          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     OS_Global

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     Stack1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     Task_spi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     Task_vending

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     Task_USART3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     OS_Running

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x54 0x61          DC8 "Task SPI"
   \              0x73 0x6B    
   \              0x20 0x53    
   \              0x50 0x49    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x54 0x61          DC8 "Task Vending"
   \              0x73 0x6B    
   \              0x20 0x56    
   \              0x65 0x6E    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x55 0x53          DC8 "USART3"
   \              0x41 0x52    
   \              0x54 0x33    
   \              0x00         
   \   00000007   0x00               DC8 0
     50          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   main
        24   -> BSP_Init
        24   -> OS_CreateTask_R
        24   -> OS_InitHW
        24   -> OS_InitKern_STD
        24   -> OS_StartASM


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
      12  ?_0
      16  ?_1
       8  ?_2
    3216  Stack1
          Stack2
          Stack3
          TCB1
          TCB2
          TCB3
      48  TCB4
     144  main

 
 3 264 bytes in section .bss
   204 bytes in section .text
 
   204 bytes of CODE memory
 3 264 bytes of DATA memory

Errors: none
Warnings: 1

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       12/Sep/2016  16:26:12
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\ilya\vendicont\arm-periphery\Application\log.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\log.c -D STM32F10X_HD -D
#        USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\log.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\log.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\log.c
      1          #include "stm32f10x.h"
      2          #include "log.h"
      3          #include "stdarg.h"
      4          #include "stdio.h"
      5          #include "string.h"
      6          #include "RTOS.h"
      7          
      8          

   \                                 In section .bss, align 4
      9          OS_RSEMA SemaLog;
     10          
     11          #define SPRINTF_BUF_SIZE 1024
     12          char sprintf_buf[ SPRINTF_BUF_SIZE ];
     13          
     14          tLog logDesc;
   \                     logDesc:
   \   00000000                      DS8 2572
   \                     SemaLog:
   \   00000A0C                      DS8 16
   \                     sprintf_buf:
   \   00000A1C                      DS8 1024
     15          
     16          #if defined (LOG)
     17          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     18          void enableLogging() {
     19             logDesc.prevEnabled = logDesc.enabled;
     20             logDesc.enabled = 1;
   \                     enableLogging: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0xF890 0x1A08      LDRB     R1,[R0, #+2568]
   \   00000006   0xF001 0x02FD      AND      R2,R1,#0xFD
   \   0000000A   0xF001 0x0101      AND      R1,R1,#0x1
   \   0000000E   0xEA42 0x0141      ORR      R1,R2,R1, LSL #+1
   \   00000012   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000016   0xF880 0x1A08      STRB     R1,[R0, #+2568]
     21          }
   \   0000001A   0x4770             BX       LR               ;; return
     22          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     23          void disableLogging() {
     24             logDesc.prevEnabled = logDesc.enabled;
     25             logDesc.enabled = 0;
   \                     disableLogging: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0xF890 0x1A08      LDRB     R1,[R0, #+2568]
   \   00000006   0xF001 0x02FC      AND      R2,R1,#0xFC
   \   0000000A   0xF001 0x0101      AND      R1,R1,#0x1
   \   0000000E   0xEA42 0x0141      ORR      R1,R2,R1, LSL #+1
   \   00000012   0xF880 0x1A08      STRB     R1,[R0, #+2568]
     26          }
   \   00000016   0x4770             BX       LR               ;; return
     27          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     28          u8 isLoggingEnabled() {
     29             return logDesc.enabled;
   \                     isLoggingEnabled: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0xF890 0x0A08      LDRB     R0,[R0, #+2568]
   \   00000006   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000000A   0x4770             BX       LR               ;; return
     30          }
     31          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     32          u8 restoreLogging( void ) {
     33             return logDesc.enabled = logDesc.prevEnabled;
   \                     restoreLogging: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0xF890 0x1A08      LDRB     R1,[R0, #+2568]
   \   00000006   0xF890 0x2A08      LDRB     R2,[R0, #+2568]
   \   0000000A   0x0849             LSRS     R1,R1,#+1
   \   0000000C   0xF361 0x0200      BFI      R2,R1,#+0,#+1
   \   00000010   0xF880 0x2A08      STRB     R2,[R0, #+2568]
   \   00000014   0xF002 0x0001      AND      R0,R2,#0x1
   \   00000018   0x4770             BX       LR               ;; return
     34          }
     35          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 4, keep-with-next
     36          void logInit() {
     37             int i = 0;
     38          #if 1
     39             logDesc.head = 0;
   \                     logInit: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xF8C0 0x1A00      STR      R1,[R0, #+2560]
     40             logDesc.head = 0;
     41          #endif
     42             for ( i = 0; i < LOG_BUFFER_NUMBUFFERS; i++ ) {
   \   00000008   0x3010             ADDS     R0,R0,#+16
   \   0000000A   0x2120             MOVS     R1,#+32
   \   0000000C   0xF05F 0x0200      MOVS.W   R2,#+0
     43                //dbg( " buf#%d) %d \r\n", i, logDesc.buffers[ i ].size );
     44          #if 1
     45                logDesc.buffers[ i ].size = 0;
   \                     ??logInit_0: (+1)
   \   00000010   0xF840 0x2B14      STR      R2,[R0], #+20
   \   00000014   0xF840 0x2B14      STR      R2,[R0], #+20
   \   00000018   0xF840 0x2B14      STR      R2,[R0], #+20
     46          #else
     47                if ( logDesc.buffers[ i ].size > LOG_BUFFER_DATASIZE )
     48                   logDesc.buffers[ i ].size = 0;
     49          
     50          #endif
     51          
     52          #if !defined (BOOTLOADER)
     53          
     54          #else
     55          #endif
     56             }
   \   0000001C   0x1E49             SUBS     R1,R1,#+1
   \   0000001E   0xF840 0x2B14      STR      R2,[R0], #+20
   \   00000022   0xD1F5             BNE.N    ??logInit_0
     57          }
   \   00000024   0x4770             BX       LR               ;; return
     58          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 4, keep-with-next
     59          u32 isLogEmpty() {
     60             u8 i;
     61             u32 size = 0;
   \                     isLogEmpty: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
     62             for ( i = 0 ; i < LOG_BUFFER_NUMBUFFERS; i++ ) {
   \   00000002   0x....             LDR.N    R1,??DataTable8_1
   \   00000004   0xF05F 0x0220      MOVS.W   R2,#+32
     63                size += logDesc.buffers[ i ].size;
   \                     ??isLogEmpty_0: (+1)
   \   00000008   0xF851 0x3B14      LDR      R3,[R1], #+20
   \   0000000C   0x1818             ADDS     R0,R3,R0
   \   0000000E   0xF851 0x3B14      LDR      R3,[R1], #+20
   \   00000012   0x1818             ADDS     R0,R3,R0
   \   00000014   0xF851 0x3B14      LDR      R3,[R1], #+20
   \   00000018   0x1818             ADDS     R0,R3,R0
   \   0000001A   0xF851 0x3B14      LDR      R3,[R1], #+20
   \   0000001E   0x1818             ADDS     R0,R3,R0
     64             }
   \   00000020   0x1E52             SUBS     R2,R2,#+1
   \   00000022   0xD1F1             BNE.N    ??isLogEmpty_0
     65             return size;
   \   00000024   0x4770             BX       LR               ;; return
     66          }
     67          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 4, keep-with-next
     68          void logWrite( char* data, int size ) {
   \                     logWrite: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
     69             tLogBuffer *b;
     70             char* p;
     71             int sizeLeft;
     72             int chunkSize;
     73          
     74             if ( !logDesc.enabled )
   \   00000004   0x.... 0x....      LDR.W    R9,??DataTable8
   \   00000008   0xB081             SUB      SP,SP,#+4
   \   0000000A   0x4680             MOV      R8,R0
   \   0000000C   0xF899 0x0A08      LDRB     R0,[R9, #+2568]
   \   00000010   0x07C0             LSLS     R0,R0,#+31
   \   00000012   0x460D             MOV      R5,R1
   \   00000014   0xD53C             BPL.N    ??logWrite_0
     75                return;
     76          
     77             sizeLeft = size;
   \   00000016   0x002F             MOVS     R7,R5
     78          
     79             for ( ; sizeLeft ; ) {
   \   00000018   0xF000 0x803A      BEQ.W    ??logWrite_0
     80          
     81                b = &logDesc.buffers[ logDesc.head ];
   \                     ??logWrite_1: (+1)
   \   0000001C   0xF8D9 0x1A00      LDR      R1,[R9, #+2560]
   \   00000020   0xEB01 0x0081      ADD      R0,R1,R1, LSL #+2
   \   00000024   0xEB09 0x0480      ADD      R4,R9,R0, LSL #+2
     82                p = &b->data[ b->size ];
   \   00000028   0x6922             LDR      R2,[R4, #+16]
   \   0000002A   0x1910             ADDS     R0,R2,R4
     83          
     84                if ( LOG_BUFFER_DATASIZE - b->size < sizeLeft ) {
   \   0000002C   0xF1C2 0x0610      RSB      R6,R2,#+16
   \   00000030   0x42BE             CMP      R6,R7
   \   00000032   0xDA22             BGE.N    ??logWrite_2
     85                   chunkSize = LOG_BUFFER_DATASIZE - b->size;
     86                   logDesc.head++;
     87                   logDesc.head = logDesc.head % LOG_BUFFER_NUMBUFFERS;
   \   00000034   0x1C49             ADDS     R1,R1,#+1
   \   00000036   0x118A             ASRS     R2,R1,#+6
   \   00000038   0xEB01 0x6252      ADD      R2,R1,R2, LSR #+25
   \   0000003C   0x11D2             ASRS     R2,R2,#+7
   \   0000003E   0xEBA1 0x11C2      SUB      R1,R1,R2, LSL #+7
   \   00000042   0xF8C9 0x1A00      STR      R1,[R9, #+2560]
     88                   logDesc.buffers[ logDesc.head ].size = 0;
   \   00000046   0xEB01 0x0381      ADD      R3,R1,R1, LSL #+2
   \   0000004A   0xEB09 0x0183      ADD      R1,R9,R3, LSL #+2
   \   0000004E   0x2200             MOVS     R2,#+0
   \   00000050   0x610A             STR      R2,[R1, #+16]
     89                   if ( logDesc.head == logDesc.tail )
   \   00000052   0xF8D9 0x1A04      LDR      R1,[R9, #+2564]
   \   00000056   0xF8D9 0x2A00      LDR      R2,[R9, #+2560]
   \   0000005A   0x428A             CMP      R2,R1
   \   0000005C   0xBF04             ITT      EQ 
   \   0000005E   0x1C49             ADDEQ    R1,R1,#+1
   \   00000060   0xF8C9 0x1A04      STREQ    R1,[R9, #+2564]
     90                      logDesc.tail++;
     91                      logDesc.tail = logDesc.tail % LOG_BUFFER_NUMBUFFERS;
   \   00000064   0xF8D9 0x1A04      LDR      R1,[R9, #+2564]
   \   00000068   0x118A             ASRS     R2,R1,#+6
   \   0000006A   0xEB01 0x6252      ADD      R2,R1,R2, LSR #+25
   \   0000006E   0x11D2             ASRS     R2,R2,#+7
   \   00000070   0xEBA1 0x11C2      SUB      R1,R1,R2, LSL #+7
   \   00000074   0xF8C9 0x1A04      STR      R1,[R9, #+2564]
   \   00000078   0xE000             B.N      ??logWrite_3
     92                } else {
     93                   chunkSize = sizeLeft;
   \                     ??logWrite_2: (+1)
   \   0000007A   0x463E             MOV      R6,R7
     94                }
     95          
     96                memcpy( p, &data[ size - sizeLeft ], chunkSize );
   \                     ??logWrite_3: (+1)
   \   0000007C   0x1BE9             SUBS     R1,R5,R7
   \   0000007E   0x4632             MOV      R2,R6
   \   00000080   0x4441             ADD      R1,R1,R8
   \   00000082   0x.... 0x....      BL       __aeabi_memcpy
     97                b->size += chunkSize;
   \   00000086   0x6920             LDR      R0,[R4, #+16]
   \   00000088   0x1830             ADDS     R0,R6,R0
     98                sizeLeft -= chunkSize;
   \   0000008A   0x1BBF             SUBS     R7,R7,R6
   \   0000008C   0x6120             STR      R0,[R4, #+16]
   \   0000008E   0xD1C5             BNE.N    ??logWrite_1
     99          
    100          #ifdef DEBUG
    101                //if ( sizeLeft )
    102                //   dbg("\r\nLOG:%d written, h:%d, t:%d, chsz:%d, sizeLeft:%d\r\n\r\n", chunkSize, logDesc.head, logDesc.tail, logDesc.buffers[ logDesc.head ].size, sizeLeft );
    103          #endif
    104             }
    105          
    106          }
   \                     ??logWrite_0: (+1)
   \   00000090   0xB001             ADD      SP,SP,#+4
   \   00000092   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    107          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    108          int logRead( char* data, int maxSize ) {
   \                     logRead: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
    109             tLogBuffer *b;
    110             int chunkSize;
    111             int totalSize = 0;
    112          
    113          #if !defined (BOOTLOADER)
    114             OS_Use( &SemaLog );
   \   00000006   0x.... 0x....      LDR.W    R9,??DataTable8
   \   0000000A   0xB081             SUB      SP,SP,#+4
   \   0000000C   0x460D             MOV      R5,R1
   \   0000000E   0xF609 0x200C      ADDW     R0,R9,#+2572
   \   00000012   0x.... 0x....      BL       OS_Use
   \   00000016   0x2700             MOVS     R7,#+0
   \   00000018   0xE008             B.N      ??logRead_0
    115          #endif
    116          
    117             for ( ; totalSize < maxSize ; ) {
    118          
    119                b = &logDesc.buffers[ logDesc.tail ];
    120                if ( totalSize + b->size < maxSize )
    121                   chunkSize = b->size;
    122                else
    123                   chunkSize = maxSize - totalSize ;
    124          #ifdef DEBUG
    125                //dbg( "tail:%d chunk:%d\r\n", logDesc.tail, chunkSize );
    126          #endif
    127                memcpy( &data[ totalSize ], b->data, chunkSize );
    128                totalSize += chunkSize;
    129          
    130                if ( b->size < LOG_BUFFER_DATASIZE ) {
    131                   if ( maxSize < LOG_BUFFER_DATASIZE ) {
    132                      b->size -= chunkSize;
    133                   } else {
    134                      b->size = 0;
    135                   }
    136                   break;
    137                }
    138          
    139                b->size = 0;
    140                if ( logDesc.tail == logDesc.head )
    141                   break;
    142          
    143                logDesc.tail++;
    144                logDesc.tail = logDesc.tail % LOG_BUFFER_NUMBUFFERS;
   \                     ??logRead_1: (+1)
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x1181             ASRS     R1,R0,#+6
   \   0000001E   0xEB00 0x6151      ADD      R1,R0,R1, LSR #+25
   \   00000022   0x11C9             ASRS     R1,R1,#+7
   \   00000024   0xEBA0 0x10C1      SUB      R0,R0,R1, LSL #+7
   \   00000028   0xF8C9 0x0A04      STR      R0,[R9, #+2564]
   \                     ??logRead_0: (+1)
   \   0000002C   0x42AF             CMP      R7,R5
   \   0000002E   0xDA22             BGE.N    ??logRead_2
   \   00000030   0xF8D9 0x0A04      LDR      R0,[R9, #+2564]
   \   00000034   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   00000038   0xEB09 0x0481      ADD      R4,R9,R1, LSL #+2
   \   0000003C   0x4621             MOV      R1,R4
   \   0000003E   0x6926             LDR      R6,[R4, #+16]
   \   00000040   0x19F0             ADDS     R0,R6,R7
   \   00000042   0x42A8             CMP      R0,R5
   \   00000044   0xBFA8             IT       GE 
   \   00000046   0x1BEE             SUBGE    R6,R5,R7
   \   00000048   0x4632             MOV      R2,R6
   \   0000004A   0xEB07 0x0008      ADD      R0,R7,R8
   \   0000004E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000052   0x6920             LDR      R0,[R4, #+16]
   \   00000054   0x19F7             ADDS     R7,R6,R7
   \   00000056   0x2810             CMP      R0,#+16
   \   00000058   0xDA05             BGE.N    ??logRead_3
   \   0000005A   0x2D10             CMP      R5,#+16
   \   0000005C   0xBFB4             ITE      LT 
   \   0000005E   0x1B80             SUBLT    R0,R0,R6
   \   00000060   0x2000             MOVGE    R0,#+0
   \   00000062   0x6120             STR      R0,[R4, #+16]
   \   00000064   0xE007             B.N      ??logRead_2
   \                     ??logRead_3: (+1)
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x6120             STR      R0,[R4, #+16]
   \   0000006A   0xF8D9 0x1A00      LDR      R1,[R9, #+2560]
   \   0000006E   0xF8D9 0x0A04      LDR      R0,[R9, #+2564]
   \   00000072   0x4288             CMP      R0,R1
   \   00000074   0xD1D1             BNE.N    ??logRead_1
    145             }
    146          
    147          #if !defined (BOOTLOADER)
    148             OS_Unuse( &SemaLog );
   \                     ??logRead_2: (+1)
   \   00000076   0xF609 0x200C      ADDW     R0,R9,#+2572
   \   0000007A   0x.... 0x....      BL       OS_Unuse
    149          #endif
    150          
    151             return totalSize;
   \   0000007E   0x4638             MOV      R0,R7
   \   00000080   0xB001             ADD      SP,SP,#+4
   \   00000082   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    152          }
    153          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    154          void log1( char* fmt, ...) {
   \                     log1: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB570             PUSH     {R4-R6,LR}
   \   00000004   0x4604             MOV      R4,R0
    155             int rc;
    156             va_list  list;
    157             va_start( list, fmt );
    158          
    159          #if !defined (BOOTLOADER)
    160            OS_Use( &SemaLog );
   \   00000006   0x....             LDR.N    R6,??DataTable8
   \   00000008   0xF606 0x200C      ADDW     R0,R6,#+2572
   \   0000000C   0xB081             SUB      SP,SP,#+4
   \   0000000E   0x.... 0x....      BL       OS_Use
   \   00000012   0xAD05             ADD      R5,SP,#+20
    161          #endif
    162          
    163          
    164          #if 1
    165             rc = vsnprintf( sprintf_buf, SPRINTF_BUF_SIZE, fmt, list );
   \   00000014   0x462B             MOV      R3,R5
   \   00000016   0x4622             MOV      R2,R4
   \   00000018   0xF44F 0x6180      MOV      R1,#+1024
   \   0000001C   0xF606 0x201C      ADDW     R0,R6,#+2588
   \   00000020   0x.... 0x....      BL       vsnprintf
    166             if ( rc > 0 ) {
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xDB08             BLT.N    ??log1_0
    167          
    168          //#ifdef DEBUG
    169          #if 0
    170                int i;
    171                for ( i = 0; i < rc; ) {
    172                   int n = ( rc - i > 512 ) ? 512 : rc - i;
    173                   //ebdat7_02DebugUartSend( (u8*)&sprintf_buf[ i ], n );
    174                   i += n;
    175                }
    176          #endif
    177          
    178                if ( logDesc.enabled )
   \   00000028   0xF896 0x1A08      LDRB     R1,[R6, #+2568]
   \   0000002C   0x07C9             LSLS     R1,R1,#+31
   \   0000002E   0xD504             BPL.N    ??log1_0
    179                   logWrite( sprintf_buf, rc );
   \   00000030   0x4601             MOV      R1,R0
   \   00000032   0xF606 0x201C      ADDW     R0,R6,#+2588
   \   00000036   0x.... 0x....      BL       logWrite
    180             }
    181          #else
    182             dbg( fmt, list );
    183          #endif
    184          
    185          #if !defined (BOOTLOADER)
    186            OS_Unuse( &SemaLog );
   \                     ??log1_0: (+1)
   \   0000003A   0xF606 0x200C      ADDW     R0,R6,#+2572
   \   0000003E   0x.... 0x....      BL       OS_Unuse
    187          #endif
    188          
    189             va_end( list );
    190          }
   \   00000042   0xB001             ADD      SP,SP,#+4
   \   00000044   0xBC70             POP      {R4-R6}
   \   00000046   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     logDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     logDesc+0x10
    191          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   disableLogging
       0   enableLogging
       0   isLogEmpty
       0   isLoggingEnabled
      32   log1
        32   -> OS_Unuse
        32   -> OS_Use
        32   -> logWrite
        32   -> vsnprintf
       0   logInit
      32   logRead
        32   -> OS_Unuse
        32   -> OS_Use
        32   -> __aeabi_memcpy
      32   logWrite
        32   -> __aeabi_memcpy
       0   restoreLogging


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
      24  disableLogging
      28  enableLogging
      38  isLogEmpty
      12  isLoggingEnabled
      74  log1
    3612  logDesc
          SemaLog
          sprintf_buf
      38  logInit
     134  logRead
     150  logWrite
      26  restoreLogging

 
 3 612 bytes in section .bss
   532 bytes in section .text
 
   532 bytes of CODE memory
 3 612 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       19/Oct/2016  13:34:21
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ilya\vendicont\arm-periphery\Application\p-types\vending\mdb_sniffer.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\p-types\vending\mdb_sniffer.c
#        -D STM32F10X_HD -D USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\mdb_sniffer.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\mdb_sniffer.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\p-types\vending\mdb_sniffer.c
      1          #include "stm32f10x.h"
      2          #include "RTOS.h"
      3          #include "BSP.h"
      4          #include "pt-vending.h"
      5          #include "stdio.h"
      6          #include "log.h"
      7          #include "mdb.h"
      8          #include "mdb_sniffer.h"
      9          

   \                                 In section .bss, align 4
     10          tMdbSniffer sniffer;
   \                     sniffer:
   \   00000000                      DS8 480
     11          extern t_fb_desc fb;
     12          
     13          #if defined MDB_SNIFFER
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void sniffer_tx( u8* p, u16 n )
     16          {
   \                     sniffer_tx: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
     17            u16 sz = sizeof(sniffer.tx_buf) - sniffer.tx_size;
   \   00000002   0x....             LDR.N    R4,??DataTable9_1
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x8AE3             LDRH     R3,[R4, #+22]
   \   00000008   0xF5C3 0x7580      RSB      R5,R3,#+256
     18          
     19            if ( n > sz )
   \   0000000C   0xB2AD             UXTH     R5,R5
   \   0000000E   0x428D             CMP      R5,R1
   \   00000010   0xBF88             IT       HI 
   \   00000012   0x460D             MOVHI    R5,R1
     20            {
     21              n = sz;
     22            }
     23            
     24            if ( n > 0 )
   \   00000014   0xB18D             CBZ.N    R5,??sniffer_tx_0
     25            {
     26              memmove( &sniffer.tx_buf[ sniffer.tx_size ], p, n );
   \   00000016   0x4601             MOV      R1,R0
   \   00000018   0x1918             ADDS     R0,R3,R4
   \   0000001A   0x462A             MOV      R2,R5
   \   0000001C   0x3018             ADDS     R0,R0,#+24
   \   0000001E   0x.... 0x....      BL       __aeabi_memmove
     27              sniffer.tx_size += n;  
   \   00000022   0x8AE0             LDRH     R0,[R4, #+22]
   \   00000024   0x1828             ADDS     R0,R5,R0
   \   00000026   0x82E0             STRH     R0,[R4, #+22]
     28              USART_ITConfig( USART3, USART_IT_TXE , ENABLE );      
   \   00000028   0xB001             ADD      SP,SP,#+4
   \   0000002A   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0xF240 0x7127      MOVW     R1,#+1831
   \   00000034   0x....             LDR.N    R0,??DataTable9_2  ;; 0x40004800
   \   00000036   0x.... 0x....      B.W      USART_ITConfig
     29            }
     30          }
   \                     ??sniffer_tx_0: (+1)
   \   0000003A   0xB001             ADD      SP,SP,#+4
   \   0000003C   0xBD30             POP      {R4,R5,PC}       ;; return
     31          

   \                                 In section .text, align 4, keep-with-next
     32          void sniffer_s_rx()
     33          {  
   \                     sniffer_s_rx: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
     34            if ( (sniffer.m.raw.rx[ 0 ] & 0xF0) != 0x10 )
     35            {
     36                //return;
     37            }
     38            u8 n = 0;
     39            char buf[128];
     40          #if 1
     41            float f = sniffer.s.raw.time;
     42            f /= 1000.0;
     43            n += sprintf(&buf[n],"[%07.1f] ", f);
   \   00000002   0x....             LDR.N    R4,??DataTable9_1
   \   00000004   0x.... 0x....      ADR.W    R7,?_1
   \   00000008   0xB0A1             SUB      SP,SP,#+132
   \   0000000A   0xF8D4 0x01D8      LDR      R0,[R4, #+472]
   \   0000000E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000012   0x....             LDR.N    R1,??DataTable9_3  ;; 0x447a0000
   \   00000014   0x.... 0x....      BL       __aeabi_fdiv
   \   00000018   0x.... 0x....      BL       __aeabi_f2d
   \   0000001C   0x4602             MOV      R2,R0
   \   0000001E   0x460B             MOV      R3,R1
   \   00000020   0x.... 0x....      ADR.W    R1,?_0
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x.... 0x....      BL       sprintf
   \   0000002A   0xB2C0             UXTB     R0,R0
     44          #endif  
     45            buf[ n++ ] = SNIFFER_SLAVE_CH;
   \   0000002C   0x4669             MOV      R1,SP
   \   0000002E   0x2253             MOVS     R2,#+83
   \   00000030   0x5442             STRB     R2,[R0, R1]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0xB2C0             UXTB     R0,R0
     46            buf[ n++ ] = ':';  
   \   00000036   0x223A             MOVS     R2,#+58
   \   00000038   0x5442             STRB     R2,[R0, R1]
   \   0000003A   0x1C45             ADDS     R5,R0,#+1
     47            for (u8 i = 0; i < sniffer.s.raw.rx_size; i++ )
   \   0000003C   0xF894 0x01D4      LDRB     R0,[R4, #+468]
   \   00000040   0xB2ED             UXTB     R5,R5
   \   00000042   0xF05F 0x0600      MOVS.W   R6,#+0
   \   00000046   0xB180             CBZ.N    R0,??sniffer_s_rx_0
     48            {
     49              n += sprintf(&buf[n],"%.2X ", sniffer.s.raw.rx[i]);
   \                     ??sniffer_s_rx_1: (+1)
   \   00000048   0xEB04 0x0046      ADD      R0,R4,R6, LSL #+1
   \   0000004C   0x4639             MOV      R1,R7
   \   0000004E   0xF8B0 0x218C      LDRH     R2,[R0, #+396]
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x1828             ADDS     R0,R5,R0
   \   00000056   0x.... 0x....      BL       sprintf
     50            }  
   \   0000005A   0x1C76             ADDS     R6,R6,#+1
   \   0000005C   0xB2F6             UXTB     R6,R6
   \   0000005E   0x1945             ADDS     R5,R0,R5
   \   00000060   0xF894 0x01D4      LDRB     R0,[R4, #+468]
   \   00000064   0x4286             CMP      R6,R0
   \   00000066   0xB2ED             UXTB     R5,R5
   \   00000068   0xD3EE             BCC.N    ??sniffer_s_rx_1
     51            buf[ n-1 ] = 0x0D;
   \                     ??sniffer_s_rx_0: (+1)
   \   0000006A   0x4669             MOV      R1,SP
   \   0000006C   0x1869             ADDS     R1,R5,R1
   \   0000006E   0x200D             MOVS     R0,#+13
   \   00000070   0xF801 0x0C01      STRB     R0,[R1, #-1]
     52            
     53            sniffer_tx( buf, n );
   \   00000074   0x4629             MOV      R1,R5
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x.... 0x....      BL       sniffer_tx
     54            memset(sniffer.s.raw.rx, 0, sizeof(sniffer.s.raw.rx));
   \   0000007C   0x2148             MOVS     R1,#+72
   \   0000007E   0xF504 0x70C6      ADD      R0,R4,#+396
   \   00000082   0x.... 0x....      BL       __aeabi_memclr4
     55          }
   \   00000086   0xB021             ADD      SP,SP,#+132
   \   00000088   0xBDF0             POP      {R4-R7,PC}       ;; return
     56          

   \                                 In section .text, align 4, keep-with-next
     57          void sniffer_m_rx()
     58          {
   \                     sniffer_m_rx: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
     59            if ( (sniffer.m.raw.rx[ 0 ] & 0xF0) != 0x10 )
     60            {
     61                //return;
     62            }
     63            
     64            u8 n = 0;
     65            char buf[128];
     66          #if 1 
     67            float f = sniffer.m.raw.time;
     68            f /= 1000.0;
     69            n += sprintf(&buf[n],"[%07.1f] ", f);
   \   00000002   0x....             LDR.N    R4,??DataTable9_1
   \   00000004   0x.... 0x....      ADR.W    R7,?_1
   \   00000008   0xB0A1             SUB      SP,SP,#+132
   \   0000000A   0xF8D4 0x0188      LDR      R0,[R4, #+392]
   \   0000000E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000012   0x....             LDR.N    R1,??DataTable9_3  ;; 0x447a0000
   \   00000014   0x.... 0x....      BL       __aeabi_fdiv
   \   00000018   0x.... 0x....      BL       __aeabi_f2d
   \   0000001C   0x4602             MOV      R2,R0
   \   0000001E   0x460B             MOV      R3,R1
   \   00000020   0x.... 0x....      ADR.W    R1,?_0
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x.... 0x....      BL       sprintf
   \   0000002A   0xB2C0             UXTB     R0,R0
     70          #endif  
     71            buf[ n++ ] = SNIFFER_MASTER_CH;
   \   0000002C   0x4669             MOV      R1,SP
   \   0000002E   0x224D             MOVS     R2,#+77
   \   00000030   0x5442             STRB     R2,[R0, R1]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0xB2C0             UXTB     R0,R0
     72            buf[ n++ ] = ':';  
   \   00000036   0x223A             MOVS     R2,#+58
   \   00000038   0x5442             STRB     R2,[R0, R1]
   \   0000003A   0x1C45             ADDS     R5,R0,#+1
     73            for (u8 i = 0; i < sniffer.m.raw.rx_size; i++ )
   \   0000003C   0xF894 0x0184      LDRB     R0,[R4, #+388]
   \   00000040   0xB2ED             UXTB     R5,R5
   \   00000042   0xF05F 0x0600      MOVS.W   R6,#+0
   \   00000046   0xB180             CBZ.N    R0,??sniffer_m_rx_0
     74            {
     75              n += sprintf(&buf[n],"%.2X ", sniffer.m.raw.rx[i]);
   \                     ??sniffer_m_rx_1: (+1)
   \   00000048   0xEB04 0x0046      ADD      R0,R4,R6, LSL #+1
   \   0000004C   0x4639             MOV      R1,R7
   \   0000004E   0xF8B0 0x213C      LDRH     R2,[R0, #+316]
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x1828             ADDS     R0,R5,R0
   \   00000056   0x.... 0x....      BL       sprintf
     76            }  
   \   0000005A   0x1C76             ADDS     R6,R6,#+1
   \   0000005C   0xB2F6             UXTB     R6,R6
   \   0000005E   0x1945             ADDS     R5,R0,R5
   \   00000060   0xF894 0x0184      LDRB     R0,[R4, #+388]
   \   00000064   0x4286             CMP      R6,R0
   \   00000066   0xB2ED             UXTB     R5,R5
   \   00000068   0xD3EE             BCC.N    ??sniffer_m_rx_1
     77            buf[ n-1 ] = '\r';
   \                     ??sniffer_m_rx_0: (+1)
   \   0000006A   0x4669             MOV      R1,SP
   \   0000006C   0x1869             ADDS     R1,R5,R1
   \   0000006E   0x200D             MOVS     R0,#+13
   \   00000070   0xF801 0x0C01      STRB     R0,[R1, #-1]
     78          
     79            sniffer_tx( buf, n );  
   \   00000074   0x4629             MOV      R1,R5
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x.... 0x....      BL       sniffer_tx
     80            memset(sniffer.m.raw.rx, 0, sizeof(sniffer.m.raw.rx));
   \   0000007C   0x2148             MOVS     R1,#+72
   \   0000007E   0xF504 0x709E      ADD      R0,R4,#+316
   \   00000082   0x.... 0x....      BL       __aeabi_memclr4
     81          }
   \   00000086   0xB021             ADD      SP,SP,#+132
   \   00000088   0xBDF0             POP      {R4-R7,PC}       ;; return
     82          

   \                                 In section .text, align 4, keep-with-next
     83          void sniffer_rx_msg()
     84          {  
   \                     sniffer_rx_msg: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
     85            s16 sz = 0;  
     86            u8* rx = sniffer.rx_buf;
     87            u16 rx_size = sniffer.rx_size;
   \   00000004   0x....             LDR.N    R4,??DataTable9_1
     88            void (*tx)(u16*,u16) = 0;
     89            
     90            log( "sniffer rx:%d ", rx_size );
   \   00000006   0x.... 0x....      ADR.W    R0,?_2
   \   0000000A   0xF8B4 0x5118      LDRH     R5,[R4, #+280]
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x.... 0x....      BL       log1
     91            for ( int i = 0 ; i < rx_size; i++ )
   \   00000014   0x2D01             CMP      R5,#+1
   \   00000016   0xDB0A             BLT.N    ??sniffer_rx_msg_0
   \   00000018   0xF504 0x788D      ADD      R8,R4,#+282
   \   0000001C   0x462F             MOV      R7,R5
   \   0000001E   0x....             ADR.N    R6,??DataTable9  ;; 0x25, 0x63, 0x00, 0x00
     92            {
     93              log( "%c",rx[i] );    
   \                     ??sniffer_rx_msg_1: (+1)
   \   00000020   0xF818 0x1B01      LDRB     R1,[R8], #+1
   \   00000024   0x4630             MOV      R0,R6
   \   00000026   0x.... 0x....      BL       log1
     94            }
   \   0000002A   0x1E7F             SUBS     R7,R7,#+1
   \   0000002C   0xD1F8             BNE.N    ??sniffer_rx_msg_1
     95            
     96            if ( rx_size > 2 && rx[ 1 ] == ':' )
   \                     ??sniffer_rx_msg_0: (+1)
   \   0000002E   0x2D03             CMP      R5,#+3
   \   00000030   0xDB17             BLT.N    ??sniffer_rx_msg_2
   \   00000032   0xF894 0x011B      LDRB     R0,[R4, #+283]
   \   00000036   0x283A             CMP      R0,#+58
   \   00000038   0xD141             BNE.N    ??sniffer_rx_msg_3
     97            {    
     98              sz = rx_size - 2;
     99              if ( rx[ 0 ] == SNIFFER_MASTER_CH )
   \   0000003A   0xF894 0x111A      LDRB     R1,[R4, #+282]
   \   0000003E   0x1EA8             SUBS     R0,R5,#+2
   \   00000040   0x294D             CMP      R1,#+77
   \   00000042   0xBF08             IT       EQ 
   \   00000044   0x....             LDREQ.N  R2,??DataTable9_4
    100              {   
    101                tx = fb_m_tx;
   \   00000046   0xD002             BEQ.N    ??sniffer_rx_msg_4
    102              }
    103              else if ( rx[ 0 ] == SNIFFER_SLAVE_CH )
   \   00000048   0x2953             CMP      R1,#+83
   \   0000004A   0xD13C             BNE.N    ??sniffer_rx_msg_5
    104              {      
    105                tx = fb_s_tx;
   \   0000004C   0x....             LDR.N    R2,??DataTable9_5
    106              }    
    107              
    108              if ( sz > 0 && tx )
   \                     ??sniffer_rx_msg_4: (+1)
   \   0000004E   0xB201             SXTH     R1,R0
   \   00000050   0x2901             CMP      R1,#+1
   \   00000052   0xDB38             BLT.N    ??sniffer_rx_msg_5
   \   00000054   0x0011             MOVS     R1,R2
   \   00000056   0xD036             BEQ.N    ??sniffer_rx_msg_5
    109              {
    110                tx( (u16*)&rx[2], sz );
   \   00000058   0xB281             UXTH     R1,R0
   \   0000005A   0xF504 0x708E      ADD      R0,R4,#+284
   \   0000005E   0x4790             BLX      R2
   \   00000060   0xE031             B.N      ??sniffer_rx_msg_5
    111              }
    112            }
    113            else if ( rx_size == 2 && rx[ 0 ] == 'd' && rx[ 1 ] == '\r')
   \                     ??sniffer_rx_msg_2: (+1)
   \   00000062   0x2D02             CMP      R5,#+2
   \   00000064   0xD12B             BNE.N    ??sniffer_rx_msg_3
   \   00000066   0xF894 0x111A      LDRB     R1,[R4, #+282]
   \   0000006A   0x2964             CMP      R1,#+100
   \   0000006C   0xD10B             BNE.N    ??sniffer_rx_msg_6
   \   0000006E   0xF894 0x011B      LDRB     R0,[R4, #+283]
   \   00000072   0x280D             CMP      R0,#+13
   \   00000074   0xD123             BNE.N    ??sniffer_rx_msg_3
    114            {    
    115              fb.cashless.display_tr = 1;
   \   00000076   0x....             LDR.N    R0,??DataTable9_6
   \   00000078   0xF890 0x12C0      LDRB     R1,[R0, #+704]
   \   0000007C   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000080   0xF880 0x12C0      STRB     R1,[R0, #+704]
   \   00000084   0xE01F             B.N      ??sniffer_rx_msg_5
    116            }  
   \                     ??sniffer_rx_msg_6: (+1)
   \   00000086   0x2962             CMP      R1,#+98
   \   00000088   0xD10B             BNE.N    ??sniffer_rx_msg_7
   \   0000008A   0xF894 0x011B      LDRB     R0,[R4, #+283]
   \   0000008E   0x280D             CMP      R0,#+13
   \   00000090   0xD115             BNE.N    ??sniffer_rx_msg_3
    117            else if ( rx_size == 2 && rx[ 0 ] == 'b' && rx[ 1 ] == '\r')
    118            {    
    119              fb.cashless.begin_session_tr = 1;    
   \   00000092   0x....             LDR.N    R0,??DataTable9_6
   \   00000094   0xF890 0x12C0      LDRB     R1,[R0, #+704]
   \   00000098   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000009C   0xF880 0x12C0      STRB     R1,[R0, #+704]
   \   000000A0   0xE011             B.N      ??sniffer_rx_msg_5
    120            }
   \                     ??sniffer_rx_msg_7: (+1)
   \   000000A2   0x2963             CMP      R1,#+99
   \   000000A4   0xBF04             ITT      EQ 
   \   000000A6   0xF894 0x011B      LDRBEQ   R0,[R4, #+283]
   \   000000AA   0x280D             CMPEQ    R0,#+13
   \   000000AC   0xD107             BNE.N    ??sniffer_rx_msg_3
    121            else if ( rx_size == 2 && rx[ 0 ] == 'c' && rx[ 1 ] == '\r')
    122            {    
    123              fb.cashless.cancel_session_tr = 1;    
   \   000000AE   0x....             LDR.N    R0,??DataTable9_6
   \   000000B0   0xF890 0x12C0      LDRB     R1,[R0, #+704]
   \   000000B4   0xF041 0x0108      ORR      R1,R1,#0x8
   \   000000B8   0xF880 0x12C0      STRB     R1,[R0, #+704]
   \   000000BC   0xE003             B.N      ??sniffer_rx_msg_5
    124            }  
    125            else
    126            {
    127              log("sniffer rx incorrect format\r\n");
   \                     ??sniffer_rx_msg_3: (+1)
   \   000000BE   0x.... 0x....      ADR.W    R0,?_4
   \   000000C2   0x.... 0x....      BL       log1
    128            }
    129            memset(sniffer.rx_buf, 0, sizeof(sniffer.rx_buf));
   \                     ??sniffer_rx_msg_5: (+1)
   \   000000C6   0x2120             MOVS     R1,#+32
   \   000000C8   0xF504 0x708D      ADD      R0,R4,#+282
   \   000000CC   0x.... 0x....      BL       __aeabi_memclr
    130            sniffer.rx_size = 0;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0xF8A4 0x0118      STRH     R0,[R4, #+280]
    131          }
   \   000000D6   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    132          

   \                                 In section .text, align 2, keep-with-next
    133          void sniffer_isr( void* uart )
    134          {
   \                     sniffer_isr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
    135            if ( USART_GetFlagStatus( uart, USART_FLAG_RXNE ) ) 
   \   00000006   0x2120             MOVS     R1,#+32
   \   00000008   0x.... 0x....      BL       USART_GetFlagStatus
   \   0000000C   0xB1B0             CBZ.N    R0,??sniffer_isr_0
    136            {
    137              // Push a new data into the receiver buffer
    138              volatile u8 b = USART_ReceiveData(uart);
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       USART_ReceiveData
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
    139              if ( sniffer.rx_size < sizeof(sniffer.rx_buf) ) 
   \   00000018   0x....             LDR.N    R5,??DataTable9_1
   \   0000001A   0xF8B5 0x0118      LDRH     R0,[R5, #+280]
   \   0000001E   0x2820             CMP      R0,#+32
   \   00000020   0xD209             BCS.N    ??sniffer_isr_1
    140              {
    141                 sniffer.rx_buf[ sniffer.rx_size++ ] = b;
   \   00000022   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000026   0x1940             ADDS     R0,R0,R5
   \   00000028   0xF880 0x111A      STRB     R1,[R0, #+282]
   \   0000002C   0xF8B5 0x0118      LDRH     R0,[R5, #+280]
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0xF8A5 0x0118      STRH     R0,[R5, #+280]
    142              }
    143              OS_RetriggerTimer( &sniffer.timer );        
   \                     ??sniffer_isr_1: (+1)
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0x.... 0x....      BL       OS_RetriggerTimer
    144            }
    145          
    146            if ( USART_GetFlagStatus( uart, USART_FLAG_TXE ) && ( USART_GetITStatus( uart, USART_IT_TXE ) == SET ) ) 
   \                     ??sniffer_isr_0: (+1)
   \   0000003C   0x2180             MOVS     R1,#+128
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000044   0xB320             CBZ.N    R0,??sniffer_isr_2
   \   00000046   0xF240 0x7627      MOVW     R6,#+1831
   \   0000004A   0x4631             MOV      R1,R6
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       USART_GetITStatus
   \   00000052   0x2801             CMP      R0,#+1
   \   00000054   0xD11C             BNE.N    ??sniffer_isr_2
    147            {
    148              if( sniffer.tx_size > 0 ) 
   \   00000056   0x....             LDR.N    R5,??DataTable9_1
   \   00000058   0x8AE8             LDRH     R0,[R5, #+22]
   \   0000005A   0xB180             CBZ.N    R0,??sniffer_isr_3
    149              {
    150                volatile u8 b =  sniffer.tx_buf[ sniffer.tx_cnt++ ];
   \   0000005C   0x8AA8             LDRH     R0,[R5, #+20]
   \   0000005E   0x1941             ADDS     R1,R0,R5
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \   00000062   0x7E09             LDRB     R1,[R1, #+24]
   \   00000064   0xF88D 0x1000      STRB     R1,[SP, #+0]
   \   00000068   0x82A8             STRH     R0,[R5, #+20]
    151                USART_SendData( uart, b );
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000070   0x.... 0x....      BL       USART_SendData
    152                sniffer.tx_size--;
   \   00000074   0x8AE8             LDRH     R0,[R5, #+22]
   \   00000076   0x1E40             SUBS     R0,R0,#+1
   \   00000078   0x82E8             STRH     R0,[R5, #+22]
    153              }
    154              else if( sniffer.tx_size == 0 ) 
    155              {
    156                sniffer.tx_cnt = 0;
    157                USART_ITConfig( uart, USART_IT_TXE , DISABLE );         
    158              }  
    159            }  
    160          }
   \   0000007A   0xB002             ADD      SP,SP,#+8
   \   0000007C   0xBD70             POP      {R4-R6,PC}
   \                     ??sniffer_isr_3: (+1)
   \   0000007E   0x82A8             STRH     R0,[R5, #+20]
   \   00000080   0x4631             MOV      R1,R6
   \   00000082   0x4620             MOV      R0,R4
   \   00000084   0xB002             ADD      SP,SP,#+8
   \   00000086   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000008A   0x2200             MOVS     R2,#+0
   \   0000008C   0x.... 0x....      B.W      USART_ITConfig
   \                     ??sniffer_isr_2: (+1)
   \   00000090   0xB002             ADD      SP,SP,#+8
   \   00000092   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x25 0x63          DC8      0x25, 0x63, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     sniffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     fb_m_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     fb_s_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     fb

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x25 0x63          DC8 "%c"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x5B 0x25          DC8 "[%07.1f] "
   \              0x30 0x37    
   \              0x2E 0x31    
   \              0x66 0x5D    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x25 0x2E          DC8 "%.2X "
   \              0x32 0x58    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x73 0x6E          DC8 "sniffer rx:%d "
   \              0x69 0x66    
   \              0x66 0x65    
   \              0x72 0x20    
   \              0x72 0x78    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x73 0x6E          DC8 "sniffer rx incorrect format\015\012"
   \              0x69 0x66    
   \              0x66 0x65    
   \              0x72 0x20    
   \              0x72 0x78    
   \              0x20 0x69    
   \              0x6E 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0
    161          
    162          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   sniffer_isr
        24   -> OS_RetriggerTimer
        24   -> USART_GetFlagStatus
        24   -> USART_GetITStatus
         0   -> USART_ITConfig
        24   -> USART_ReceiveData
        24   -> USART_SendData
     152   sniffer_m_rx
       152   -> __aeabi_f2d
       152   -> __aeabi_fdiv
       152   -> __aeabi_memclr4
       152   -> __aeabi_ui2f
       152   -> sniffer_tx
       152   -> sprintf
      24   sniffer_rx_msg
        24   -- Indirect call
        24   -> __aeabi_memclr
        24   -> log1
     152   sniffer_s_rx
       152   -> __aeabi_f2d
       152   -> __aeabi_fdiv
       152   -> __aeabi_memclr4
       152   -> __aeabi_ui2f
       152   -> sniffer_tx
       152   -> sprintf
      16   sniffer_tx
         0   -> USART_ITConfig
        16   -> __aeabi_memmove


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
      12  ?_0
       8  ?_1
      16  ?_2
       4  ?_3
      32  ?_4
     480  sniffer
     148  sniffer_isr
     138  sniffer_m_rx
     218  sniffer_rx_msg
     138  sniffer_s_rx
      62  sniffer_tx

 
 480 bytes in section .bss
   4 bytes in section .rodata
 800 bytes in section .text
 
 800 bytes of CODE  memory
   4 bytes of CONST memory
 480 bytes of DATA  memory

Errors: none
Warnings: 2

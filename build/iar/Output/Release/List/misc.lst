###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       12/Sep/2016  16:26:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ilya\vendicont\arm-periphery\library\STM32F10x_StdPeriph_Driver\src\misc.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\library\STM32F10x_StdPeriph_Driver\src\misc.c
#        -D STM32F10X_HD -D USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\misc.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\misc.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\library\STM32F10x_StdPeriph_Driver\src\misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    misc.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     20            ******************************************************************************
     21            */
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "misc.h"
     25          
     26          /** @addtogroup STM32F10x_StdPeriph_Driver
     27            * @{
     28            */
     29          
     30          /** @defgroup MISC 
     31            * @brief MISC driver modules
     32            * @{
     33            */
     34          
     35          /** @defgroup MISC_Private_TypesDefinitions
     36            * @{
     37            */
     38          
     39          /**
     40            * @}
     41            */ 
     42          
     43          /** @defgroup MISC_Private_Defines
     44            * @{
     45            */
     46          
     47          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     48          /**
     49            * @}
     50            */
     51          
     52          /** @defgroup MISC_Private_Macros
     53            * @{
     54            */
     55          
     56          /**
     57            * @}
     58            */
     59          
     60          /** @defgroup MISC_Private_Variables
     61            * @{
     62            */
     63          
     64          /**
     65            * @}
     66            */
     67          
     68          /** @defgroup MISC_Private_FunctionPrototypes
     69            * @{
     70            */
     71          
     72          /**
     73            * @}
     74            */
     75          
     76          /** @defgroup MISC_Private_Functions
     77            * @{
     78            */
     79          
     80          /**
     81            * @brief  Configures the priority grouping: pre-emption priority and subpriority.
     82            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
     83            *   This parameter can be one of the following values:
     84            *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority
     85            *                                4 bits for subpriority
     86            *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority
     87            *                                3 bits for subpriority
     88            *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority
     89            *                                2 bits for subpriority
     90            *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority
     91            *                                1 bits for subpriority
     92            *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
     93            *                                0 bits for subpriority
     94            * @retval None
     95            */

   \                                 In section .text, align 2, keep-with-next
     96          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
     97          {
     98            /* Check the parameters */
     99            assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
    100            
    101            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    102            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
   \                     NVIC_PriorityGroupConfig: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4  ;; 0x5fa0000
   \   00000002   0x4308             ORRS     R0,R1,R0
   \   00000004   0x....             LDR.N    R1,??DataTable4_1  ;; 0xe000ed0c
   \   00000006   0x6008             STR      R0,[R1, #+0]
    103          }
   \   00000008   0x4770             BX       LR               ;; return
    104          
    105          /**
    106            * @brief  Initializes the NVIC peripheral according to the specified
    107            *         parameters in the NVIC_InitStruct.
    108            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    109            *         the configuration information for the specified NVIC peripheral.
    110            * @retval None
    111            */

   \                                 In section .text, align 2, keep-with-next
    112          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    113          {
   \                     NVIC_Init: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    114            uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    115            
    116            /* Check the parameters */
    117            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
    118            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
    119            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    120              
    121            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
   \   00000002   0x7803             LDRB     R3,[R0, #+0]
   \   00000004   0x78C4             LDRB     R4,[R0, #+3]
   \   00000006   0x461A             MOV      R2,R3
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0xB1EC             CBZ.N    R4,??NVIC_Init_0
    122            {
    123              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    124              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
   \   0000000C   0x....             LDR.N    R3,??DataTable4_1  ;; 0xe000ed0c
   \   0000000E   0x681B             LDR      R3,[R3, #+0]
    125              tmppre = (0x4 - tmppriority);
    126              tmpsub = tmpsub >> tmppriority;
    127          
    128              tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    129              tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    130              tmppriority = tmppriority << 0x04;
    131                  
    132              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
   \   00000010   0x7844             LDRB     R4,[R0, #+1]
   \   00000012   0xF403 0x63E0      AND      R3,R3,#0x700
   \   00000016   0xF5C3 0x63E0      RSB      R3,R3,#+1792
   \   0000001A   0x0A1B             LSRS     R3,R3,#+8
   \   0000001C   0xF1C3 0x0504      RSB      R5,R3,#+4
   \   00000020   0x40AC             LSLS     R4,R4,R5
   \   00000022   0x7885             LDRB     R5,[R0, #+2]
   \   00000024   0x260F             MOVS     R6,#+15
   \   00000026   0x40DE             LSRS     R6,R6,R3
   \   00000028   0xEA06 0x0305      AND      R3,R6,R5
   \   0000002C   0x4323             ORRS     R3,R3,R4
   \   0000002E   0x....             LDR.N    R4,??DataTable4_2  ;; 0xe000e400
   \   00000030   0x011B             LSLS     R3,R3,#+4
   \   00000032   0x5513             STRB     R3,[R2, R4]
    133              
    134              /* Enable the Selected IRQ Channels --------------------------------------*/
    135              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    136                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0xF000 0x021F      AND      R2,R0,#0x1F
   \   0000003A   0x4091             LSLS     R1,R1,R2
   \   0000003C   0x....             LDR.N    R2,??DataTable4_3  ;; 0xe000e100
   \   0000003E   0x0940             LSRS     R0,R0,#+5
   \   00000040   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    137            }
    138            else
    139            {
    140              /* Disable the Selected IRQ Channels -------------------------------------*/
    141              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    142                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    143            }
    144          }
   \   00000044   0xBC70             POP      {R4-R6}
   \   00000046   0x4770             BX       LR
   \                     ??NVIC_Init_0: (+1)
   \   00000048   0xF003 0x001F      AND      R0,R3,#0x1F
   \   0000004C   0xFA01 0xF000      LSL      R0,R1,R0
   \   00000050   0x....             LDR.N    R1,??DataTable4_4  ;; 0xe000e180
   \   00000052   0x0952             LSRS     R2,R2,#+5
   \   00000054   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
   \   00000058   0xBC70             POP      {R4-R6}
   \   0000005A   0x4770             BX       LR               ;; return
    145          
    146          /**
    147            * @brief  Sets the vector table location and Offset.
    148            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    149            *   This parameter can be one of the following values:
    150            *     @arg NVIC_VectTab_RAM
    151            *     @arg NVIC_VectTab_FLASH
    152            * @param  Offset: Vector Table base offset field. This value must be a multiple 
    153            *         of 0x200.
    154            * @retval None
    155            */

   \                                 In section .text, align 2, keep-with-next
    156          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    157          { 
    158            /* Check the parameters */
    159            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
    160            assert_param(IS_NVIC_OFFSET(Offset));  
    161             
    162            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
   \                     NVIC_SetVectorTable: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable4_5  ;; 0x1fffff80
   \   00000002   0x4011             ANDS     R1,R2,R1
   \   00000004   0x4308             ORRS     R0,R1,R0
   \   00000006   0x....             LDR.N    R1,??DataTable4_6  ;; 0xe000ed08
   \   00000008   0x6008             STR      R0,[R1, #+0]
    163          }
   \   0000000A   0x4770             BX       LR               ;; return
    164          
    165          /**
    166            * @brief  Selects the condition for the system to enter low power mode.
    167            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    168            *   This parameter can be one of the following values:
    169            *     @arg NVIC_LP_SEVONPEND
    170            *     @arg NVIC_LP_SLEEPDEEP
    171            *     @arg NVIC_LP_SLEEPONEXIT
    172            * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
    173            * @retval None
    174            */

   \                                 In section .text, align 2, keep-with-next
    175          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    176          {
    177            /* Check the parameters */
    178            assert_param(IS_NVIC_LP(LowPowerMode));
    179            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    180            
    181            if (NewState != DISABLE)
   \                     NVIC_SystemLPConfig: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable4_7  ;; 0xe000ed10
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0x6811             LDR      R1,[R2, #+0]
   \   00000006   0xBF14             ITE      NE 
   \   00000008   0x4308             ORRNE    R0,R0,R1
   \   0000000A   0xEA21 0x0000      BICEQ    R0,R1,R0
    182            {
    183              SCB->SCR |= LowPowerMode;
    184            }
    185            else
    186            {
    187              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
   \   0000000E   0x6010             STR      R0,[R2, #+0]
    188            }
    189          }
   \   00000010   0x4770             BX       LR               ;; return
    190          
    191          /**
    192            * @brief  Configures the SysTick clock source.
    193            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    194            *   This parameter can be one of the following values:
    195            *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    196            *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    197            * @retval None
    198            */

   \                                 In section .text, align 2, keep-with-next
    199          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    200          {
    201            /* Check the parameters */
    202            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
    203            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
   \                     SysTick_CLKSourceConfig: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000e010
   \   00000002   0x2804             CMP      R0,#+4
   \   00000004   0x6808             LDR      R0,[R1, #+0]
   \   00000006   0xBF0C             ITE      EQ 
   \   00000008   0xF040 0x0004      ORREQ    R0,R0,#0x4
   \   0000000C   0xF020 0x0004      BICNE    R0,R0,#0x4
    204            {
    205              SysTick->CTRL |= SysTick_CLKSource_HCLK;
    206            }
    207            else
    208            {
    209              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
   \   00000010   0x6008             STR      R0,[R1, #+0]
    210            }
    211          }
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x05FA0000         DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x1FFFFF80         DC32     0x1fffff80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0xE000E010         DC32     0xe000e010
    212          
    213          /**
    214            * @}
    215            */
    216          
    217          /**
    218            * @}
    219            */
    220          
    221          /**
    222            * @}
    223            */
    224          
    225          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   NVIC_Init
       0   NVIC_PriorityGroupConfig
       0   NVIC_SetVectorTable
       0   NVIC_SystemLPConfig
       0   SysTick_CLKSourceConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
      92  NVIC_Init
      10  NVIC_PriorityGroupConfig
      12  NVIC_SetVectorTable
      18  NVIC_SystemLPConfig
      20  SysTick_CLKSourceConfig

 
 188 bytes in section .text
 
 188 bytes of CODE memory

Errors: none
Warnings: none

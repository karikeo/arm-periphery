###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       19/Oct/2016  13:34:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ilya\vendicont\arm-periphery\Application\p-types\vending\pt-vending.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\p-types\vending\pt-vending.c
#        -D STM32F10X_HD -D USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\pt-vending.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\pt-vending.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\p-types\vending\pt-vending.c
      1          #include "stm32f10x.h"
      2          #include "RTOS.h"
      3          #include "BSP.h"
      4          #include "pt-vending.h"
      5          #include "dex.h"
      6          #include "mdb.h"
      7          #include "stdio.h"
      8          #include "log.h"
      9          
     10          #if defined LCD
     11          #include "lcd_2x16.h"
     12          #endif
     13          #include "spi_comm.h"
     14          #include "mdb_sniffer.h"
     15          #include "..\sw_uart.h"
     16          #include "..\bt.h"
     17          

   \                                 In section .rodata, align 1, keep-with-next
     18          const u8 verMajor = 1;
   \                     verMajor:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1, keep-with-next
     19          const u8 verMinor = 0;
   \                     verMinor:
   \   00000000   0x00               DC8 0
     20          

   \                                 In section .bss, align 4
     21          t_fb_desc fb;
   \                     fb:
   \   00000000                      DS8 716
     22          OS_Q  fb_evt_q;
     23          char fb_evt_q_buf[ 64 ];
     24          
     25          static GPIO_InitTypeDef GPIO_InitStructure;
     26          USART_InitTypeDef USART_InitStructure;
   \                     USART_InitStructure:
   \   000002CC                      DS8 16
   \   000002DC                      DS8 4
   \                     fb_evt_q:
   \   000002E0                      DS8 36
   \                     fb_evt_q_buf:
   \   00000304                      DS8 64
     27          
     28          //extern OS_RSEMA SemaLCD;
     29          //OS_TIMER fbMasterTimer1;
     30          //OS_TIMER fbSlaveTimer1;
     31          OS_TIMER t_fbm_msg_end;
   \                     t_fbm_msg_end:
   \   00000344                      DS8 20
     32          OS_TIMER t_fbs_msg_end;
   \                     t_fbs_msg_end:
   \   00000358                      DS8 20
     33          //OS_TIMER fbSlaveTimer1;
     34          OS_TIMER timer1000;
   \                     timer1000:
   \   0000036C                      DS8 20
     35          
     36          extern OS_TASK TCB2,TCB3;
     37          
     38          #if defined DEX
     39          extern tDex dex;
     40          #elif defined MDB_SNIFFER
     41          extern tMdbSniffer sniffer;
     42          #endif
     43          
     44          extern t_sw_uart sw_uart;
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void timer1000_cb( void )
     47          {
   \                     timer1000_cb: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     48            if (LED2)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable21  ;; 0x40011000
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       GPIO_ReadOutputData
   \   0000000C   0x0600             LSLS     R0,R0,#+24
   \   0000000E   0xD404             BMI.N    ??timer1000_cb_0
     49            {
     50              LED2_OFF;
   \   00000010   0x2180             MOVS     R1,#+128
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       GPIO_SetBits
   \   00000018   0xE003             B.N      ??timer1000_cb_1
     51            }
     52            else
     53            {
     54              LED2_ON;    
   \                     ??timer1000_cb_0: (+1)
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       GPIO_ResetBits
     55              //fb.cashless.display_tr = 1;    
     56            }
     57            OS_RetriggerTimer( &timer1000 );   /* Make timer periodical */  
   \                     ??timer1000_cb_1: (+1)
   \   00000022   0xE8BD 0x4010      POP      {R4,LR}
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000002A   0x.... 0x....      B.W      OS_RetriggerTimer
     58            //mdb_test();  
     59          }
     60          
     61          #if 0
     62          void fbMasterTimeout1( void )
     63          {
     64             fb.m_tmo = 1;
     65             OS_SignalEvent( EVT_FB_M_RX_TMO, &TCB2 );
     66          }
     67          
     68          void fbSlaveTimeout1( void ) {
     69             fb.s_tmo = 1;
     70             OS_SignalEvent( EVT_FB_S_RX_TMO, &TCB2 );
     71          }
     72          #endif
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void fbm_msg_end( void )
     75          {
   \                     fbm_msg_end: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     76            static u8 tr = 0;
     77            fb.m.rx_msg_time = OS_GetTime_us();  
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable21_2
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable21_3
   \   0000000C   0x.... 0x....      BL       OS_GetTime_us
   \   00000010   0x6160             STR      R0,[R4, #+20]
     78            
     79            memmove( sniffer.m.raw.rx, fb.m.rx, fb.m.rx_size * sizeof(fb.m.rx[0]) );
   \   00000012   0xF104 0x01AE      ADD      R1,R4,#+174
   \   00000016   0xF894 0x00AC      LDRB     R0,[R4, #+172]
   \   0000001A   0x0042             LSLS     R2,R0,#+1
   \   0000001C   0xF505 0x709E      ADD      R0,R5,#+316
   \   00000020   0x.... 0x....      BL       __aeabi_memmove
     80            sniffer.m.raw.rx_size = fb.m.rx_size;
   \   00000024   0xF894 0x00AC      LDRB     R0,[R4, #+172]
     81            sniffer.m.raw.time = fb.m.rx_last_time;
     82            
     83            OS_SignalEvent( EVT_FB_M_RX, &TCB2 );
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable21_4
   \   0000002C   0xF885 0x0184      STRB     R0,[R5, #+388]
   \   00000030   0x69A0             LDR      R0,[R4, #+24]
   \   00000032   0xF8C5 0x0188      STR      R0,[R5, #+392]
   \   00000036   0xB001             ADD      SP,SP,#+4
   \   00000038   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   0000003C   0x2004             MOVS     R0,#+4
   \   0000003E   0x.... 0x....      B.W      OS_SignalEvent
     84            if ( fb.m.rx_size > 0 && fb.m.rx[ fb.m.rx_size - 1 ] == 0)
     85            {
     86              tr = 1;
     87            }
     88          }

   \                                 In section .bss, align 1
   \   00000000                      DS8 1
     89          

   \                                 In section .text, align 2, keep-with-next
     90          void fbs_msg_end( void )
     91          {
   \                     fbs_msg_end: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
     92            memmove( sniffer.s.raw.rx, fb.s.rx, fb.s.rx_size * sizeof(fb.s.rx[0]) );
   \   00000002   0x.... 0x....      LDR.W    R5,??DataTable21_2
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable21_3
   \   0000000A   0xB081             SUB      SP,SP,#+4
   \   0000000C   0xF895 0x01BC      LDRB     R0,[R5, #+444]
   \   00000010   0x0042             LSLS     R2,R0,#+1
   \   00000012   0xF505 0x71DF      ADD      R1,R5,#+446
   \   00000016   0xF504 0x70C6      ADD      R0,R4,#+396
   \   0000001A   0x.... 0x....      BL       __aeabi_memmove
     93            sniffer.s.raw.rx_size = fb.s.rx_size;
   \   0000001E   0xF895 0x01BC      LDRB     R0,[R5, #+444]
     94            sniffer.s.raw.time = fb.s.rx_last_time;  
     95            OS_SignalEvent( EVT_FB_S_RX, &TCB2 );
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable21_4
   \   00000026   0xF884 0x01D4      STRB     R0,[R4, #+468]
   \   0000002A   0xF8D5 0x01B8      LDR      R0,[R5, #+440]
   \   0000002E   0xF8C4 0x01D8      STR      R0,[R4, #+472]
   \   00000032   0x2008             MOVS     R0,#+8
   \   00000034   0x.... 0x....      BL       OS_SignalEvent
     96            
     97            memset(fb.s.rx, 0 , fb.s.rx_size);
   \   00000038   0xF895 0x11BC      LDRB     R1,[R5, #+444]
   \   0000003C   0xF505 0x70DF      ADD      R0,R5,#+446
   \   00000040   0x.... 0x....      BL       __aeabi_memclr
     98            fb.s.rx_size = 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xF885 0x01BC      STRB     R0,[R5, #+444]
     99          }
   \   0000004A   0xB001             ADD      SP,SP,#+4
   \   0000004C   0xBD30             POP      {R4,R5,PC}       ;; return
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void Task_vending(void)
    102          {
   \                     Task_vending: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    103            OS_TASK_EVENT evt;
    104            //int i;
    105          
    106            /* LED2 */
    107            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable21_2
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x2080             MOVS     R0,#+128
   \   0000000C   0xF8A4 0x02DC      STRH     R0,[R4, #+732]
    108            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
   \   00000010   0x2014             MOVS     R0,#+20
   \   00000012   0xF884 0x02DF      STRB     R0,[R4, #+735]
    109            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0xF884 0x02DE      STRB     R0,[R4, #+734]
    110            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   0000001C   0xF504 0x7137      ADD      R1,R4,#+732
   \   00000020   0x.... 0x....      LDR.W    R5,??DataTable21  ;; 0x40011000
   \   00000024   0x.... 0x....      ADR.W    R6,?_3
   \   00000028   0x.... 0x....      ADR.W    R8,?_5
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0x.... 0x....      BL       GPIO_Init
    111            LED2_OFF;
   \   00000032   0x2180             MOVS     R1,#+128
   \   00000034   0x4628             MOV      R0,R5
   \   00000036   0x.... 0x....      BL       GPIO_SetBits
    112             
    113             init_fb();
   \   0000003A   0x.... 0x....      BL       init_fb
    114          
    115             OS_CREATETIMER( &timer1000, timer1000_cb, 1000 );
   \   0000003E   0xF44F 0x727A      MOV      R2,#+1000
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable21_5
   \   00000046   0xF504 0x705B      ADD      R0,R4,#+876
   \   0000004A   0x.... 0x....      BL       OS_CreateTimer
   \   0000004E   0xF504 0x705B      ADD      R0,R4,#+876
   \   00000052   0x.... 0x....      BL       OS_StartTimer
    116             //OS_CREATETIMER( &fbMasterTimer1, fbMasterTimeout1, 5000 );
    117             //OS_CREATETIMER( &fbSlaveTimer1, fbSlaveTimeout1, 5000 );
    118             OS_CreateTimer( &t_fbm_msg_end, fbm_msg_end, 4 );
   \   00000056   0x2204             MOVS     R2,#+4
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable21_6
   \   0000005C   0xF504 0x7051      ADD      R0,R4,#+836
   \   00000060   0x.... 0x....      BL       OS_CreateTimer
    119             OS_CreateTimer( &t_fbs_msg_end, fbs_msg_end, 5 );
   \   00000064   0x2205             MOVS     R2,#+5
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable21_7
   \   0000006A   0xF504 0x7056      ADD      R0,R4,#+856
   \   0000006E   0x.... 0x....      BL       OS_CreateTimer
    120          
    121             OS_ARM_ISRSetPrio( USART1_IRQn + 16, 140 );               // Set lowest Priority, ALL BITS set
   \   00000072   0x218C             MOVS     R1,#+140
   \   00000074   0x2035             MOVS     R0,#+53
   \   00000076   0x.... 0x....      BL       OS_ARM_ISRSetPrio
    122             OS_ARM_ISRSetPrio( USART2_IRQn + 16, 140 );               // Set lowest Priority, ALL BITS set
   \   0000007A   0x218C             MOVS     R1,#+140
   \   0000007C   0x2036             MOVS     R0,#+54
   \   0000007E   0x.... 0x....      BL       OS_ARM_ISRSetPrio
    123          
    124             OS_ARM_EnableISR( USART1_IRQn + 16 );
   \   00000082   0x2035             MOVS     R0,#+53
   \   00000084   0x.... 0x....      BL       OS_ARM_EnableISR
    125             OS_ARM_EnableISR( USART2_IRQn + 16 );
   \   00000088   0x2036             MOVS     R0,#+54
   \   0000008A   0x.... 0x....      BL       OS_ARM_EnableISR
    126          
    127             fb.type = eFbType_Unknown;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x6020             STR      R0,[R4, #+0]
    128             fb.m_tmo = 0;
    129             fb.s_tmo = 0;
    130             fb.m.enabled = 0;
    131          
    132             memset( fb_evt_q_buf, 0, sizeof(fb_evt_q_buf) );
   \   00000092   0x2140             MOVS     R1,#+64
   \   00000094   0x6860             LDR      R0,[R4, #+4]
   \   00000096   0x0880             LSRS     R0,R0,#+2
   \   00000098   0x0080             LSLS     R0,R0,#+2
   \   0000009A   0x6060             STR      R0,[R4, #+4]
   \   0000009C   0x7B20             LDRB     R0,[R4, #+12]
   \   0000009E   0xF000 0x00FE      AND      R0,R0,#0xFE
   \   000000A2   0x7320             STRB     R0,[R4, #+12]
   \   000000A4   0xF504 0x7041      ADD      R0,R4,#+772
   \   000000A8   0x.... 0x....      BL       __aeabi_memclr4
    133             OS_Q_Create(&fb_evt_q, &fb_evt_q_buf, sizeof(fb_evt_q_buf));
   \   000000AC   0x2240             MOVS     R2,#+64
   \   000000AE   0xF504 0x7141      ADD      R1,R4,#+772
   \   000000B2   0xF504 0x7038      ADD      R0,R4,#+736
   \   000000B6   0x.... 0x....      BL       OS_Q_Create
    134          
    135             enableLogging();
   \   000000BA   0x.... 0x....      BL       enableLogging
    136             log( "build: %u.%u %s %s\r\n", verMajor, verMinor,__DATE__, __TIME__);
   \   000000BE   0x.... 0x....      ADR.W    R0,?_2
   \   000000C2   0x.... 0x....      ADR.W    R3,?_1
   \   000000C6   0x9000             STR      R0,[SP, #+0]
   \   000000C8   0x2200             MOVS     R2,#+0
   \   000000CA   0x2101             MOVS     R1,#+1
   \   000000CC   0x.... 0x....      ADR.W    R0,?_0
   \   000000D0   0x.... 0x....      BL       log1
    137          
    138                
    139          #if 1
    140             sw_uart.rx.mes = '\r';
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable21_8
   \   000000D8   0x210D             MOVS     R1,#+13
   \   000000DA   0xF880 0x1045      STRB     R1,[R0, #+69]
    141             sw_uart.rx.handler = bt_rx_msg_handler;
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable21_9
   \   000000E2   0x6481             STR      R1,[R0, #+72]
    142             
    143             OS_Delay (500);      
   \   000000E4   0xF44F 0x70FA      MOV      R0,#+500
   \   000000E8   0x.... 0x....      BL       OS_Delay
    144          
    145             sw_uart_tx("AT\r\n", 4);  
   \   000000EC   0x2104             MOVS     R1,#+4
   \   000000EE   0x4630             MOV      R0,R6
   \   000000F0   0x.... 0x....      BL       sw_uart_tx
    146             OS_Delay (500);
   \   000000F4   0xF44F 0x70FA      MOV      R0,#+500
   \   000000F8   0x.... 0x....      BL       OS_Delay
    147             
    148             HC05_CONF_ON;   
   \   000000FC   0x2120             MOVS     R1,#+32
   \   000000FE   0x4628             MOV      R0,R5
   \   00000100   0x.... 0x....      BL       GPIO_SetBits
    149             OS_Delay (50);   
   \   00000104   0x2032             MOVS     R0,#+50
   \   00000106   0x.... 0x....      BL       OS_Delay
    150             
    151             sw_uart_tx("AT+NAME=VENDICONT\r\n", 19);
   \   0000010A   0x2113             MOVS     R1,#+19
   \   0000010C   0x.... 0x....      ADR.W    R0,?_4
   \   00000110   0x.... 0x....      BL       sw_uart_tx
    152             OS_Delay (500);
   \   00000114   0xF44F 0x70FA      MOV      R0,#+500
   \   00000118   0x.... 0x....      BL       OS_Delay
    153                   
    154             //sw_uart_tx("AT+ADDR?\r\n", 10);  
    155             //sw_uart_tx("AT+PSWD?\r\n", 10);  
    156             //OS_Delay (500);
    157             
    158             
    159             HC05_CONF_OFF;
   \   0000011C   0x2120             MOVS     R1,#+32
   \   0000011E   0x4628             MOV      R0,R5
   \   00000120   0x.... 0x....      BL       GPIO_ResetBits
    160             OS_Delay (500);
   \   00000124   0xF44F 0x70FA      MOV      R0,#+500
   \   00000128   0x.... 0x....      BL       OS_Delay
    161             
    162             sw_uart_tx("AT\r\n", 4);  
   \   0000012C   0x2104             MOVS     R1,#+4
   \   0000012E   0x4630             MOV      R0,R6
   \   00000130   0x.... 0x....      BL       sw_uart_tx
    163             OS_Delay (500);
   \   00000134   0xF44F 0x70FA      MOV      R0,#+500
   \   00000138   0x.... 0x....      BL       OS_Delay
    164             
    165             sw_uart_tx("AT\r\n", 4);  
   \   0000013C   0x2104             MOVS     R1,#+4
   \   0000013E   0x4630             MOV      R0,R6
   \   00000140   0x.... 0x....      BL       sw_uart_tx
    166             OS_Delay (500);
   \   00000144   0xF44F 0x70FA      MOV      R0,#+500
   \   00000148   0x.... 0x....      BL       OS_Delay
    167             
    168             
    169          #endif
    170             
    171             sw_uart_reset_buffers();
   \   0000014C   0x.... 0x....      BL       sw_uart_reset_buffers
    172             
    173             fb.s.rx_size = 0;
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0xF884 0x01BC      STRB     R0,[R4, #+444]
    174             memset(fb.s.rx,0,sizeof(fb.s.rx));
   \   00000156   0x2180             MOVS     R1,#+128
   \   00000158   0xF504 0x70DF      ADD      R0,R4,#+446
   \   0000015C   0x.... 0x....      BL       __aeabi_memclr
    175             fb.m.rx_size = 0;   
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0xF884 0x00AC      STRB     R0,[R4, #+172]
    176             memset(fb.m.rx,0,sizeof(fb.m.rx));
   \   00000166   0x2180             MOVS     R1,#+128
   \   00000168   0xF104 0x00AE      ADD      R0,R4,#+174
   \   0000016C   0x.... 0x....      BL       __aeabi_memclr
    177             
    178             OS_RetriggerTimer( &timer1000 );
   \   00000170   0xF504 0x705B      ADD      R0,R4,#+876
   \   00000174   0x.... 0x....      BL       OS_RetriggerTimer
    179             //OS_StartTimer( &fbMasterTimer1 );
    180             //OS_StartTimer( &fbSlaveTimer1 );
    181             
    182             fb.m.enabled = 1;
   \   00000178   0x7B20             LDRB     R0,[R4, #+12]
   \   0000017A   0x.... 0x....      ADR.W    R5,?_6
   \   0000017E   0x.... 0x....      ADR.W    R6,?_7
   \   00000182   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000186   0x7320             STRB     R0,[R4, #+12]
   \   00000188   0xE019             B.N      ??Task_vending_0
    183          
    184             while (1) {
    185          
    186                evt = OS_WaitEvent( //EVT_FB_EMU
    187                                  //| EVT_DEX_DRD
    188                                  //| 
    189                                    EVT_FB_M_RX
    190                                  | EVT_FB_S_RX
    191                                  //| EVT_FB_M_RX_TMO
    192                                  //| EVT_FB_S_RX_TMO
    193                                  //| EVT_DEX_START
    194                                  //| EVT_DEX_ABORT 
    195                                    );
    196          
    197          
    198                if ( evt & EVT_FB_EMU ) {
    199                   u32 evtType = 0;
    200                   log( "fb_emu_evt=%d\r\n", fb.emu_evt );
    201                   switch ( fb.emu_evt ) {
    202                      case eFbEvtType_FbType:
    203                         break;
    204                      case eFbEvtType_DoorOpen:
    205                         evtType = eFbEvtType_DoorOpen;
    206                         OS_Q_Put( &fb_evt_q, &evtType, sizeof( evtType ) );
    207                         log( "fb: door open\r\n" );
    208                         break;
    209                      case eFbEvtType_DoorClose:
    210                         evtType = eFbEvtType_DoorClose;
   \                     ??Task_vending_1: (+1)
   \   0000018A   0x9000             STR      R0,[SP, #+0]
    211                         OS_Q_Put( &fb_evt_q, &evtType, sizeof( evtType ) );
   \   0000018C   0x2204             MOVS     R2,#+4
   \   0000018E   0x4669             MOV      R1,SP
   \   00000190   0xF504 0x7038      ADD      R0,R4,#+736
   \   00000194   0x.... 0x....      BL       OS_Q_Put
    212                         log( "fb: door close\r\n" );
   \   00000198   0x4630             MOV      R0,R6
   \                     ??Task_vending_2: (+1)
   \   0000019A   0x.... 0x....      BL       log1
    213                         break;
    214                   }
    215                   fb.emu_evt = 0;
   \                     ??Task_vending_3: (+1)
   \   0000019E   0x2000             MOVS     R0,#+0
   \   000001A0   0x60A0             STR      R0,[R4, #+8]
    216                }
    217          
    218                if ( evt & EVT_FB_M_RX_TMO ) {
    219                   //log("fb_tx timeout\r\n");
    220                }
    221          
    222                if ( evt & EVT_FB_S_RX_TMO ) {
    223                   //log("fb_rx timeout\r\n");
    224                }
    225          
    226                if ( evt & EVT_FB_M_RX )
   \                     ??Task_vending_4: (+1)
   \   000001A2   0x0778             LSLS     R0,R7,#+29
   \   000001A4   0xBF48             IT       MI 
    227                {
    228                  //mdb_evt_m_rx();
    229          #if defined ( MDB_SNIFFER )
    230                  sniffer_m_rx();
   \   000001A6   0x.... 0x....      BLMI     sniffer_m_rx
    231          #endif          
    232                }
    233          
    234                if ( evt & EVT_FB_S_RX )
   \   000001AA   0x0738             LSLS     R0,R7,#+28
   \   000001AC   0xBF48             IT       MI 
    235                {
    236                  //mdb_evt_s_rx();
    237          #if defined ( MDB_SNIFFER )
    238                  sniffer_s_rx();
   \   000001AE   0x.... 0x....      BLMI     sniffer_s_rx
    239          #endif        
    240                }
    241                
    242                if ( fb.en_log != fb.prev_en_log ) {
    243                   //log( "fb mon is reset, %d\r\n", sizeof(mdb_mon) );
    244                }
    245          
    246                fb.prev_en_log = fb.en_log;
   \   000001B2   0x6860             LDR      R0,[R4, #+4]
   \   000001B4   0x6861             LDR      R1,[R4, #+4]
   \   000001B6   0x0880             LSRS     R0,R0,#+2
   \   000001B8   0xF360 0x01C3      BFI      R1,R0,#+3,#+1
   \   000001BC   0x6061             STR      R1,[R4, #+4]
   \                     ??Task_vending_0: (+1)
   \   000001BE   0x200C             MOVS     R0,#+12
   \   000001C0   0x.... 0x....      BL       OS_WaitEvent
   \   000001C4   0x4607             MOV      R7,R0
   \   000001C6   0x07F8             LSLS     R0,R7,#+31
   \   000001C8   0xD5EB             BPL.N    ??Task_vending_4
   \   000001CA   0x2000             MOVS     R0,#+0
   \   000001CC   0x9000             STR      R0,[SP, #+0]
   \   000001CE   0x4640             MOV      R0,R8
   \   000001D0   0x68A1             LDR      R1,[R4, #+8]
   \   000001D2   0x.... 0x....      BL       log1
   \   000001D6   0x68A0             LDR      R0,[R4, #+8]
   \   000001D8   0x2802             CMP      R0,#+2
   \   000001DA   0xD002             BEQ.N    ??Task_vending_5
   \   000001DC   0x2803             CMP      R0,#+3
   \   000001DE   0xD0D4             BEQ.N    ??Task_vending_1
   \   000001E0   0xE7DD             B.N      ??Task_vending_3
   \                     ??Task_vending_5: (+1)
   \   000001E2   0x9000             STR      R0,[SP, #+0]
   \   000001E4   0x2204             MOVS     R2,#+4
   \   000001E6   0x4669             MOV      R1,SP
   \   000001E8   0xF504 0x7038      ADD      R0,R4,#+736
   \   000001EC   0x.... 0x....      BL       OS_Q_Put
   \   000001F0   0x4628             MOV      R0,R5
   \   000001F2   0xE7D2             B.N      ??Task_vending_2
    247             }
    248          }
    249          
    250          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    251          void init_fb( void ) 
    252          {  
   \                     init_fb: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    253             /* Configure USART2 Tx (PA.2) as alternate function push-pull */
    254             GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable21_2
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0xF8A4 0x02DC      STRH     R0,[R4, #+732]
    255             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0xF884 0x02DE      STRB     R0,[R4, #+734]
    256             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000014   0x2018             MOVS     R0,#+24
   \   00000016   0xF884 0x02DF      STRB     R0,[R4, #+735]
    257             GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000001A   0xF504 0x7137      ADD      R1,R4,#+732
   \   0000001E   0x.... 0x....      LDR.W    R5,??DataTable21_10  ;; 0x40010800
   \   00000022   0x.... 0x....      LDR.W    R6,??DataTable21_11  ;; 0x40004400
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0x.... 0x....      BL       GPIO_Init
    258          
    259             /* Configure USART1 Tx (PA.9) as alternate function push-pull */
    260             GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \   0000002C   0xF44F 0x7000      MOV      R0,#+512
   \   00000030   0xF8A4 0x02DC      STRH     R0,[R4, #+732]
    261             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    262             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    263             GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000034   0xF504 0x7137      ADD      R1,R4,#+732
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0xF884 0x02DE      STRB     R0,[R4, #+734]
   \   0000003E   0xF240 0x5725      MOVW     R7,#+1317
   \   00000042   0x2018             MOVS     R0,#+24
   \   00000044   0xF884 0x02DF      STRB     R0,[R4, #+735]
   \   00000048   0x4628             MOV      R0,R5
   \   0000004A   0x.... 0x....      BL       GPIO_Init
    264            
    265             USART_Cmd( USART1, DISABLE );
   \   0000004E   0x.... 0x....      LDR.W    R5,??DataTable21_12  ;; 0x40013800
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x4628             MOV      R0,R5
   \   00000056   0x.... 0x....      BL       USART_Cmd
    266             USART_Cmd( USART2, DISABLE );
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x4630             MOV      R0,R6
   \   0000005E   0x.... 0x....      BL       USART_Cmd
    267          
    268             USART_DeInit( USART1 );
   \   00000062   0x4628             MOV      R0,R5
   \   00000064   0x.... 0x....      BL       USART_DeInit
    269             USART_DeInit( USART2 );
   \   00000068   0x4630             MOV      R0,R6
   \   0000006A   0x.... 0x....      BL       USART_DeInit
    270          
    271             USART_InitStructure.USART_BaudRate = 9600;
   \   0000006E   0xF44F 0x5016      MOV      R0,#+9600
   \   00000072   0xF8C4 0x02CC      STR      R0,[R4, #+716]
    272             USART_InitStructure.USART_WordLength = USART_WordLength_9b;
    273             USART_InitStructure.USART_StopBits = USART_StopBits_1;
    274             USART_InitStructure.USART_Parity = USART_Parity_No;
    275             USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    276             USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    277             USART_Init(USART1, &USART_InitStructure);
   \   00000076   0xF504 0x7133      ADD      R1,R4,#+716
   \   0000007A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000007E   0xF8A4 0x02D0      STRH     R0,[R4, #+720]
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xF8A4 0x02D2      STRH     R0,[R4, #+722]
   \   00000088   0xF8A4 0x02D4      STRH     R0,[R4, #+724]
   \   0000008C   0xF8A4 0x02D8      STRH     R0,[R4, #+728]
   \   00000090   0x200C             MOVS     R0,#+12
   \   00000092   0xF8A4 0x02D6      STRH     R0,[R4, #+726]
   \   00000096   0x4628             MOV      R0,R5
   \   00000098   0x.... 0x....      BL       USART_Init
    278             USART_Init(USART2, &USART_InitStructure);   
   \   0000009C   0xF504 0x7133      ADD      R1,R4,#+716
   \   000000A0   0x4630             MOV      R0,R6
   \   000000A2   0x.... 0x....      BL       USART_Init
    279             
    280             //USART_ITConfig( USART1, USART_IT_TXE, ENABLE );
    281             USART_ITConfig( USART2, USART_IT_TXE, ENABLE );
   \   000000A6   0x2201             MOVS     R2,#+1
   \   000000A8   0xF240 0x7127      MOVW     R1,#+1831
   \   000000AC   0x4630             MOV      R0,R6
   \   000000AE   0x.... 0x....      BL       USART_ITConfig
    282             //USART_ITConfig( USART1, USART_IT_TC, ENABLE );   
    283             //USART_ITConfig( USART2, USART_IT_TC, ENABLE );
    284             USART_ITConfig( USART1, USART_IT_RXNE, ENABLE );
   \   000000B2   0x2201             MOVS     R2,#+1
   \   000000B4   0x4639             MOV      R1,R7
   \   000000B6   0x4628             MOV      R0,R5
   \   000000B8   0x.... 0x....      BL       USART_ITConfig
    285             USART_ITConfig( USART2, USART_IT_RXNE, ENABLE );
   \   000000BC   0x2201             MOVS     R2,#+1
   \   000000BE   0x4639             MOV      R1,R7
   \   000000C0   0x4630             MOV      R0,R6
   \   000000C2   0x.... 0x....      BL       USART_ITConfig
    286             
    287             USART_Init( USART1, &USART_InitStructure );
   \   000000C6   0xF504 0x7133      ADD      R1,R4,#+716
   \   000000CA   0x4628             MOV      R0,R5
   \   000000CC   0x.... 0x....      BL       USART_Init
    288             USART_Init( USART2, &USART_InitStructure );
   \   000000D0   0xF504 0x7133      ADD      R1,R4,#+716
   \   000000D4   0x4630             MOV      R0,R6
   \   000000D6   0x.... 0x....      BL       USART_Init
    289          
    290             USART_Cmd( USART1, ENABLE );
   \   000000DA   0x2101             MOVS     R1,#+1
   \   000000DC   0x4628             MOV      R0,R5
   \   000000DE   0x.... 0x....      BL       USART_Cmd
    291             USART_Cmd( USART2, ENABLE );
   \   000000E2   0x4630             MOV      R0,R6
   \   000000E4   0xB001             ADD      SP,SP,#+4
   \   000000E6   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   000000EA   0x2101             MOVS     R1,#+1
   \   000000EC   0x.... 0x....      B.W      USART_Cmd
    292          }
    293          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    294          void fb_s_tx( u16* p, u16 sz )
    295          {
   \                     fb_s_tx: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    296            memmove( &fb.s.tx[ fb.s.tx_size ], p, sz * sizeof(*p) );  
   \   00000002   0x.... 0x....      LDR.W    R5,??DataTable21_2
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x460C             MOV      R4,R1
   \   0000000A   0x4601             MOV      R1,R0
   \   0000000C   0xF895 0x023E      LDRB     R0,[R5, #+574]
   \   00000010   0xEB05 0x0040      ADD      R0,R5,R0, LSL #+1
   \   00000014   0x0062             LSLS     R2,R4,#+1
   \   00000016   0xF500 0x7010      ADD      R0,R0,#+576
   \   0000001A   0x.... 0x....      BL       __aeabi_memmove
    297            fb.s.tx_size += sz;  
   \   0000001E   0xF895 0x023E      LDRB     R0,[R5, #+574]
   \   00000022   0x1820             ADDS     R0,R4,R0
   \   00000024   0xF885 0x023E      STRB     R0,[R5, #+574]
    298            USART_ITConfig( USART1, USART_IT_TXE , ENABLE );
   \   00000028   0xB001             ADD      SP,SP,#+4
   \   0000002A   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0xF240 0x7127      MOVW     R1,#+1831
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable21_12  ;; 0x40013800
   \   00000038   0x.... 0x....      B.W      USART_ITConfig
    299          }
    300          

   \                                 In section .text, align 2, keep-with-next
    301          void fb_m_tx( u16* p, u16 sz )
    302          {
   \                     fb_m_tx: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    303            memcpy( &fb.m.tx[ fb.m.tx_size ], p, sz * sizeof(*p));  
   \   00000002   0x.... 0x....      LDR.W    R5,??DataTable21_2
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x460C             MOV      R4,R1
   \   0000000A   0x4601             MOV      R1,R0
   \   0000000C   0xF895 0x012E      LDRB     R0,[R5, #+302]
   \   00000010   0xEB05 0x0040      ADD      R0,R5,R0, LSL #+1
   \   00000014   0x0062             LSLS     R2,R4,#+1
   \   00000016   0xF500 0x7098      ADD      R0,R0,#+304
   \   0000001A   0x.... 0x....      BL       __aeabi_memcpy
    304            fb.m.tx_size += sz;
   \   0000001E   0xF895 0x012E      LDRB     R0,[R5, #+302]
   \   00000022   0x1820             ADDS     R0,R4,R0
   \   00000024   0xF885 0x012E      STRB     R0,[R5, #+302]
    305            USART_ITConfig( USART2, USART_IT_TXE , ENABLE );
   \   00000028   0xB001             ADD      SP,SP,#+4
   \   0000002A   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0xF240 0x7127      MOVW     R1,#+1831
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable21_11  ;; 0x40004400
   \   00000038   0x.... 0x....      B.W      USART_ITConfig
    306          }
    307          
    308          /* USART1 Interrupt ----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    309          __irq void USART1_IRQHandler(void) {
   \                     USART1_IRQHandler: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    310          
    311            OS_EnterNestableInterrupt();
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable21_13
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable21_14
    312          
    313            if ( USART_GetFlagStatus( USART1, USART_FLAG_ORE ) )
   \   0000000C   0x.... 0x....      LDR.W    R6,??DataTable21_12  ;; 0x40013800
   \   00000010   0xB082             SUB      SP,SP,#+8
   \   00000012   0x7820             LDRB     R0,[R4, #+0]
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x7020             STRB     R0,[R4, #+0]
   \   00000018   0x2108             MOVS     R1,#+8
   \   0000001A   0x7828             LDRB     R0,[R5, #+0]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x7028             STRB     R0,[R5, #+0]
   \   00000020   0x4630             MOV      R0,R6
   \   00000022   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000026   0xB118             CBZ.N    R0,??USART1_IRQHandler_0
    314            {
    315              USART_ClearFlag( USART1, USART_FLAG_ORE );
   \   00000028   0x2108             MOVS     R1,#+8
   \   0000002A   0x4630             MOV      R0,R6
   \   0000002C   0x.... 0x....      BL       USART_ClearFlag
    316            }
    317            if ( USART_GetFlagStatus( USART1, USART_FLAG_FE ) )
   \                     ??USART1_IRQHandler_0: (+1)
   \   00000030   0x2102             MOVS     R1,#+2
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000038   0xB118             CBZ.N    R0,??USART1_IRQHandler_1
    318            {
    319              USART_ClearFlag( USART1, USART_FLAG_FE );
   \   0000003A   0x2102             MOVS     R1,#+2
   \   0000003C   0x4630             MOV      R0,R6
   \   0000003E   0x.... 0x....      BL       USART_ClearFlag
    320            }
    321            if ( USART_GetFlagStatus( USART1, USART_FLAG_NE ) )
   \                     ??USART1_IRQHandler_1: (+1)
   \   00000042   0x2104             MOVS     R1,#+4
   \   00000044   0x4630             MOV      R0,R6
   \   00000046   0x.... 0x....      BL       USART_GetFlagStatus
   \   0000004A   0xB118             CBZ.N    R0,??USART1_IRQHandler_2
    322            {
    323              USART_ClearFlag( USART1, USART_FLAG_NE );
   \   0000004C   0x2104             MOVS     R1,#+4
   \   0000004E   0x4630             MOV      R0,R6
   \   00000050   0x.... 0x....      BL       USART_ClearFlag
    324            }
    325            if ( USART_GetFlagStatus( USART1, USART_FLAG_PE ) )
   \                     ??USART1_IRQHandler_2: (+1)
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x4630             MOV      R0,R6
   \   00000058   0x.... 0x....      BL       USART_GetFlagStatus
   \   0000005C   0xB118             CBZ.N    R0,??USART1_IRQHandler_3
    326            {
    327              USART_ClearFlag( USART1, USART_FLAG_PE );
   \   0000005E   0x2101             MOVS     R1,#+1
   \   00000060   0x4630             MOV      R0,R6
   \   00000062   0x.... 0x....      BL       USART_ClearFlag
    328            }
    329            
    330            if ( USART_GetFlagStatus( USART1, USART_FLAG_RXNE ) )
   \                     ??USART1_IRQHandler_3: (+1)
   \   00000066   0x2120             MOVS     R1,#+32
   \   00000068   0x4630             MOV      R0,R6
   \   0000006A   0x.... 0x....      BL       USART_GetFlagStatus
   \   0000006E   0xB360             CBZ.N    R0,??USART1_IRQHandler_4
    331            {
    332              u32 curr_time = OS_GetTime_us();    
   \   00000070   0x.... 0x....      BL       OS_GetTime_us
   \   00000074   0x4680             MOV      R8,R0
    333              volatile u16 b = USART_ReceiveData( USART1 );
   \   00000076   0x4630             MOV      R0,R6
   \   00000078   0x.... 0x....      BL       USART_ReceiveData
   \   0000007C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    334              if ( fb.s.rx_size < MDB_MAX_LEN )
   \   00000080   0x.... 0x....      LDR.W    R7,??DataTable21_2
   \   00000084   0xF897 0x01BC      LDRB     R0,[R7, #+444]
   \   00000088   0x2824             CMP      R0,#+36
   \   0000008A   0xDA10             BGE.N    ??USART1_IRQHandler_5
    335              {
    336                fb.s.rx[ fb.s.rx_size++ ] = b;
   \   0000008C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000090   0xEB07 0x0040      ADD      R0,R7,R0, LSL #+1
   \   00000094   0xF8A0 0x11BE      STRH     R1,[R0, #+446]
    337                fb.s.rx_last_time = curr_time;
   \   00000098   0xF8C7 0x81B8      STR      R8,[R7, #+440]
   \   0000009C   0xF897 0x01BC      LDRB     R0,[R7, #+444]
   \   000000A0   0x1C40             ADDS     R0,R0,#+1
   \   000000A2   0xF887 0x01BC      STRB     R0,[R7, #+444]
    338                if ( fb.s.rx_size == 0 )
   \   000000A6   0xB2C0             UXTB     R0,R0
   \   000000A8   0xB908             CBNZ.N   R0,??USART1_IRQHandler_5
    339                {
    340                  fb.s.rx_start_time = curr_time;        
   \   000000AA   0xF8C7 0x81B0      STR      R8,[R7, #+432]
    341                }
    342              }
    343          
    344              fb.s_tmo = 0;
   \                     ??USART1_IRQHandler_5: (+1)
   \   000000AE   0x6878             LDR      R0,[R7, #+4]
   \   000000B0   0xF020 0x0002      BIC      R0,R0,#0x2
   \   000000B4   0x6078             STR      R0,[R7, #+4]
    345              
    346              if ( b & MDB_MODE_MASK )
   \   000000B6   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000BA   0x05C0             LSLS     R0,R0,#+23
   \   000000BC   0xBF48             IT       MI 
   \   000000BE   0xF8C7 0x81B4      STRMI    R8,[R7, #+436]
    347              {
    348                fb.s.rx_msg_time = curr_time;
    349                //OS_StopTimer( &t_fbs_msg_end );
    350                //fbs_msg_end();
    351              }
    352              //else
    353              //{
    354                OS_RetriggerTimer( &t_fbs_msg_end );      
   \   000000C2   0xF507 0x7056      ADD      R0,R7,#+856
   \   000000C6   0x.... 0x....      BL       OS_RetriggerTimer
    355              //}   
    356            }
    357          
    358            //Transmit
    359            if ( USART_GetFlagStatus( USART1, USART_FLAG_TXE ) && ( USART_GetITStatus( USART1, USART_IT_TXE ) == SET ) )
   \                     ??USART1_IRQHandler_4: (+1)
   \   000000CA   0x2180             MOVS     R1,#+128
   \   000000CC   0x4630             MOV      R0,R6
   \   000000CE   0x.... 0x....      BL       USART_GetFlagStatus
   \   000000D2   0xB340             CBZ.N    R0,??USART1_IRQHandler_6
   \   000000D4   0xF240 0x7827      MOVW     R8,#+1831
   \   000000D8   0x4641             MOV      R1,R8
   \   000000DA   0x4630             MOV      R0,R6
   \   000000DC   0x.... 0x....      BL       USART_GetITStatus
   \   000000E0   0x2801             CMP      R0,#+1
   \   000000E2   0xD120             BNE.N    ??USART1_IRQHandler_6
    360            {
    361              if( fb.s.tx_size > 0 ) 
   \   000000E4   0x....             LDR.N    R7,??DataTable21_2
   \   000000E6   0xF897 0x023E      LDRB     R0,[R7, #+574]
   \   000000EA   0xB1A8             CBZ.N    R0,??USART1_IRQHandler_7
    362              {
    363                volatile u16 b =  fb.s.tx[ fb.s.tx_cnt++ ];
   \   000000EC   0xF897 0x023F      LDRB     R0,[R7, #+575]
   \   000000F0   0xEB07 0x0140      ADD      R1,R7,R0, LSL #+1
   \   000000F4   0x1C40             ADDS     R0,R0,#+1
   \   000000F6   0xF8B1 0x1240      LDRH     R1,[R1, #+576]
   \   000000FA   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   \   000000FE   0xF887 0x023F      STRB     R0,[R7, #+575]
    364                USART_SendData( USART1, b );
   \   00000102   0x4630             MOV      R0,R6
   \   00000104   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000108   0x.... 0x....      BL       USART_SendData
    365                fb.s.tx_size--;
   \   0000010C   0xF897 0x023E      LDRB     R0,[R7, #+574]
   \   00000110   0x1E40             SUBS     R0,R0,#+1
   \   00000112   0xF887 0x023E      STRB     R0,[R7, #+574]
   \   00000116   0xE006             B.N      ??USART1_IRQHandler_6
    366              }
    367              else if( fb.s.tx_size == 0 ) 
    368              {
    369                fb.s.tx_cnt = 0;
   \                     ??USART1_IRQHandler_7: (+1)
   \   00000118   0xF887 0x023F      STRB     R0,[R7, #+575]
    370                USART_ITConfig( USART1, USART_IT_TXE , DISABLE );         
   \   0000011C   0x2200             MOVS     R2,#+0
   \   0000011E   0x4641             MOV      R1,R8
   \   00000120   0x4630             MOV      R0,R6
   \   00000122   0x.... 0x....      BL       USART_ITConfig
    371              }  
    372            }
    373          
    374            OS_LeaveNestableInterrupt();
   \                     ??USART1_IRQHandler_6: (+1)
   \   00000126   0x2080             MOVS     R0,#+128
   \   00000128   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000012C   0xBF00             Nop      
   \   0000012E   0xBF00             Nop      
   \   00000130   0x7820             LDRB     R0,[R4, #+0]
   \   00000132   0x1E40             SUBS     R0,R0,#+1
   \   00000134   0x7020             STRB     R0,[R4, #+0]
   \   00000136   0x7828             LDRB     R0,[R5, #+0]
   \   00000138   0x2801             CMP      R0,#+1
   \   0000013A   0xD103             BNE.N    ??USART1_IRQHandler_8
   \   0000013C   0x6868             LDR      R0,[R5, #+4]
   \   0000013E   0xB108             CBZ.N    R0,??USART1_IRQHandler_8
   \   00000140   0x.... 0x....      BL       OS_SwitchFromInt
   \                     ??USART1_IRQHandler_8: (+1)
   \   00000144   0x7828             LDRB     R0,[R5, #+0]
   \   00000146   0x1E40             SUBS     R0,R0,#+1
   \   00000148   0x7028             STRB     R0,[R5, #+0]
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0xF380 0x8811      MSR      BASEPRI,R0
    375          }
   \   00000150   0xB002             ADD      SP,SP,#+8
   \   00000152   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    376          ////////////////////////////////////////////////////////////////////////////////
    377          /* USART2 Interrupt ----------------------------------------------*/
    378          //Tx Loop

   \                                 In section .text, align 2, keep-with-next
    379          __irq void USART2_IRQHandler(void)
    380          {
   \                     USART2_IRQHandler: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    381            static u8 tr = 0;
    382          
    383            OS_EnterNestableInterrupt();
   \   00000004   0x....             LDR.N    R4,??DataTable21_13
   \   00000006   0x....             LDR.N    R5,??DataTable21_14
    384            //OS_EnterInterrupt();
    385             
    386            if ( USART_GetFlagStatus( USART2, USART_FLAG_ORE ) )
   \   00000008   0x.... 0x....      LDR.W    R8,??DataTable21_11  ;; 0x40004400
   \   0000000C   0xB082             SUB      SP,SP,#+8
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0x7020             STRB     R0,[R4, #+0]
   \   00000014   0x2108             MOVS     R1,#+8
   \   00000016   0x7828             LDRB     R0,[R5, #+0]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x7028             STRB     R0,[R5, #+0]
   \   0000001C   0x4640             MOV      R0,R8
   \   0000001E   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000022   0xB118             CBZ.N    R0,??USART2_IRQHandler_0
    387            {
    388              USART_ClearFlag(USART2,USART_FLAG_ORE);
   \   00000024   0x2108             MOVS     R1,#+8
   \   00000026   0x4640             MOV      R0,R8
   \   00000028   0x.... 0x....      BL       USART_ClearFlag
    389            }
    390            if ( USART_GetFlagStatus( USART2, USART_FLAG_FE ) )
   \                     ??USART2_IRQHandler_0: (+1)
   \   0000002C   0x2102             MOVS     R1,#+2
   \   0000002E   0x4640             MOV      R0,R8
   \   00000030   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000034   0xB118             CBZ.N    R0,??USART2_IRQHandler_1
    391            {
    392              USART_ClearFlag(USART2,USART_FLAG_FE);
   \   00000036   0x2102             MOVS     R1,#+2
   \   00000038   0x4640             MOV      R0,R8
   \   0000003A   0x.... 0x....      BL       USART_ClearFlag
    393            }
    394            if ( USART_GetFlagStatus( USART2, USART_FLAG_NE ) )
   \                     ??USART2_IRQHandler_1: (+1)
   \   0000003E   0x2104             MOVS     R1,#+4
   \   00000040   0x4640             MOV      R0,R8
   \   00000042   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000046   0xB118             CBZ.N    R0,??USART2_IRQHandler_2
    395            {
    396              USART_ClearFlag(USART2,USART_FLAG_NE);
   \   00000048   0x2104             MOVS     R1,#+4
   \   0000004A   0x4640             MOV      R0,R8
   \   0000004C   0x.... 0x....      BL       USART_ClearFlag
    397            }
    398            if ( USART_GetFlagStatus( USART2, USART_FLAG_PE ) )
   \                     ??USART2_IRQHandler_2: (+1)
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000058   0xB118             CBZ.N    R0,??USART2_IRQHandler_3
    399            {
    400              USART_ClearFlag(USART2,USART_FLAG_PE);
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x4640             MOV      R0,R8
   \   0000005E   0x.... 0x....      BL       USART_ClearFlag
    401            }
    402            if ( USART_GetFlagStatus( USART2, USART_FLAG_LBD ) )
   \                     ??USART2_IRQHandler_3: (+1)
   \   00000062   0xF44F 0x7180      MOV      R1,#+256
   \   00000066   0x4640             MOV      R0,R8
   \   00000068   0x.... 0x....      BL       USART_GetFlagStatus
   \   0000006C   0xB120             CBZ.N    R0,??USART2_IRQHandler_4
    403            {
    404              USART_ClearFlag(USART2,USART_FLAG_LBD);
   \   0000006E   0xF44F 0x7180      MOV      R1,#+256
   \   00000072   0x4640             MOV      R0,R8
   \   00000074   0x.... 0x....      BL       USART_ClearFlag
    405            }
    406                
    407            if ( USART_GetFlagStatus( USART2, USART_FLAG_RXNE ) )
   \                     ??USART2_IRQHandler_4: (+1)
   \   00000078   0x2120             MOVS     R1,#+32
   \   0000007A   0x4640             MOV      R0,R8
   \   0000007C   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD042             BEQ.N    ??USART2_IRQHandler_5
    408            {
    409              u8 skip = 0;
    410              //USART_ClearFlag(USART2,USART_FLAG_RXNE);
    411              volatile u16 b = USART_ReceiveData(USART2);
   \   00000084   0x4640             MOV      R0,R8
   \   00000086   0x.... 0x....      BL       USART_ReceiveData
   \   0000008A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    412              u32 curr_time = OS_GetTime_us();
   \   0000008E   0x.... 0x....      BL       OS_GetTime_us
   \   00000092   0x4606             MOV      R6,R0
    413              if ( ( b & MDB_MODE_MASK ) || fb.m.rx_size >= MDB_MAX_LEN )
   \   00000094   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000098   0x....             LDR.N    R7,??DataTable21_2
   \   0000009A   0x05C0             LSLS     R0,R0,#+23
   \   0000009C   0xD403             BMI.N    ??USART2_IRQHandler_6
   \   0000009E   0xF897 0x00AC      LDRB     R0,[R7, #+172]
   \   000000A2   0x2824             CMP      R0,#+36
   \   000000A4   0xDB10             BLT.N    ??USART2_IRQHandler_7
    414              {
    415                fb.m.rx_size = 0;
   \                     ??USART2_IRQHandler_6: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xF887 0x00AC      STRB     R0,[R7, #+172]
    416                memset( fb.m.rx, 0, sizeof(fb.m.rx) );
   \   000000AC   0x2180             MOVS     R1,#+128
   \   000000AE   0xF107 0x00AE      ADD      R0,R7,#+174
   \   000000B2   0x.... 0x....      BL       __aeabi_memclr
    417                
    418                fb.m.rx_start_time = curr_time;
   \   000000B6   0x613E             STR      R6,[R7, #+16]
    419                fb.m.rx_msg_time = 0;
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x6178             STR      R0,[R7, #+20]
    420                fb.m.rx_last_time = 0;
   \   000000BC   0x61B8             STR      R0,[R7, #+24]
    421                memset(fb.m.rx_times,0,sizeof(fb.m.rx_times));
   \   000000BE   0x2190             MOVS     R1,#+144
   \   000000C0   0xF107 0x001C      ADD      R0,R7,#+28
   \   000000C4   0x.... 0x....      BL       __aeabi_memclr4
    422              }
    423              
    424              if ( fb.m.rx_last_time && curr_time - fb.m.rx_last_time > 2000 )
   \                     ??USART2_IRQHandler_7: (+1)
   \   000000C8   0x69B8             LDR      R0,[R7, #+24]
   \   000000CA   0xB118             CBZ.N    R0,??USART2_IRQHandler_8
   \   000000CC   0x1A30             SUBS     R0,R6,R0
   \   000000CE   0xF5B0 0x6FFA      CMP      R0,#+2000
   \   000000D2   0xD819             BHI.N    ??USART2_IRQHandler_9
    425              {
    426                skip = 1;
    427              }
    428              else
    429              {
    430                OS_RetriggerTimer( &t_fbm_msg_end );      
   \                     ??USART2_IRQHandler_8: (+1)
   \   000000D4   0xF507 0x7051      ADD      R0,R7,#+836
   \   000000D8   0x.... 0x....      BL       OS_RetriggerTimer
   \   000000DC   0xF897 0x00AC      LDRB     R0,[R7, #+172]
   \   000000E0   0x2824             CMP      R0,#+36
   \   000000E2   0xDA11             BGE.N    ??USART2_IRQHandler_9
    431              }
    432              
    433              if ( fb.m.rx_size < MDB_MAX_LEN && !skip )
    434              {
    435                fb.m.rx_times[ fb.m.rx_size ] = curr_time;
   \   000000E4   0xEB07 0x0080      ADD      R0,R7,R0, LSL #+2
   \   000000E8   0x61C6             STR      R6,[R0, #+28]
    436                fb.m.rx[ fb.m.rx_size++ ] = b;
   \   000000EA   0xF897 0x00AC      LDRB     R0,[R7, #+172]
   \   000000EE   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000000F2   0xEB07 0x0040      ADD      R0,R7,R0, LSL #+1
   \   000000F6   0xF8A0 0x10AE      STRH     R1,[R0, #+174]
   \   000000FA   0xF897 0x00AC      LDRB     R0,[R7, #+172]
   \   000000FE   0x1C40             ADDS     R0,R0,#+1
   \   00000100   0xF887 0x00AC      STRB     R0,[R7, #+172]
    437                mdb_evt_m_rx();
   \   00000104   0x.... 0x....      BL       mdb_evt_m_rx
    438              }
    439              
    440              fb.m.rx_last_time = curr_time;
   \                     ??USART2_IRQHandler_9: (+1)
   \   00000108   0x61BE             STR      R6,[R7, #+24]
    441          
    442            }
    443             
    444            //Transmit
    445            if ( USART_GetFlagStatus( USART2, USART_FLAG_TXE ) && ( USART_GetITStatus( USART2, USART_IT_TXE ) == SET ) )
   \                     ??USART2_IRQHandler_5: (+1)
   \   0000010A   0x2180             MOVS     R1,#+128
   \   0000010C   0x4640             MOV      R0,R8
   \   0000010E   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000112   0xB340             CBZ.N    R0,??USART2_IRQHandler_10
   \   00000114   0xF240 0x7627      MOVW     R6,#+1831
   \   00000118   0x4631             MOV      R1,R6
   \   0000011A   0x4640             MOV      R0,R8
   \   0000011C   0x.... 0x....      BL       USART_GetITStatus
   \   00000120   0x2801             CMP      R0,#+1
   \   00000122   0xD120             BNE.N    ??USART2_IRQHandler_10
    446            {
    447              if( fb.m.tx_size > 0 ) 
   \   00000124   0x....             LDR.N    R7,??DataTable21_2
   \   00000126   0xF897 0x012E      LDRB     R0,[R7, #+302]
   \   0000012A   0xB1A8             CBZ.N    R0,??USART2_IRQHandler_11
    448              {
    449                volatile u16 b =  fb.m.tx[ fb.m.tx_cnt++ ];
   \   0000012C   0xF897 0x012F      LDRB     R0,[R7, #+303]
   \   00000130   0xEB07 0x0140      ADD      R1,R7,R0, LSL #+1
   \   00000134   0x1C40             ADDS     R0,R0,#+1
   \   00000136   0xF8B1 0x1130      LDRH     R1,[R1, #+304]
   \   0000013A   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   \   0000013E   0xF887 0x012F      STRB     R0,[R7, #+303]
    450                USART_SendData( USART2, b );
   \   00000142   0x4640             MOV      R0,R8
   \   00000144   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000148   0x.... 0x....      BL       USART_SendData
    451                fb.m.tx_size--;
   \   0000014C   0xF897 0x012E      LDRB     R0,[R7, #+302]
   \   00000150   0x1E40             SUBS     R0,R0,#+1
   \   00000152   0xF887 0x012E      STRB     R0,[R7, #+302]
   \   00000156   0xE006             B.N      ??USART2_IRQHandler_10
    452              }
    453              else if( fb.m.tx_size == 0 )
    454              {
    455                fb.m.tx_cnt = 0;      
   \                     ??USART2_IRQHandler_11: (+1)
   \   00000158   0xF887 0x012F      STRB     R0,[R7, #+303]
    456                USART_ITConfig( USART2, USART_IT_TXE , DISABLE );
   \   0000015C   0x2200             MOVS     R2,#+0
   \   0000015E   0x4631             MOV      R1,R6
   \   00000160   0x4640             MOV      R0,R8
   \   00000162   0x.... 0x....      BL       USART_ITConfig
    457              }  
    458            }
    459          
    460            OS_LeaveNestableInterrupt();
   \                     ??USART2_IRQHandler_10: (+1)
   \   00000166   0x2080             MOVS     R0,#+128
   \   00000168   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000016C   0xBF00             Nop      
   \   0000016E   0xBF00             Nop      
   \   00000170   0x7820             LDRB     R0,[R4, #+0]
   \   00000172   0x1E40             SUBS     R0,R0,#+1
   \   00000174   0x7020             STRB     R0,[R4, #+0]
   \   00000176   0x7828             LDRB     R0,[R5, #+0]
   \   00000178   0x2801             CMP      R0,#+1
   \   0000017A   0xD103             BNE.N    ??USART2_IRQHandler_12
   \   0000017C   0x6868             LDR      R0,[R5, #+4]
   \   0000017E   0xB108             CBZ.N    R0,??USART2_IRQHandler_12
   \   00000180   0x.... 0x....      BL       OS_SwitchFromInt
   \                     ??USART2_IRQHandler_12: (+1)
   \   00000184   0x7828             LDRB     R0,[R5, #+0]
   \   00000186   0x1E40             SUBS     R0,R0,#+1
   \   00000188   0x7028             STRB     R0,[R5, #+0]
   \   0000018A   0x2000             MOVS     R0,#+0
   \   0000018C   0xF380 0x8811      MSR      BASEPRI,R0
    461            //OS_LeaveInterrupt();  
    462          }
   \   00000190   0xB002             ADD      SP,SP,#+8
   \   00000192   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    463          ////////////////////////////////////////////////////////////////////////////////
    464          /* USART3 Interrupt ----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    465          __irq void USART3_IRQHandler(void) {
   \                     USART3_IRQHandler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    466          
    467             OS_EnterNestableInterrupt();
   \   00000002   0x....             LDR.N    R4,??DataTable21_13
   \   00000004   0x....             LDR.N    R5,??DataTable21_14
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
    468          
    469             if ( USART_GetFlagStatus( USART3, USART_FLAG_ORE ) ) 
   \   00000008   0x....             LDR.N    R6,??DataTable21_15  ;; 0x40004800
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \   0000000C   0x7020             STRB     R0,[R4, #+0]
   \   0000000E   0x2108             MOVS     R1,#+8
   \   00000010   0x7828             LDRB     R0,[R5, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x7028             STRB     R0,[R5, #+0]
   \   00000016   0x4630             MOV      R0,R6
   \   00000018   0x.... 0x....      BL       USART_GetFlagStatus
   \   0000001C   0xB118             CBZ.N    R0,??USART3_IRQHandler_0
    470             {// Overrun Error
    471                USART_ClearFlag(USART3,USART_FLAG_ORE);      
   \   0000001E   0x2108             MOVS     R1,#+8
   \   00000020   0x4630             MOV      R0,R6
   \   00000022   0x.... 0x....      BL       USART_ClearFlag
    472             }
    473             if ( USART_GetFlagStatus( USART3, USART_FLAG_FE ) ) 
   \                     ??USART3_IRQHandler_0: (+1)
   \   00000026   0x2102             MOVS     R1,#+2
   \   00000028   0x4630             MOV      R0,R6
   \   0000002A   0x.... 0x....      BL       USART_GetFlagStatus
   \   0000002E   0xB118             CBZ.N    R0,??USART3_IRQHandler_1
    474             {// Framing Error
    475                USART_ClearFlag(USART3,USART_FLAG_FE);      
   \   00000030   0x2102             MOVS     R1,#+2
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       USART_ClearFlag
    476             }
    477             if ( USART_GetFlagStatus( USART3, USART_FLAG_NE ) ) 
   \                     ??USART3_IRQHandler_1: (+1)
   \   00000038   0x2104             MOVS     R1,#+4
   \   0000003A   0x4630             MOV      R0,R6
   \   0000003C   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000040   0xB118             CBZ.N    R0,??USART3_IRQHandler_2
    478             {// Noise Error
    479                USART_ClearFlag(USART3,USART_FLAG_NE);      
   \   00000042   0x2104             MOVS     R1,#+4
   \   00000044   0x4630             MOV      R0,R6
   \   00000046   0x.... 0x....      BL       USART_ClearFlag
    480             }
    481             if ( USART_GetFlagStatus( USART3, USART_FLAG_PE ) ) 
   \                     ??USART3_IRQHandler_2: (+1)
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x4630             MOV      R0,R6
   \   0000004E   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000052   0xB118             CBZ.N    R0,??USART3_IRQHandler_3
    482             {// Parity Error
    483                USART_ClearFlag(USART3,USART_FLAG_PE);      
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x4630             MOV      R0,R6
   \   00000058   0x.... 0x....      BL       USART_ClearFlag
    484             }
    485             // Push a new data into the receiver buffer
    486          #if defined DEX
    487            dex_isr(DEX);
    488          #elif defined MDB_SNIFFER
    489            sniffer_isr(MDB_SNIFFER);
   \                     ??USART3_IRQHandler_3: (+1)
   \   0000005C   0x4630             MOV      R0,R6
   \   0000005E   0x.... 0x....      BL       sniffer_isr
    490          #else
    491             if ( USART_GetFlagStatus( USART3, USART_FLAG_RXNE ) ) 
    492             {
    493                // Push a new data into the receiver buffer
    494                volatile u8 b = USART_ReceiveData(USART3);
    495             }
    496          #endif     
    497             
    498             OS_LeaveNestableInterrupt();
   \   00000062   0x2080             MOVS     R0,#+128
   \   00000064   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000068   0xBF00             Nop      
   \   0000006A   0xBF00             Nop      
   \   0000006C   0x7820             LDRB     R0,[R4, #+0]
   \   0000006E   0x1E40             SUBS     R0,R0,#+1
   \   00000070   0x7020             STRB     R0,[R4, #+0]
   \   00000072   0x7828             LDRB     R0,[R5, #+0]
   \   00000074   0x2801             CMP      R0,#+1
   \   00000076   0xD103             BNE.N    ??USART3_IRQHandler_4
   \   00000078   0x6868             LDR      R0,[R5, #+4]
   \   0000007A   0xB108             CBZ.N    R0,??USART3_IRQHandler_4
   \   0000007C   0x.... 0x....      BL       OS_SwitchFromInt
   \                     ??USART3_IRQHandler_4: (+1)
   \   00000080   0x7828             LDRB     R0,[R5, #+0]
   \   00000082   0x1E40             SUBS     R0,R0,#+1
   \   00000084   0x7028             STRB     R0,[R5, #+0]
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0xF380 0x8811      MSR      BASEPRI,R0
    499          }
   \   0000008C   0xBD70             POP      {R4-R6,PC}       ;; return
    500          ////////////////////////////////////////////////////////////////////////////////
    501          ////////////////////////////////////////////////////////////////////////////////
    502          ////////////////////////////////////////////////////////////////////////////////
    503          

   \                                 In section .text, align 2, keep-with-next
    504          void USART3_Timeout( void )
    505          {
    506          #if defined DEX
    507             OS_SignalEvent( EVT_DEX_DRD, &TCB3 );
    508          #elif defined MDB_SNIFFER
    509             OS_SignalEvent( EVT_SNIFF_RX_MSG, &TCB3 );
   \                     USART3_Timeout: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable21_16
   \   00000002   0x2080             MOVS     R0,#+128
   \   00000004   0x.... 0x....      B.W      OS_SignalEvent
    510          #endif  
    511          }
    512          

   \                                 In section .text, align 2, keep-with-next
    513          void Task_USART3(void) 
    514          {
   \                     Task_USART3: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    515          #if defined ( MDB_SNIFFER ) || defined ( DEX )
    516            OS_TASK_EVENT evt;
    517          #endif
    518            
    519             /* Configure USART3 Tx (PB.10) as alternate function push-pull */
    520             GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
   \   00000002   0x....             LDR.N    R4,??DataTable21_2
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0xF44F 0x6080      MOV      R0,#+1024
   \   0000000A   0xF8A4 0x02DC      STRH     R0,[R4, #+732]
    521             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    522             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    523             GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   0000000E   0xF504 0x7137      ADD      R1,R4,#+732
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0xF884 0x02DE      STRB     R0,[R4, #+734]
   \   00000018   0x2018             MOVS     R0,#+24
   \   0000001A   0xF884 0x02DF      STRB     R0,[R4, #+735]
   \   0000001E   0x....             LDR.N    R5,??DataTable21_15  ;; 0x40004800
   \   00000020   0x....             LDR.N    R0,??DataTable21_17  ;; 0x40010c00
   \   00000022   0x.... 0x....      BL       GPIO_Init
    524             
    525             
    526             USART_InitStructure.USART_BaudRate = 230400;
   \   00000026   0xF44F 0x3061      MOV      R0,#+230400
   \   0000002A   0xF8C4 0x02CC      STR      R0,[R4, #+716]
    527             USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    528             USART_InitStructure.USART_StopBits = USART_StopBits_1;
    529             USART_InitStructure.USART_Parity = USART_Parity_No;
    530             USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    531             USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    532             USART_Init(USART3, &USART_InitStructure);
   \   0000002E   0xF504 0x7133      ADD      R1,R4,#+716
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xF8A4 0x02D0      STRH     R0,[R4, #+720]
   \   00000038   0xF8A4 0x02D2      STRH     R0,[R4, #+722]
   \   0000003C   0xF8A4 0x02D4      STRH     R0,[R4, #+724]
   \   00000040   0xF8A4 0x02D8      STRH     R0,[R4, #+728]
   \   00000044   0x200C             MOVS     R0,#+12
   \   00000046   0xF8A4 0x02D6      STRH     R0,[R4, #+726]
   \   0000004A   0x4628             MOV      R0,R5
   \   0000004C   0x.... 0x....      BL       USART_Init
    533          
    534             USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
   \   00000050   0x2201             MOVS     R2,#+1
   \   00000052   0xF240 0x5125      MOVW     R1,#+1317
   \   00000056   0x4628             MOV      R0,R5
   \   00000058   0x.... 0x....      BL       USART_ITConfig
    535             USART_ITConfig(USART3, USART_IT_TXE, ENABLE);
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0xF240 0x7127      MOVW     R1,#+1831
   \   00000062   0x4628             MOV      R0,R5
   \   00000064   0x.... 0x....      BL       USART_ITConfig
    536             USART_Cmd(USART3, ENABLE);
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x4628             MOV      R0,R5
   \   0000006C   0x.... 0x....      BL       USART_Cmd
    537          
    538             OS_ARM_ISRSetPrio( USART3_IRQn + 16, 140 );               // Set lowest Priority, ALL BITS set
   \   00000070   0x218C             MOVS     R1,#+140
   \   00000072   0x2037             MOVS     R0,#+55
   \   00000074   0x.... 0x....      BL       OS_ARM_ISRSetPrio
    539             OS_ARM_EnableISR( USART3_IRQn + 16 );
   \   00000078   0x2037             MOVS     R0,#+55
   \   0000007A   0x.... 0x....      BL       OS_ARM_EnableISR
    540          
    541          #if defined ( DEX )
    542             OS_CreateTimer( &dex.timer, USART3_Timeout, 1000 );  
    543             dex_init();
    544             //dex.state = dexState_Initial;
    545             //read_dex();  
    546          #elif defined ( MDB_SNIFFER )
    547             OS_CreateTimer( &sniffer.timer, USART3_Timeout, 2 );    
   \   0000007E   0x2202             MOVS     R2,#+2
   \   00000080   0x....             LDR.N    R1,??DataTable21_18
   \   00000082   0x....             LDR.N    R0,??DataTable21_3
   \   00000084   0x.... 0x....      BL       OS_CreateTimer
    548          #endif
    549            
    550             OS_Delay (500);
   \   00000088   0xF44F 0x70FA      MOV      R0,#+500
   \   0000008C   0x.... 0x....      BL       OS_Delay
    551          
    552             while (1) 
    553             {
    554          #if defined ( DEX )
    555                evt = OS_WaitEvent( EVT_DEX_DRD | EVT_DEX_START | EVT_DEX_ABORT );    
    556                if ( evt & EVT_DEX_DRD ) 
    557                {
    558                   read_dex();
    559                }
    560          
    561                if ( evt & EVT_DEX_START ) 
    562                {
    563                   start_dex_query();
    564                }
    565          
    566                if ( evt & EVT_DEX_ABORT ) 
    567                {
    568                   abort_dex_query();
    569                }
    570          #elif defined ( MDB_SNIFFER )
    571                evt = OS_WaitEvent( EVT_SNIFF_RX_MSG );
    572                if ( evt & EVT_SNIFF_RX_MSG ) 
   \                     ??Task_USART3_0: (+1)
   \   00000090   0x2080             MOVS     R0,#+128
   \   00000092   0x.... 0x....      BL       OS_WaitEvent
   \   00000096   0x0600             LSLS     R0,R0,#+24
   \   00000098   0xD5FA             BPL.N    ??Task_USART3_0
    573                {
    574                   sniffer_rx_msg();
   \   0000009A   0x.... 0x....      BL       sniffer_rx_msg
   \   0000009E   0xE7F7             B.N      ??Task_USART3_0
    575                }    
    576          #else
    577                OS_Delay (500);    
    578          #endif
    579             }
    580          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x........         DC32     fb+0x36C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0x........         DC32     fb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \   00000000   0x........         DC32     sniffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_4:
   \   00000000   0x........         DC32     TCB2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_5:
   \   00000000   0x........         DC32     timer1000_cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_6:
   \   00000000   0x........         DC32     fbm_msg_end

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_7:
   \   00000000   0x........         DC32     fbs_msg_end

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_8:
   \   00000000   0x........         DC32     sw_uart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_9:
   \   00000000   0x........         DC32     bt_rx_msg_handler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_10:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_11:
   \   00000000   0x40004400         DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_12:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_13:
   \   00000000   0x........         DC32     OS_InInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_14:
   \   00000000   0x........         DC32     OS_Global

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_15:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_16:
   \   00000000   0x........         DC32     TCB3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_17:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_18:
   \   00000000   0x........         DC32     USART3_Timeout

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x62 0x75          DC8 "build: %u.%u %s %s\015\012"
   \              0x69 0x6C    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x75 0x2E    
   \              0x25 0x75    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x4F 0x63          DC8 "Oct 19 2016"
   \              0x74 0x20    
   \              0x31 0x39    
   \              0x20 0x32    
   \              0x30 0x31    
   \              0x36 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x31 0x33          DC8 "13:34:21"
   \              0x3A 0x33    
   \              0x34 0x3A    
   \              0x32 0x31    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x41 0x54          DC8 "AT\015\012"
   \              0x0D 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x41 0x54          DC8 "AT+NAME=VENDICONT\015\012"
   \              0x2B 0x4E    
   \              0x41 0x4D    
   \              0x45 0x3D    
   \              0x56 0x45    
   \              0x4E 0x44    
   \              0x49 0x43    
   \              0x4F 0x4E    
   \              0x54 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x66 0x62          DC8 "fb_emu_evt=%d\015\012"
   \              0x5F 0x65    
   \              0x6D 0x75    
   \              0x5F 0x65    
   \              0x76 0x74    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x66 0x62          DC8 "fb: door open\015\012"
   \              0x3A 0x20    
   \              0x64 0x6F    
   \              0x6F 0x72    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x66 0x62          DC8 "fb: door close\015\012"
   \              0x3A 0x20    
   \              0x64 0x6F    
   \              0x6F 0x72    
   \              0x20 0x63    
   \              0x6C 0x6F    
   \              0x73 0x65    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Task_USART3
        16   -> GPIO_Init
        16   -> OS_ARM_EnableISR
        16   -> OS_ARM_ISRSetPrio
        16   -> OS_CreateTimer
        16   -> OS_Delay
        16   -> OS_WaitEvent
        16   -> USART_Cmd
        16   -> USART_ITConfig
        16   -> USART_Init
        16   -> sniffer_rx_msg
      32   Task_vending
        32   -> GPIO_Init
        32   -> GPIO_ResetBits
        32   -> GPIO_SetBits
        32   -> OS_ARM_EnableISR
        32   -> OS_ARM_ISRSetPrio
        32   -> OS_CreateTimer
        32   -> OS_Delay
        32   -> OS_Q_Create
        32   -> OS_Q_Put
        32   -> OS_RetriggerTimer
        32   -> OS_StartTimer
        32   -> OS_WaitEvent
        32   -> __aeabi_memclr
        32   -> __aeabi_memclr4
        32   -> enableLogging
        32   -> init_fb
        32   -> log1
        32   -> sniffer_m_rx
        32   -> sniffer_s_rx
        32   -> sw_uart_reset_buffers
        32   -> sw_uart_tx
      32   USART1_IRQHandler
        32   -> OS_GetTime_us
        32   -> OS_RetriggerTimer
        32   -> OS_SwitchFromInt
        32   -> USART_ClearFlag
        32   -> USART_GetFlagStatus
        32   -> USART_GetITStatus
        32   -> USART_ITConfig
        32   -> USART_ReceiveData
        32   -> USART_SendData
      32   USART2_IRQHandler
        32   -> OS_GetTime_us
        32   -> OS_RetriggerTimer
        32   -> OS_SwitchFromInt
        32   -> USART_ClearFlag
        32   -> USART_GetFlagStatus
        32   -> USART_GetITStatus
        32   -> USART_ITConfig
        32   -> USART_ReceiveData
        32   -> USART_SendData
        32   -> __aeabi_memclr
        32   -> __aeabi_memclr4
        32   -> mdb_evt_m_rx
      16   USART3_IRQHandler
        16   -> OS_SwitchFromInt
        16   -> USART_ClearFlag
        16   -> USART_GetFlagStatus
        16   -> sniffer_isr
       0   USART3_Timeout
         0   -> OS_SignalEvent
      16   fb_m_tx
         0   -> USART_ITConfig
        16   -> __aeabi_memcpy
      16   fb_s_tx
         0   -> USART_ITConfig
        16   -> __aeabi_memmove
      16   fbm_msg_end
        16   -> OS_GetTime_us
         0   -> OS_SignalEvent
        16   -> __aeabi_memmove
      16   fbs_msg_end
        16   -> OS_SignalEvent
        16   -> __aeabi_memclr
        16   -> __aeabi_memmove
      24   init_fb
        24   -> GPIO_Init
         0   -> USART_Cmd
        24   -> USART_Cmd
        24   -> USART_DeInit
        24   -> USART_ITConfig
        24   -> USART_Init
       8   timer1000_cb
         8   -> GPIO_ReadOutputData
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         0   -> OS_RetriggerTimer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_10
       4  ??DataTable21_11
       4  ??DataTable21_12
       4  ??DataTable21_13
       4  ??DataTable21_14
       4  ??DataTable21_15
       4  ??DataTable21_16
       4  ??DataTable21_17
       4  ??DataTable21_18
       4  ??DataTable21_2
       4  ??DataTable21_3
       4  ??DataTable21_4
       4  ??DataTable21_5
       4  ??DataTable21_6
       4  ??DataTable21_7
       4  ??DataTable21_8
       4  ??DataTable21_9
      24  ?_0
      12  ?_1
      12  ?_2
       8  ?_3
      20  ?_4
      16  ?_5
      16  ?_6
      20  ?_7
     160  Task_USART3
     500  Task_vending
     342  USART1_IRQHandler
     406  USART2_IRQHandler
     142  USART3_IRQHandler
       8  USART3_Timeout
     896  fb
          USART_InitStructure
          GPIO_InitStructure
          fb_evt_q
          fb_evt_q_buf
          t_fbm_msg_end
          t_fbs_msg_end
          timer1000
      60  fb_m_tx
      60  fb_s_tx
      66  fbm_msg_end
      78  fbs_msg_end
     240  init_fb
      46  timer1000_cb
       1  tr
       1  verMajor
       1  verMinor

 
   897 bytes in section .bss
     2 bytes in section .rodata
 2 312 bytes in section .text
 
 2 312 bytes of CODE  memory
     2 bytes of CONST memory
   897 bytes of DATA  memory

Errors: none
Warnings: 2

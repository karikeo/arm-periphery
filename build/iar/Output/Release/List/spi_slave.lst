###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       19/Oct/2016  13:34:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\ilya\vendicont\arm-periphery\Application\spi_slave.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\spi_slave.c -D
#        STM32F10X_HD -D USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\spi_slave.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\spi_slave.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\spi_slave.c
      1          #include "stm32f10x.h"
      2          #include "stm32f10x_dbgmcu.h"
      3          #include "RTOS.h"
      4          #include "BSP.h"
      5          #include "spi_slave.h"
      6          #include "spi_comm.h"
      7          #if defined LCD
      8          #include "lcd_2x16.h"
      9          #endif
     10          #include "stdio.h"
     11          #include "log.h"
     12          #include "vending/pt-vending.h"
     13          #include "vending/dex.h"
     14          #include "vending/mdb.h"
     15          #include "utils.h"
     16          
     17          extern const u8 verMajor;
     18          extern const u8 verMinor;
     19          
     20          extern GPIO_InitTypeDef GPIO_InitStructure;

   \                                 In section .bss, align 4
     21          SPI_InitTypeDef SPI_InitStructure;
     22          DMA_InitTypeDef DMA_InitStructure;
     23          //EXTI_InitTypeDef EXTI_InitStructure;
     24          //NVIC_InitTypeDef NVIC_InitStructure;
     25          
     26          extern OS_TASK TCB1; //SPI
     27          extern OS_TASK TCB2; //Vending
     28          extern OS_Q fb_evt_q;
     29          extern t_fb_desc fb;
     30          #if defined DEX
     31          extern tDex dex;
     32          #endif   
     33          
     34          
     35          #ifdef __ICCARM__  // IAR
     36             __task void jump(void);
     37             __absolute t_spi_in spi_in[2];
     38             __absolute t_spi_out spi_out[2];   
   \                     spi_out:
   \   00000000                      DS8 64
   \                     DMA_InitStructure:
   \   00000040                      DS8 44
   \                     spi_in:
   \   0000006C                      DS8 64
   \                     SPI_InitStructure:
   \   000000AC                      DS8 20
     39          #elif __CC_ARM    // KEIL
     40             void jump(void);
     41             t_spi_in spi_in[2];
     42             t_spi_out spi_out[2];   
     43          #elif __GNUC__    // GCC
     44            #warning watch me
     45          #endif
     46          
     47          t_spi_out prev_spi_out;
   \                     prev_spi_out:
   \   000000C0                      DS8 32
     48          
     49          
     50          //OS_MAILBOX spi_out_mb;
     51          //extern OS_RSEMA SemaLCD;
     52          OS_TIMER timer100;
     53          OS_TIMER spi_ok_timer;
     54          OS_TIMER spi_sync_timer;
     55          
     56          u16 gpiob_idr;
   \                     gpiob_idr:
   \   000000E0                      DS8 2
   \   000000E2                      DS8 2
     57          u32 spi_cs_wait = 0;
   \                     spi_cs_wait:
   \   000000E4                      DS8 4
     58          
     59          //#define SPI_OUT_MB_SIZE 4
     60          //u8 spi_out_mb_buf[ sizeof(t_spi_out) * SPI_OUT_MB_SIZE ];
     61          
     62          #define ISR_ID_SYSTICK                (15)               // System Tick
     63          
     64          ////////////////////////////////////////////////////////////////////////////////
     65          #ifdef __ICCARM__  // IAR
     66             __absolute t_spi_mgr spi_mgr_desc;
   \                     spi_mgr_desc:
   \   000000E8                      DS8 4
   \                     timer100:
   \   000000EC                      DS8 20
   \                     spi_ok_timer:
   \   00000100                      DS8 20
   \                     spi_sync_timer:
   \   00000114                      DS8 20
     67          #elif __CC_ARM    // KEIL
     68             t_spi_mgr spi_mgr_desc;
     69          #elif __GNUC__    // GCC
     70            #warning watch me
     71          #endif
     72          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     73          void timer100_cb( void ) {
   \                     timer100_cb: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     74          
     75             if ( spi_out[1].fields.padding[ 1 ] == 'i'
     76               && spi_out[1].fields.padding[ 2 ] == 'v'
     77               && spi_out[1].fields.padding[ 3 ] == 'a'
     78             ) {
     79                //GPIO_ResetBits(GPIOC, GPIO_Pin_9);
     80             } else {
     81                //GPIO_SetBits(GPIOC, GPIO_Pin_9);
     82             }
     83          
     84             IWDG_ReloadCounter();
   \   00000004   0x.... 0x....      BL       IWDG_ReloadCounter
     85             OS_RetriggerTimer( &timer100 );   /* Make timer periodical */
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable10
   \   0000000C   0x.... 0x....      BL       OS_RetriggerTimer
     86             
     87             OS_SignalEvent( SPI_TASK_EVT_100MS, &TCB1 );
   \   00000010   0xB001             ADD      SP,SP,#+4
   \   00000012   0xF85D 0xEB04      POP      {LR}
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   0000001A   0x2010             MOVS     R0,#+16
   \   0000001C   0x.... 0x....      B.W      OS_SignalEvent
     88          
     89          }
     90          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     91          void spi_ok_timer_cb( void ) {
     92             //char buf[ 32 ];
     93             //GPIO_SetBits(GPIOC, GPIO_Pin_9);
     94             OS_RetriggerTimer( &timer100 );
   \                     spi_ok_timer_cb: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000004   0x.... 0x....      B.W      OS_RetriggerTimer
     95             //log("spi timeout\r\n");
     96          }
     97          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     98          void spi_sync_timer_cb( void ) {
     99          //   if ( DMA1_Channel5->CNDTR < 31 ) {
    100          //   }
    101          }
   \                     spi_sync_timer_cb: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    102          ////////////////////////////////////////////////////////////////////////////////
    103          #ifdef __ICCARM__  // IAR

   \                                 In section .text, align 2, keep-with-next
    104          __task void jump(void) {
   \                     jump: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    105             pEntryPoint ep;
    106             disable_interrupt();
   \   00000004   0xB672             CPSID    I
    107             NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x4000 );
   \   00000006   0xF44F 0x4180      MOV      R1,#+16384
   \   0000000A   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000000E   0x.... 0x....      BL       NVIC_SetVectorTable
    108             __set_MSP(*((u32*)0x08000000));
   \   00000012   0xF04F 0x6000      MOV      R0,#+134217728
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0xF381 0x8808      MSR      MSP,R1
    109             ep = (pEntryPoint) (*((u32*)(0x08000000 + 7*4) ));
    110             ep();
   \   0000001C   0x69C0             LDR      R0,[R0, #+28]
   \   0000001E   0xB001             ADD      SP,SP,#+4
   \   00000020   0xF85D 0xEB04      POP      {LR}
   \   00000024   0x4700             BX       R0
    111          }
    112          #elif __CC_ARM    // KEIL
    113          void jump(void) {
    114             pEntryPoint ep;
    115             disable_interrupt();
    116             NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x4000 );
    117             __set_MSP(*((u32*)0x08000000));
    118             ep = (pEntryPoint) (*((u32*)(0x08000000 + 7*4) ));
    119             ep();
    120          }
    121          #elif __GNUC__    // GCC
    122            #warning watch me
    123          #endif
    124          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 4, keep-with-next
    125          int spi_mgr( ) {
   \                     spi_mgr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    126          //   u32 adr;
    127          //   u32 i;
    128             char buf[ 32 ];
    129          
    130             switch ( spi_mgr_desc.state ) {
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable10_2
   \   00000006   0xB08A             SUB      SP,SP,#+40
   \   00000008   0xF8B4 0x00E8      LDRH     R0,[R4, #+232]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xF040 0x80E4      BNE.W    ??spi_mgr_1
    131          
    132                case spiState_Idle:
    133                   switch ( spi_out[1].fields.cmd ) {
   \   00000012   0x8C60             LDRH     R0,[R4, #+34]
   \   00000014   0x280C             CMP      R0,#+12
   \   00000016   0xF200 0x80DC      BHI.W    ??spi_mgr_2
   \   0000001A   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??spi_mgr_0:
   \   0000001E   0x56 0x07          DC8      0x56,0x7,0xE5,0xE5
   \              0xE5 0xE5    
   \   00000022   0x3E 0xDA          DC8      0x3E,0xDA,0xDA,0xDA
   \              0xDA 0xDA    
   \   00000026   0xDA 0x1A          DC8      0xDA,0x1A,0x70,0x92
   \              0x70 0x92    
   \   0000002A   0xBB 0x00          DC8      0xBB,0x0
    134                      case spiCmd_FwUpdateInit:
    135          #if defined LCD
    136                         goto_cursor( 0x00 );
    137                         lcd_print("to bootloader  ");
    138          #endif
    139                         OS_ARM_DisableISR( ISR_ID_SYSTICK );
   \                     ??spi_mgr_3: (+1)
   \   0000002C   0x200F             MOVS     R0,#+15
   \   0000002E   0x.... 0x....      BL       OS_ARM_DisableISR
    140                         disable_interrupt();
   \   00000032   0xB672             CPSID    I
    141                         jump();
   \   00000034   0xB672             CPSID    I
   \   00000036   0xF44F 0x4180      MOV      R1,#+16384
   \   0000003A   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000003E   0x.... 0x....      BL       NVIC_SetVectorTable
   \   00000042   0xF04F 0x6000      MOV      R0,#+134217728
   \   00000046   0x6801             LDR      R1,[R0, #+0]
   \   00000048   0xF381 0x8808      MSR      MSP,R1
   \   0000004C   0x69C0             LDR      R0,[R0, #+28]
   \   0000004E   0x4780             BLX      R0
    142                         for ( ; ; ) {
   \                     ??spi_mgr_4: (+1)
   \   00000050   0xE7FE             B.N      ??spi_mgr_4
    143                            ;
    144                         }
    145                         break;
    146          
    147                      case spiCmd_FwUpdateData:
    148                         break;
    149          
    150                      case spiCmd_FwUpdateComplete:
    151                         break;
    152          
    153                      case spiCmd_GetFwVersion:
    154                         spi_in[0].fields.status.bits.spi_busy = 1;
   \                     ??spi_mgr_5: (+1)
   \   00000052   0xF8B4 0x106C      LDRH     R1,[R4, #+108]
    155                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;
   \   00000056   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   0000005A   0xF041 0x0110      ORR      R1,R1,#0x10
   \   0000005E   0xF8A4 0x006E      STRH     R0,[R4, #+110]
   \   00000062   0xF8A4 0x106C      STRH     R1,[R4, #+108]
    156                         memset( spi_in[0].fields.data, 0, sizeof(spi_in[0].fields.data));
   \   00000066   0xF104 0x0078      ADD      R0,R4,#+120
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x2200             MOVS     R2,#+0
   \   0000006E   0x2300             MOVS     R3,#+0
   \   00000070   0x2500             MOVS     R5,#+0
   \   00000072   0xC02E             STM      R0!,{R1-R3,R5}
    157                         spi_in[0].fields.param1 = verMajor;
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00000078   0x7800             LDRB     R0,[R0, #+0]
   \   0000007A   0x6720             STR      R0,[R4, #+112]
    158                         spi_in[0].fields.param2 = verMinor;
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x6760             STR      R0,[R4, #+116]
    159                         build_dt( buf );
   \   00000084   0xA801             ADD      R0,SP,#+4
   \   00000086   0x.... 0x....      BL       build_dt
    160                         buf[ sizeof(spi_in[0].fields.data) - 1 ] = 0;
   \   0000008A   0xF88D 0x5013      STRB     R5,[SP, #+19]
    161                         memcpy( spi_in[0].fields.data, buf, sizeof(spi_in[0].fields.data) );
   \   0000008E   0xA801             ADD      R0,SP,#+4
   \   00000090   0xC86C             LDM      R0!,{R2,R3,R5,R6}
   \   00000092   0xF104 0x0178      ADD      R1,R4,#+120
   \   00000096   0xC16C             STM      R1!,{R2,R3,R5,R6}
    162                         spi_in[0].fields.status.bits.spi_busy = 0;               
   \   00000098   0xE09F             B.N      ??spi_mgr_1
    163                         break;
    164          
    165          
    166                      case spiCmd_ReadLog:
    167                         spi_in[0].fields.status.bits.spi_busy = 1;
   \                     ??spi_mgr_6: (+1)
   \   0000009A   0xF8B4 0x106C      LDRH     R1,[R4, #+108]
    168                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;
   \   0000009E   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   000000A2   0xF041 0x0110      ORR      R1,R1,#0x10
   \   000000A6   0xF8A4 0x006E      STRH     R0,[R4, #+110]
   \   000000AA   0xF8A4 0x106C      STRH     R1,[R4, #+108]
    169                         memset( spi_in[0].fields.data, 0, sizeof(spi_in[0].fields.data));
   \   000000AE   0xF104 0x0078      ADD      R0,R4,#+120
   \   000000B2   0x2100             MOVS     R1,#+0
   \   000000B4   0x2200             MOVS     R2,#+0
   \   000000B6   0x2300             MOVS     R3,#+0
   \   000000B8   0x2500             MOVS     R5,#+0
   \   000000BA   0xC02E             STM      R0!,{R1-R3,R5}
    170                         spi_in[0].fields.param1 =
    171                            logRead( (char*)spi_in[0].fields.data, sizeof( spi_in[0].fields.data ));
   \   000000BC   0x2110             MOVS     R1,#+16
   \   000000BE   0xF104 0x0078      ADD      R0,R4,#+120
   \   000000C2   0x.... 0x....      BL       logRead
   \   000000C6   0x6720             STR      R0,[R4, #+112]
    172                         spi_in[0].fields.status.bits.spi_busy = 0;
   \   000000C8   0xE087             B.N      ??spi_mgr_1
    173                         break;
    174          
    175                      case spiCmd_NoCmd:
    176                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;
   \                     ??spi_mgr_7: (+1)
   \   000000CA   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   000000CE   0xF8A4 0x006E      STRH     R0,[R4, #+110]
    177                         spi_in[0].fields.param1 = 0;
    178                         spi_in[0].fields.param2 = 0;
    179                         memset( spi_in[0].fields.data, 0, sizeof( spi_in[0].fields.data ));
   \   000000D2   0x2100             MOVS     R1,#+0
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x6720             STR      R0,[R4, #+112]
   \   000000D8   0x6760             STR      R0,[R4, #+116]
   \   000000DA   0x2200             MOVS     R2,#+0
   \   000000DC   0xF104 0x0078      ADD      R0,R4,#+120
   \   000000E0   0x2300             MOVS     R3,#+0
   \   000000E2   0x2500             MOVS     R5,#+0
   \   000000E4   0xC02E             STM      R0!,{R1-R3,R5}
    180                         spi_in[0].fields.status.bits.spi_busy = 0;
   \   000000E6   0xF8B4 0x006C      LDRH     R0,[R4, #+108]
    181                         spi_mgr_desc.state = spiState_Idle;
   \   000000EA   0xF8A4 0x20E8      STRH     R2,[R4, #+232]
   \   000000EE   0xF64F 0x71EF      MOVW     R1,#+65519
   \   000000F2   0x4008             ANDS     R0,R1,R0
   \   000000F4   0xF8A4 0x006C      STRH     R0,[R4, #+108]
    182                         break;
    183          
    184          #if defined DEX                 
    185                      case spiCmd_DexQueryStart:
    186                         spi_in[0].fields.status.bits.spi_busy = 1;
    187                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;
    188                         memset( spi_in[0].fields.data, 0, sizeof(spi_in[0].fields.data));
    189                         OS_SignalEvent( EVT_DEX_START, &TCB2 );
    190                         spi_in[0].fields.param1 =  dex.state;
    191                         spi_in[0].fields.status.bits.spi_busy = 0;
    192                         break;
    193          
    194                      case spiCmd_DexQueryAbort:
    195                         spi_in[0].fields.status.bits.spi_busy = 1;
    196                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;
    197                         memset( spi_in[0].fields.data, 0, sizeof(spi_in[0].fields.data));
    198                         OS_SignalEvent( EVT_DEX_ABORT, &TCB2 );
    199                         spi_in[0].fields.param1 =  dex.state;
    200                         spi_in[0].fields.status.bits.spi_busy = 0;
    201                         break;
    202          
    203                      case spiCmd_DexQueryRead: {
    204                         u32 sizeLeft = 0;
    205                         u32 chunkSize = sizeof(spi_in[0].fields.data);
    206                         spi_in[0].fields.status.bits.spi_busy = 1;
    207                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;
    208                         memset( spi_in[0].fields.data, 0, sizeof(spi_in[0].fields.data));
    209          
    210                         if ( spi_out[1].fields.param1 == 0 ) {
    211                            dex.audit_ptr = 0;
    212                         }
    213                         sizeLeft = dex.audit_size - dex.audit_ptr;
    214          
    215                         if ( sizeLeft <  chunkSize )
    216                            chunkSize = sizeLeft;
    217          
    218                         memcpy( spi_in[0].fields.data, &dex.audit_data[ dex.audit_ptr ], chunkSize );
    219                         spi_in[0].fields.param1 =  dex.audit_ptr;
    220                         spi_in[0].fields.param2 =  sizeLeft;
    221          
    222                         dex.audit_ptr += chunkSize;
    223          
    224                         spi_in[0].fields.status.bits.spi_busy = 0;
    225          #if 0 //defined LCD
    226                         goto_cursor(0x00);
    227                         sprintf( (char*)buf, "tx %u of %u", (char*)dex.audit_ptr, (char*)dex.audit_size );
    228                         lcd_print( buf );
    229          #endif
    230                         if ( sizeLeft == 0 ) {
    231                            dex.triggers.bits.query_cmplt = 0;
    232                         }
    233                         break;
    234                      }
    235          #endif
    236                      
    237                      case spiCmd_GetFbEvent: {
    238                         int len;
    239                         u8* p = 0;               
    240                         spi_in[0].fields.status.bits.spi_busy = 1;
    241                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;
    242                         memset( spi_in[0].fields.data, 0, sizeof(spi_in[0].fields.data));
    243                         len = OS_Q_GetPtrCond( &fb_evt_q, (void**)&p );           /* Check message   */
    244                         if ( len > 0 ) {
    245                            if ( len > 16 )
    246                               len = 16;
    247                            spi_in[0].fields.param1 =  ((u32*) p ) [ 0 ];
    248          
    249                            OS_Q_Purge( &fb_evt_q );
    250                         } else {
    251          
    252                         }
    253          #if 0
    254                         log( "l=%d %d %d\r\n"
    255                             ,len
    256                             ,spi_in[0].fields.status.bits.fb_evt
    257                             ,OS_Q_GetMessageCnt( &fb_evt_q )
    258                         );
    259          #endif
    260                         spi_in[0].fields.status.bits.spi_busy = 0;
    261                         break;
    262                      }
    263                      case spiCmd_EmuFbEvent:
    264                         spi_in[0].fields.status.bits.spi_busy = 1;
    265                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;
    266                         memset( spi_in[0].fields.data, 0, sizeof(spi_in[0].fields.data));
    267                         fb.emu_evt = spi_out[1].fields.param1;
    268                         OS_SignalEvent( EVT_FB_EMU, &TCB2 );
    269                         spi_in[0].fields.status.bits.spi_busy = 0;
    270                         log( "fb_emu: %d\r\n", fb.emu_evt );
    271                         break;
    272                         
    273                      case spiCmd_ReadData:
    274                         spi_in[0].fields.status.bits.spi_busy = 1;
    275                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;
    276                         memset( spi_in[0].fields.data, 0, sizeof(spi_in[0].fields.data));
    277                         switch( spi_out[1].fields.param1 ) {
    278                            case 0:
    279                            case 1:                    
    280                               spi_in[0].fields.param1 = spi_out[1].fields.param1;
    281                               spi_in[0].fields.param2 = spi_out[1].fields.param2;
    282                               extern float t_18b20;                     
    283                               *((float*)(spi_in[0].fields.data)) = t_18b20;
    284                               break;
    285                            default:
    286                               spi_in[0].fields.param1 = 0;
    287                               spi_in[0].fields.param2 = 0;
    288                               break;
    289                         }
    290                         spi_in[0].fields.status.bits.spi_busy = 0;
    291                         break;
    292                         
    293                      default:
    294                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;              
    295                         spi_in[0].fields.status.bits.spi_busy = 0;              
    296                         break;
    297                   }
    298                   break;
    299                   
    300                default:
    301                   spi_in[0].fields.status.bits.spi_busy = 0;              
    302                   break;
    303                  
    304             }
    305          
    306             return 0;
   \   000000F8   0xB00A             ADD      SP,SP,#+40
   \   000000FA   0x2000             MOVS     R0,#+0
   \   000000FC   0xBD70             POP      {R4-R6,PC}
   \                     ??spi_mgr_8: (+1)
   \   000000FE   0x2100             MOVS     R1,#+0
   \   00000100   0x9100             STR      R1,[SP, #+0]
   \   00000102   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   00000106   0xF8B4 0x106C      LDRH     R1,[R4, #+108]
   \   0000010A   0xF8A4 0x006E      STRH     R0,[R4, #+110]
   \   0000010E   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000112   0xF8A4 0x106C      STRH     R1,[R4, #+108]
   \   00000116   0xF104 0x0078      ADD      R0,R4,#+120
   \   0000011A   0x2100             MOVS     R1,#+0
   \   0000011C   0x2200             MOVS     R2,#+0
   \   0000011E   0x2300             MOVS     R3,#+0
   \   00000120   0x2500             MOVS     R5,#+0
   \   00000122   0xC02E             STM      R0!,{R1-R3,R5}
   \   00000124   0x.... 0x....      LDR.W    R5,??DataTable10_5
   \   00000128   0x4669             MOV      R1,SP
   \   0000012A   0x4628             MOV      R0,R5
   \   0000012C   0x.... 0x....      BL       OS_Q_GetPtrCond
   \   00000130   0x2801             CMP      R0,#+1
   \   00000132   0xDB52             BLT.N    ??spi_mgr_1
   \   00000134   0x9800             LDR      R0,[SP, #+0]
   \   00000136   0x6800             LDR      R0,[R0, #+0]
   \   00000138   0x6720             STR      R0,[R4, #+112]
   \   0000013A   0x4628             MOV      R0,R5
   \   0000013C   0x.... 0x....      BL       OS_Q_Purge
   \   00000140   0xE04B             B.N      ??spi_mgr_1
   \                     ??spi_mgr_9: (+1)
   \   00000142   0xF8B4 0x106C      LDRH     R1,[R4, #+108]
   \   00000146   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   0000014A   0xF041 0x0110      ORR      R1,R1,#0x10
   \   0000014E   0xF8A4 0x006E      STRH     R0,[R4, #+110]
   \   00000152   0xF8A4 0x106C      STRH     R1,[R4, #+108]
   \   00000156   0xF104 0x0078      ADD      R0,R4,#+120
   \   0000015A   0x2100             MOVS     R1,#+0
   \   0000015C   0x2200             MOVS     R2,#+0
   \   0000015E   0x2300             MOVS     R3,#+0
   \   00000160   0x2500             MOVS     R5,#+0
   \   00000162   0xC02E             STM      R0!,{R1-R3,R5}
   \   00000164   0x.... 0x....      LDR.W    R5,??DataTable10_6
   \   00000168   0x6A60             LDR      R0,[R4, #+36]
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable10_7
   \   0000016E   0x60A8             STR      R0,[R5, #+8]
   \   00000170   0x2001             MOVS     R0,#+1
   \   00000172   0x.... 0x....      BL       OS_SignalEvent
   \   00000176   0xF8B4 0x006C      LDRH     R0,[R4, #+108]
   \   0000017A   0xF64F 0x71EF      MOVW     R1,#+65519
   \   0000017E   0x4008             ANDS     R0,R1,R0
   \   00000180   0xF8A4 0x006C      STRH     R0,[R4, #+108]
   \   00000184   0x68A9             LDR      R1,[R5, #+8]
   \   00000186   0x.... 0x....      ADR.W    R0,?_0
   \   0000018A   0x.... 0x....      BL       log1
   \   0000018E   0x2000             MOVS     R0,#+0
   \   00000190   0xB00A             ADD      SP,SP,#+40
   \   00000192   0xBD70             POP      {R4-R6,PC}
   \                     ??spi_mgr_10: (+1)
   \   00000194   0xF8B4 0x106C      LDRH     R1,[R4, #+108]
   \   00000198   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   0000019C   0xF041 0x0110      ORR      R1,R1,#0x10
   \   000001A0   0xF8A4 0x006E      STRH     R0,[R4, #+110]
   \   000001A4   0xF8A4 0x106C      STRH     R1,[R4, #+108]
   \   000001A8   0xF104 0x0078      ADD      R0,R4,#+120
   \   000001AC   0x2100             MOVS     R1,#+0
   \   000001AE   0x2200             MOVS     R2,#+0
   \   000001B0   0x2300             MOVS     R3,#+0
   \   000001B2   0x2500             MOVS     R5,#+0
   \   000001B4   0xC02E             STM      R0!,{R1-R3,R5}
   \   000001B6   0x6A60             LDR      R0,[R4, #+36]
   \   000001B8   0x2801             CMP      R0,#+1
   \   000001BA   0xD807             BHI.N    ??spi_mgr_11
   \   000001BC   0x6720             STR      R0,[R4, #+112]
   \   000001BE   0x6AA0             LDR      R0,[R4, #+40]
   \   000001C0   0x6760             STR      R0,[R4, #+116]
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable10_8
   \   000001C6   0x6800             LDR      R0,[R0, #+0]
   \   000001C8   0x67A0             STR      R0,[R4, #+120]
   \   000001CA   0xE006             B.N      ??spi_mgr_1
   \                     ??spi_mgr_11: (+1)
   \   000001CC   0x6721             STR      R1,[R4, #+112]
   \   000001CE   0x6761             STR      R1,[R4, #+116]
   \   000001D0   0xE003             B.N      ??spi_mgr_1
   \                     ??spi_mgr_2: (+1)
   \   000001D2   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   000001D6   0xF8A4 0x006E      STRH     R0,[R4, #+110]
   \                     ??spi_mgr_1: (+1)
   \   000001DA   0xF64F 0x71EF      MOVW     R1,#+65519
   \   000001DE   0xF8B4 0x006C      LDRH     R0,[R4, #+108]
   \   000001E2   0x4008             ANDS     R0,R1,R0
   \   000001E4   0xF8A4 0x006C      STRH     R0,[R4, #+108]
   \                     ??spi_mgr_12: (+1)
   \   000001E8   0x2000             MOVS     R0,#+0
   \   000001EA   0xB00A             ADD      SP,SP,#+40
   \   000001EC   0xBD70             POP      {R4-R6,PC}       ;; return
    307          }
    308          
    309          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    310          void Task_spi(void) {
   \                     Task_spi: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    311             OS_TASK_EVENT evt;
    312          #if defined LCD
    313             char buf[ 64 ];   
    314             goto_cursor(0x00);
    315             sprintf( (char*)buf, "hallo %d.%d", verMajor, verMinor );
    316             lcd_print((u8*)buf);
    317             goto_cursor(0x40);
    318             sprintf( buf, "%s%s", __DATE__, __TIME__);
    319             lcd_print((u8*)buf);
    320          
    321             //OS_Delay (500);
    322          
    323             lcd_clear();
    324          #endif
    325             spi_slave_init();
   \   00000004   0x.... 0x....      BL       spi_slave_init
    326          
    327             OS_ARM_ISRSetPrio( DMA1_Channel4_IRQn + 16, 140 );   // Set lowest Priority, ALL BITS set
   \   00000008   0x218C             MOVS     R1,#+140
   \   0000000A   0x201E             MOVS     R0,#+30
   \   0000000C   0x.... 0x....      BL       OS_ARM_ISRSetPrio
    328             OS_ARM_ISRSetPrio( DMA1_Channel5_IRQn + 16, 140 );   // Set lowest Priority, ALL BITS set
   \   00000010   0x218C             MOVS     R1,#+140
   \   00000012   0x201F             MOVS     R0,#+31
   \   00000014   0x.... 0x....      BL       OS_ARM_ISRSetPrio
    329             OS_ARM_EnableISR( SPI2_IRQn + 16 );
   \   00000018   0x2034             MOVS     R0,#+52
   \   0000001A   0x.... 0x....      BL       OS_ARM_EnableISR
    330             OS_ARM_EnableISR( DMA1_Channel4_IRQn + 16 );
   \   0000001E   0x201E             MOVS     R0,#+30
   \   00000020   0x.... 0x....      BL       OS_ARM_EnableISR
    331             OS_ARM_EnableISR( DMA1_Channel5_IRQn + 16 );
   \   00000024   0x201F             MOVS     R0,#+31
   \   00000026   0x.... 0x....      BL       OS_ARM_EnableISR
    332          
    333             OS_CreateTimer( &timer100, timer100_cb, 100 );
   \   0000002A   0x.... 0x....      LDR.W    R4,??DataTable10_2
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable10_9
   \   00000032   0x2264             MOVS     R2,#+100
   \   00000034   0xF104 0x00EC      ADD      R0,R4,#+236
   \   00000038   0x.... 0x....      BL       OS_CreateTimer
    334             OS_CreateTimer( &spi_ok_timer, spi_ok_timer_cb, 2000 );
   \   0000003C   0xF44F 0x62FA      MOV      R2,#+2000
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable10_10
   \   00000044   0x.... 0x....      ADR.W    R5,?_1
   \   00000048   0x.... 0x....      LDR.W    R6,??DataTable10_11  ;; 0x40010c08
   \   0000004C   0xF504 0x7080      ADD      R0,R4,#+256
   \   00000050   0x.... 0x....      BL       OS_CreateTimer
    335             OS_CreateTimer( &spi_sync_timer, spi_sync_timer_cb, 50 );
   \   00000054   0x2232             MOVS     R2,#+50
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable10_12
   \   0000005A   0xF504 0x708A      ADD      R0,R4,#+276
   \   0000005E   0x.... 0x....      BL       OS_CreateTimer
    336             OS_StartTimer( &timer100 );
   \   00000062   0xF104 0x00EC      ADD      R0,R4,#+236
   \   00000066   0x.... 0x....      BL       OS_StartTimer
    337             OS_StartTimer( &spi_ok_timer );
   \   0000006A   0xF504 0x7080      ADD      R0,R4,#+256
   \   0000006E   0x.... 0x....      BL       OS_StartTimer
    338          
    339             for ( ; ; ) {
    340          
    341                evt = OS_WaitEvent( SPI_TASK_EVT_RX
    342                                  | SPI_TASK_EVT_RX_SYNC
    343                                  | SPI_TASK_EVT
    344                                  | SPI_TASK_EVT_100MS );
   \                     ??Task_spi_0: (+1)
   \   00000072   0x201E             MOVS     R0,#+30
   \   00000074   0x.... 0x....      BL       OS_WaitEvent
   \   00000078   0x4607             MOV      R7,R0
    345          
    346                if ( evt & SPI_TASK_EVT_RX_SYNC ) {
   \   0000007A   0x0738             LSLS     R0,R7,#+28
   \   0000007C   0xD519             BPL.N    ??Task_spi_1
    347          
    348                   for ( spi_cs_wait = 0; spi_cs_wait < 20; spi_cs_wait++ ) {
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xF8C4 0x00E4      STR      R0,[R4, #+228]
    349                      if ( GPIOB->IDR & GPIO_Pin_12 )
   \                     ??Task_spi_2: (+1)
   \   00000084   0x6830             LDR      R0,[R6, #+0]
   \   00000086   0x04C0             LSLS     R0,R0,#+19
   \   00000088   0xD409             BMI.N    ??Task_spi_3
    350                         break;
    351                      OS_Delay(1);
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x.... 0x....      BL       OS_Delay
    352                   }
   \   00000090   0xF8D4 0x00E4      LDR      R0,[R4, #+228]
   \   00000094   0x1C40             ADDS     R0,R0,#+1
   \   00000096   0x2814             CMP      R0,#+20
   \   00000098   0xF8C4 0x00E4      STR      R0,[R4, #+228]
   \   0000009C   0xD3F2             BCC.N    ??Task_spi_2
    353          
    354                   configure_spi();
   \                     ??Task_spi_3: (+1)
   \   0000009E   0x.... 0x....      BL       configure_spi
    355          #if defined LCD
    356                   sprintf( buf, "[%.4X] %lu", gpiob_idr, spi_cs_wait );
    357                   goto_cursor( 0x40 );
    358                   lcd_print( buf );
    359          #endif
    360                   OS_Delay(1);
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x.... 0x....      BL       OS_Delay
    361                   log("spi resync, %lums\r\n", spi_cs_wait );
   \   000000A8   0xF8D4 0x10E4      LDR      R1,[R4, #+228]
   \   000000AC   0x4628             MOV      R0,R5
   \   000000AE   0x.... 0x....      BL       log1
    362                }
    363          
    364                if ( evt & SPI_TASK_EVT ) {
   \                     ??Task_spi_1: (+1)
   \   000000B2   0x0778             LSLS     R0,R7,#+29
   \   000000B4   0xD5DD             BPL.N    ??Task_spi_0
    365                   spi_mgr( );
   \   000000B6   0x.... 0x....      BL       spi_mgr
   \   000000BA   0xE7DA             B.N      ??Task_spi_0
    366                }
    367          
    368                if ( evt & SPI_TASK_EVT_RX ) {
    369          #if defined LCD        
    370          #if 0
    371                   sprintf( buf,"[%.2X]", spi_out[1].fields.padding[0]);
    372                   goto_cursor( 0x40 );
    373                   lcd_print( buf );
    374          #endif
    375          #if 0
    376                   sprintf( buf, "[%lu]", DMA1_Channel5->CNDTR );
    377                   goto_cursor( 0x04 );
    378                   lcd_print( buf );
    379          #endif
    380          #endif         
    381                }
    382          
    383                if ( evt & SPI_TASK_EVT_100MS ) {
    384          #if defined LCD
    385                   sprintf( buf, "[%.2X]%.2X%.2X%.2X"
    386                           , spi_out[1].raw[ 28 ]
    387                           , spi_out[1].raw[ 29 ]
    388                           , spi_out[1].raw[ 30 ]
    389                           , spi_out[1].raw[ 31 ]
    390                   );
    391                   goto_cursor( 0x06 );
    392                   lcd_print( buf );
    393          #endif
    394                }
    395             }
    396          }
    397          ////////////////////////////////////////////////////////////////////////////////
    398          /* DMA Channel4 Interrupt ----------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    399          __irq void DMA1_Channel4_IRQHandler(void) {
   \                     DMA1_Channel4_IRQHandler: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    400          
    401             u8 valid;
    402             u8 changes;
    403             
    404             OS_EnterNestableInterrupt();
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable10_13
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable10_14
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
    405          
    406             valid = 0;
    407             changes = 0;
    408             
    409             if ( spi_out[1].fields.padding[ 1 ] == 'i'
    410               && spi_out[1].fields.padding[ 2 ] == 'v'
    411               && spi_out[1].fields.padding[ 3 ] == 'a'
    412             ) {
   \   0000000E   0x.... 0x....      LDR.W    R6,??DataTable10_2
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x7020             STRB     R0,[R4, #+0]
   \   00000016   0x2700             MOVS     R7,#+0
   \   00000018   0x7828             LDRB     R0,[R5, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x7028             STRB     R0,[R5, #+0]
   \   0000001E   0x46B8             MOV      R8,R7
   \   00000020   0xF896 0x003D      LDRB     R0,[R6, #+61]
   \   00000024   0x2869             CMP      R0,#+105
   \   00000026   0xBF01             ITTTT    EQ 
   \   00000028   0xF896 0x003E      LDRBEQ   R0,[R6, #+62]
   \   0000002C   0x2876             CMPEQ    R0,#+118
   \   0000002E   0xF896 0x003F      LDRBEQ   R0,[R6, #+63]
   \   00000032   0x2861             CMPEQ    R0,#+97
   \   00000034   0xD10B             BNE.N    ??DMA1_Channel4_IRQHandler_1
    413                LED4_ON;
   \   00000036   0xF44F 0x7100      MOV      R1,#+512
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable10_15  ;; 0x40011000
   \   0000003E   0x.... 0x....      BL       GPIO_ResetBits
    414                OS_RetriggerTimer( &spi_ok_timer );
   \   00000042   0xF506 0x7080      ADD      R0,R6,#+256
   \   00000046   0x.... 0x....      BL       OS_RetriggerTimer
    415                valid = 1;
   \   0000004A   0x2701             MOVS     R7,#+1
   \   0000004C   0xE005             B.N      ??DMA1_Channel4_IRQHandler_2
    416             } else {
    417                LED4_OFF;
   \                     ??DMA1_Channel4_IRQHandler_1: (+1)
   \   0000004E   0xF44F 0x7100      MOV      R1,#+512
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable10_15  ;; 0x40011000
   \   00000056   0x.... 0x....      BL       GPIO_SetBits
    418             }
    419          
    420             changes = ( spi_out[1].fields.cmd !=  prev_spi_out.fields.cmd )
    421                    || ( spi_out[1].fields.param1 !=  prev_spi_out.fields.param1 );
   \                     ??DMA1_Channel4_IRQHandler_2: (+1)
   \   0000005A   0x8C70             LDRH     R0,[R6, #+34]
   \   0000005C   0xF8B6 0x10C2      LDRH     R1,[R6, #+194]
   \   00000060   0x4288             CMP      R0,R1
   \   00000062   0xBF03             ITTTE    EQ 
   \   00000064   0x6A70             LDREQ    R0,[R6, #+36]
   \   00000066   0xF8D6 0x10C4      LDREQ    R1,[R6, #+196]
   \   0000006A   0x4288             CMPEQ    R0,R1
   \   0000006C   0xF04F 0x0801      MOVNE    R8,#+1
    422          
    423             if ( valid && changes ) {
   \   00000070   0xEA17 0x0F08      TST      R7,R8
   \   00000074   0xD023             BEQ.N    ??DMA1_Channel4_IRQHandler_3
    424                memcpy( prev_spi_out.raw, spi_out[1].raw, sizeof( spi_out[1].raw ) );
   \   00000076   0xF106 0x0020      ADD      R0,R6,#+32
   \   0000007A   0xE8B0 0x500C      LDM      R0!,{R2,R3,R12,LR}
   \   0000007E   0xF106 0x01C0      ADD      R1,R6,#+192
   \   00000082   0xE8A1 0x500C      STM      R1!,{R2,R3,R12,LR}
   \   00000086   0xE8B0 0x500C      LDM      R0!,{R2,R3,R12,LR}
   \   0000008A   0xE8A1 0x500C      STM      R1!,{R2,R3,R12,LR}
    425                if ( spi_mgr_desc.state == spiState_Idle ){
   \   0000008E   0xF8B6 0x00E8      LDRH     R0,[R6, #+232]
   \   00000092   0xB9A0             CBNZ.N   R0,??DMA1_Channel4_IRQHandler_3
    426                   u16 cmd = spi_out[1].fields.cmd;
    427                   switch ( cmd ) {
   \   00000094   0x8C70             LDRH     R0,[R6, #+34]
   \   00000096   0x280C             CMP      R0,#+12
   \   00000098   0xD80D             BHI.N    ??DMA1_Channel4_IRQHandler_4
   \   0000009A   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??DMA1_Channel4_IRQHandler_0:
   \   0000009E   0x07 0x07          DC8      0x7,0x7,0xC,0xC
   \              0x0C 0x0C    
   \   000000A2   0x07 0x07          DC8      0x7,0x7,0x7,0x7
   \              0x07 0x07    
   \   000000A6   0x0C 0x07          DC8      0xC,0x7,0x7,0x7
   \              0x07 0x07    
   \   000000AA   0x07 0x00          DC8      0x7,0x0
    428                      case spiCmd_NoCmd:
    429                      case spiCmd_FwUpdateInit:
    430                      case spiCmd_ReadLog:
    431                      case spiCmd_DexQueryStart:
    432                      case spiCmd_DexQueryAbort:
    433                      case spiCmd_DexQueryRead:
    434                      case spiCmd_GetFwVersion:
    435                      case spiCmd_EmuFbEvent:
    436                      case spiCmd_GetFbEvent:
    437                      case spiCmd_ReadData:
    438                         OS_SignalEvent( SPI_TASK_EVT, &TCB1 );
   \                     ??DMA1_Channel4_IRQHandler_5: (+1)
   \   000000AC   0x....             LDR.N    R1,??DataTable10_1
   \   000000AE   0x2004             MOVS     R0,#+4
   \   000000B0   0x.... 0x....      BL       OS_SignalEvent
    439                         //spi_mgr();
    440                         break;
   \   000000B4   0xE003             B.N      ??DMA1_Channel4_IRQHandler_3
    441          
    442                      default:
    443                         spi_in[0].fields.state = spi_out[1].fields.cmd | spiCmd_Ack;
   \                     ??DMA1_Channel4_IRQHandler_4: (+1)
   \   000000B6   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   000000BA   0xF8A6 0x006E      STRH     R0,[R6, #+110]
    444                         break;
    445                   }
    446                }
    447             }
    448          
    449             fb.en_log = spi_out[1].fields.control.bits.en_fb_log;
   \                     ??DMA1_Channel4_IRQHandler_3: (+1)
   \   000000BE   0x....             LDR.N    R0,??DataTable10_6
   \   000000C0   0x8C31             LDRH     R1,[R6, #+32]
   \   000000C2   0x6842             LDR      R2,[R0, #+4]
   \   000000C4   0xF361 0x0282      BFI      R2,R1,#+2,#+1
   \   000000C8   0x6042             STR      R2,[R0, #+4]
    450          #if defined DEX   
    451             dex.enable = spi_out[1].fields.control.bits.en_dex;
    452          #endif
    453             DMA1->IFCR |= DMA1_IT_GL4;
   \   000000CA   0x....             LDR.N    R0,??DataTable10_16  ;; 0x40020004
   \   000000CC   0x6801             LDR      R1,[R0, #+0]
   \   000000CE   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   000000D2   0x6001             STR      R1,[R0, #+0]
    454          
    455             if ( valid ) {
   \   000000D4   0xB127             CBZ.N    R7,??DMA1_Channel4_IRQHandler_6
    456                OS_SignalEvent( SPI_TASK_EVT_RX, &TCB1 );
   \   000000D6   0x....             LDR.N    R1,??DataTable10_1
   \   000000D8   0x2002             MOVS     R0,#+2
   \   000000DA   0x.... 0x....      BL       OS_SignalEvent
   \   000000DE   0xE00A             B.N      ??DMA1_Channel4_IRQHandler_7
    457             } else if ( ( GPIOB->IDR & GPIO_Pin_12 ) == 0 ) {
   \                     ??DMA1_Channel4_IRQHandler_6: (+1)
   \   000000E0   0x....             LDR.N    R7,??DataTable10_11  ;; 0x40010c08
   \   000000E2   0x6838             LDR      R0,[R7, #+0]
   \   000000E4   0x04C0             LSLS     R0,R0,#+19
   \   000000E6   0xD406             BMI.N    ??DMA1_Channel4_IRQHandler_7
    458                OS_SignalEvent( SPI_TASK_EVT_RX_SYNC, &TCB1 );
   \   000000E8   0x....             LDR.N    R1,??DataTable10_1
   \   000000EA   0x2008             MOVS     R0,#+8
   \   000000EC   0x.... 0x....      BL       OS_SignalEvent
    459                gpiob_idr = GPIOB->IDR;     
   \   000000F0   0x6838             LDR      R0,[R7, #+0]
   \   000000F2   0xF8A6 0x00E0      STRH     R0,[R6, #+224]
    460             }
    461             OS_LeaveNestableInterrupt();
   \                     ??DMA1_Channel4_IRQHandler_7: (+1)
   \   000000F6   0x2080             MOVS     R0,#+128
   \   000000F8   0xF380 0x8811      MSR      BASEPRI,R0
   \   000000FC   0xBF00             Nop      
   \   000000FE   0xBF00             Nop      
   \   00000100   0x7820             LDRB     R0,[R4, #+0]
   \   00000102   0x1E40             SUBS     R0,R0,#+1
   \   00000104   0x7020             STRB     R0,[R4, #+0]
   \   00000106   0x7828             LDRB     R0,[R5, #+0]
   \   00000108   0x2801             CMP      R0,#+1
   \   0000010A   0xD103             BNE.N    ??DMA1_Channel4_IRQHandler_8
   \   0000010C   0x6868             LDR      R0,[R5, #+4]
   \   0000010E   0xB108             CBZ.N    R0,??DMA1_Channel4_IRQHandler_8
   \   00000110   0x.... 0x....      BL       OS_SwitchFromInt
   \                     ??DMA1_Channel4_IRQHandler_8: (+1)
   \   00000114   0x7828             LDRB     R0,[R5, #+0]
   \   00000116   0x1E40             SUBS     R0,R0,#+1
   \   00000118   0x7028             STRB     R0,[R5, #+0]
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0xF380 0x8811      MSR      BASEPRI,R0
    462          }
   \   00000120   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    463          ////////////////////////////////////////////////////////////////////////////////
    464          /* DMA Channel5 Interrupt ----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    465          __irq void DMA1_Channel5_IRQHandler(void) {
   \                     DMA1_Channel5_IRQHandler: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    466          
    467             OS_EnterNestableInterrupt();
   \   00000002   0x....             LDR.N    R4,??DataTable10_13
   \   00000004   0x....             LDR.N    R5,??DataTable10_14
    468          
    469             spi_in[0].fields.status.bits.bootloader = 0;
    470             spi_in[0].fields.status.bits.error = 0;
    471             spi_in[0].fields.status.bits.nda = 0;
   \   00000006   0x....             LDR.N    R6,??DataTable10_2
   \   00000008   0xB081             SUB      SP,SP,#+4
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
   \   00000010   0xF64F 0x71F8      MOVW     R1,#+65528
   \   00000014   0x7828             LDRB     R0,[R5, #+0]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x7028             STRB     R0,[R5, #+0]
   \   0000001A   0xF24F 0x07F7      MOVW     R7,#+61687
   \   0000001E   0xF8B6 0x006C      LDRH     R0,[R6, #+108]
   \   00000022   0x4008             ANDS     R0,R1,R0
   \   00000024   0xF8A6 0x006C      STRH     R0,[R6, #+108]
    472             spi_in[0].fields.status.bits.log = ( isLogEmpty() >  0 );
   \   00000028   0x.... 0x....      BL       isLogEmpty
    473          #if defined DEX     
    474             spi_in[0].fields.status.bits.dex_rdy = ( dex.state == dexState_Idle );
    475             spi_in[0].fields.status.bits.dex_cmplt = dex.triggers.bits.query_cmplt;
    476          #endif   
    477             //spi_in[0].fields.status.bits.ve_inhibit = ?
    478             spi_in[0].fields.status.bits.fb_m_tmo = fb.m_tmo;
    479             spi_in[0].fields.status.bits.fb_s_tmo = fb.s_tmo;
    480             spi_in[0].fields.status.bits.fb_type = fb.type;
   \   0000002C   0xF8B6 0x306C      LDRH     R3,[R6, #+108]
   \   00000030   0x....             LDR.N    R1,??DataTable10_6
   \   00000032   0x684A             LDR      R2,[R1, #+4]
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x403B             ANDS     R3,R7,R3
   \   00000038   0x1E40             SUBS     R0,R0,#+1
   \   0000003A   0x4180             SBCS     R0,R0,R0
   \   0000003C   0x43C0             MVNS     R0,R0
   \   0000003E   0x0FC0             LSRS     R0,R0,#+31
   \   00000040   0xEA43 0x00C0      ORR      R0,R3,R0, LSL #+3
   \   00000044   0xF002 0x0301      AND      R3,R2,#0x1
   \   00000048   0xEA40 0x2003      ORR      R0,R0,R3, LSL #+8
   \   0000004C   0xF3C2 0x0240      UBFX     R2,R2,#+1,#+1
   \   00000050   0x0289             LSLS     R1,R1,#+10
   \   00000052   0xEA40 0x2042      ORR      R0,R0,R2, LSL #+9
   \   00000056   0xF401 0x6140      AND      R1,R1,#0xC00
   \   0000005A   0x4308             ORRS     R0,R1,R0
   \   0000005C   0xF8A6 0x006C      STRH     R0,[R6, #+108]
    481             spi_in[0].fields.status.bits.fb_evt = OS_Q_GetMessageCnt( &fb_evt_q ) > 0;
   \   00000060   0x....             LDR.N    R0,??DataTable10_5
   \   00000062   0x.... 0x....      BL       OS_Q_GetMessageCnt
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xBFAC             ITE      GE 
   \   0000006A   0x2001             MOVGE    R0,#+1
   \   0000006C   0x2000             MOVLT    R0,#+0
   \   0000006E   0xF8B6 0x106C      LDRH     R1,[R6, #+108]
   \   00000072   0xF64E 0x72FF      MOVW     R2,#+61439
   \   00000076   0x4011             ANDS     R1,R2,R1
   \   00000078   0xEA41 0x3000      ORR      R0,R1,R0, LSL #+12
   \   0000007C   0xF8A6 0x006C      STRH     R0,[R6, #+108]
    482          
    483             spi_in[0].fields.padding[ 0 ] = spi_out[1].fields.padding[ 0 ];
   \   00000080   0xF896 0x003C      LDRB     R0,[R6, #+60]
   \   00000084   0xF886 0x0088      STRB     R0,[R6, #+136]
    484             spi_in[0].fields.padding[ 1 ] = 'i';
   \   00000088   0x2069             MOVS     R0,#+105
   \   0000008A   0xF886 0x0089      STRB     R0,[R6, #+137]
    485             spi_in[0].fields.padding[ 2 ] = 'v';
   \   0000008E   0x2076             MOVS     R0,#+118
   \   00000090   0xF886 0x008A      STRB     R0,[R6, #+138]
    486             spi_in[0].fields.padding[ 3 ] = 'a';
   \   00000094   0x2061             MOVS     R0,#+97
   \   00000096   0xF886 0x008B      STRB     R0,[R6, #+139]
    487          
    488             DMA1->IFCR |= DMA1_IT_GL5;
   \   0000009A   0x....             LDR.N    R0,??DataTable10_16  ;; 0x40020004
   \   0000009C   0x6801             LDR      R1,[R0, #+0]
   \   0000009E   0xF441 0x3180      ORR      R1,R1,#0x10000
   \   000000A2   0x6001             STR      R1,[R0, #+0]
    489          
    490             OS_RetriggerTimer( &spi_sync_timer );
   \   000000A4   0xF506 0x708A      ADD      R0,R6,#+276
   \   000000A8   0x.... 0x....      BL       OS_RetriggerTimer
    491             OS_LeaveNestableInterrupt();
   \   000000AC   0x2080             MOVS     R0,#+128
   \   000000AE   0xF380 0x8811      MSR      BASEPRI,R0
   \   000000B2   0xBF00             Nop      
   \   000000B4   0xBF00             Nop      
   \   000000B6   0x7820             LDRB     R0,[R4, #+0]
   \   000000B8   0x1E40             SUBS     R0,R0,#+1
   \   000000BA   0x7020             STRB     R0,[R4, #+0]
   \   000000BC   0x7828             LDRB     R0,[R5, #+0]
   \   000000BE   0x2801             CMP      R0,#+1
   \   000000C0   0xD103             BNE.N    ??DMA1_Channel5_IRQHandler_0
   \   000000C2   0x6868             LDR      R0,[R5, #+4]
   \   000000C4   0xB108             CBZ.N    R0,??DMA1_Channel5_IRQHandler_0
   \   000000C6   0x.... 0x....      BL       OS_SwitchFromInt
   \                     ??DMA1_Channel5_IRQHandler_0: (+1)
   \   000000CA   0x7828             LDRB     R0,[R5, #+0]
   \   000000CC   0x1E40             SUBS     R0,R0,#+1
   \   000000CE   0x7028             STRB     R0,[R5, #+0]
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0xF380 0x8811      MSR      BASEPRI,R0
    492          }
   \   000000D6   0xB001             ADD      SP,SP,#+4
   \   000000D8   0xBDF0             POP      {R4-R7,PC}       ;; return
    493          ////////////////////////////////////////////////////////////////////////////////
    494          /* SPI2 Interrupt ----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    495          __irq void SPI2_IRQHandler(void) {
    496          }
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    497          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    498          void configure_spi(void) {
   \                     configure_spi: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
    499          
    500             DMA_DeInit(DMA1_Channel4);
   \   00000004   0x....             LDR.N    R4,??DataTable10_17  ;; 0x40020044
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       DMA_DeInit
    501             DMA_DeInit(DMA1_Channel5);
   \   0000000E   0x....             LDR.N    R5,??DataTable10_18  ;; 0x40020058
   \   00000010   0x.... 0x....      LDR.W    R8,??DataTable10_19  ;; 0x40003800
   \   00000014   0x....             LDR.N    R7,??DataTable10_2
   \   00000016   0x....             LDR.N    R6,??DataTable10_20  ;; 0x4000380c
   \   00000018   0x4628             MOV      R0,R5
   \   0000001A   0x.... 0x....      BL       DMA_DeInit
    502             SPI_I2S_DeInit(SPI2);
   \   0000001E   0x4640             MOV      R0,R8
   \   00000020   0x.... 0x....      BL       SPI_I2S_DeInit
    503          
    504          /* DMA Channel4 Configuration ----------------------------------------------*/
    505             DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI2->DR;
    506             DMA_InitStructure.DMA_MemoryBaseAddr = (u32)spi_out[0].raw;
    507             DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x643E             STR      R6,[R7, #+64]
   \   00000028   0x64B8             STR      R0,[R7, #+72]
    508             DMA_InitStructure.DMA_BufferSize = 2 * SPI_RX_SIZE;
    509             DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    510             DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    511             DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    512             DMA_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte;
    513             DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    514             DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
   \   0000002A   0xF44F 0x5940      MOV      R9,#+12288
   \   0000002E   0x2040             MOVS     R0,#+64
   \   00000030   0x64F8             STR      R0,[R7, #+76]
   \   00000032   0x647F             STR      R7,[R7, #+68]
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x6538             STR      R0,[R7, #+80]
   \   00000038   0xF8C7 0x9064      STR      R9,[R7, #+100]
   \   0000003C   0x2080             MOVS     R0,#+128
   \   0000003E   0x6578             STR      R0,[R7, #+84]
    515             DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    516             DMA_Init(DMA1_Channel4, &DMA_InitStructure);
   \   00000040   0xF107 0x0140      ADD      R1,R7,#+64
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x65B8             STR      R0,[R7, #+88]
   \   00000048   0x65F8             STR      R0,[R7, #+92]
   \   0000004A   0x2020             MOVS     R0,#+32
   \   0000004C   0x6638             STR      R0,[R7, #+96]
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x66B8             STR      R0,[R7, #+104]
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       DMA_Init
    517          
    518          /* DMA Channel5 Configuration ----------------------------------------------*/
    519             memset(&DMA_InitStructure, 0, sizeof(DMA_InitStructure));
   \   00000058   0x212C             MOVS     R1,#+44
   \   0000005A   0xF107 0x0040      ADD      R0,R7,#+64
   \   0000005E   0x.... 0x....      BL       __aeabi_memclr4
    520             DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SPI2->DR;
   \   00000062   0x643E             STR      R6,[R7, #+64]
    521             DMA_InitStructure.DMA_MemoryBaseAddr = (u32)spi_in[0].raw;
   \   00000064   0xF107 0x006C      ADD      R0,R7,#+108
   \   00000068   0x6478             STR      R0,[R7, #+68]
    522             DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
    523             DMA_InitStructure.DMA_BufferSize = SPI_TX_SIZE;
    524             DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    525             DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    526             DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    527             DMA_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte;
    528             DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;//DMA_Mode_Normal;//
    529             DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
   \   0000006A   0xF8C7 0x9064      STR      R9,[R7, #+100]
   \   0000006E   0x2010             MOVS     R0,#+16
   \   00000070   0x64B8             STR      R0,[R7, #+72]
    530             DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    531             DMA_Init(DMA1_Channel5, &DMA_InitStructure);
   \   00000072   0xF107 0x0140      ADD      R1,R7,#+64
   \   00000076   0x2020             MOVS     R0,#+32
   \   00000078   0x64F8             STR      R0,[R7, #+76]
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x6538             STR      R0,[R7, #+80]
   \   0000007E   0x2080             MOVS     R0,#+128
   \   00000080   0x6578             STR      R0,[R7, #+84]
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x65B8             STR      R0,[R7, #+88]
   \   00000086   0x65F8             STR      R0,[R7, #+92]
   \   00000088   0x2020             MOVS     R0,#+32
   \   0000008A   0x6638             STR      R0,[R7, #+96]
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x66B8             STR      R0,[R7, #+104]
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       DMA_Init
    532          
    533             DMA_Cmd(DMA1_Channel4, ENABLE );
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0x4620             MOV      R0,R4
   \   0000009A   0x.... 0x....      BL       DMA_Cmd
    534             DMA_Cmd(DMA1_Channel5, ENABLE );
   \   0000009E   0x2101             MOVS     R1,#+1
   \   000000A0   0x4628             MOV      R0,R5
   \   000000A2   0x.... 0x....      BL       DMA_Cmd
    535          
    536          /* Config SPI[2] = Master */
    537             SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xF8A7 0x00AC      STRH     R0,[R7, #+172]
    538             SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
   \   000000AC   0xF8A7 0x00AE      STRH     R0,[R7, #+174]
    539             SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
   \   000000B0   0xF8A7 0x00B0      STRH     R0,[R7, #+176]
    540             SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;//SPI_CPOL_Low
   \   000000B4   0xF8A7 0x00B2      STRH     R0,[R7, #+178]
    541             SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;//SPI_CPHA_2Edge
    542             SPI_InitStructure.SPI_NSS = SPI_NSS_Hard;//;SPI_NSS_Soft
    543             SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
    544             SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
    545             SPI_InitStructure.SPI_CRCPolynomial = 1;
    546             SPI_Init(SPI2, &SPI_InitStructure);
   \   000000B8   0xF107 0x01AC      ADD      R1,R7,#+172
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0xF8A7 0x00B4      STRH     R0,[R7, #+180]
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0xF8A7 0x00B6      STRH     R0,[R7, #+182]
   \   000000C8   0x2008             MOVS     R0,#+8
   \   000000CA   0xF8A7 0x00B8      STRH     R0,[R7, #+184]
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0xF8A7 0x00BA      STRH     R0,[R7, #+186]
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0xF8A7 0x00BC      STRH     R0,[R7, #+188]
   \   000000DA   0x4640             MOV      R0,R8
   \   000000DC   0x.... 0x....      BL       SPI_Init
    547          
    548             SPI_I2S_ITConfig( SPI2, SPI_I2S_IT_RXNE | SPI_I2S_IT_TXE | SPI_I2S_IT_ERR, ENABLE );
   \   000000E0   0x2201             MOVS     R2,#+1
   \   000000E2   0x2171             MOVS     R1,#+113
   \   000000E4   0x4640             MOV      R0,R8
   \   000000E6   0x.... 0x....      BL       SPI_I2S_ITConfig
    549          
    550             SPI2->CR2 = SPI_I2S_DMAReq_Rx | SPI_I2S_DMAReq_Tx;
   \   000000EA   0x2003             MOVS     R0,#+3
   \   000000EC   0xF8A8 0x0004      STRH     R0,[R8, #+4]
    551          
    552             DMA1_Channel4->CCR |= 3;
    553             DMA1_Channel5->CCR |= 3;
    554          
    555             /* Enable SPI2 */
    556             SPI_Cmd(SPI2, ENABLE);
   \   000000F0   0x2101             MOVS     R1,#+1
   \   000000F2   0x6820             LDR      R0,[R4, #+0]
   \   000000F4   0xF040 0x0003      ORR      R0,R0,#0x3
   \   000000F8   0x6020             STR      R0,[R4, #+0]
   \   000000FA   0x6828             LDR      R0,[R5, #+0]
   \   000000FC   0xF040 0x0003      ORR      R0,R0,#0x3
   \   00000100   0x6028             STR      R0,[R5, #+0]
   \   00000102   0xB001             ADD      SP,SP,#+4
   \   00000104   0x4640             MOV      R0,R8
   \   00000106   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   0000010A   0x.... 0x....      B.W      SPI_Cmd
    557          }
    558          ////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    559          void spi_slave_init() {
   \                     spi_slave_init: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    560          
    561             memset( spi_out[0].raw, 0 , sizeof( spi_out[0].raw ) );
   \   00000002   0x....             LDR.N    R0,??DataTable10_2
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xC01E             STM      R0!,{R1-R4}
   \   00000010   0xC01E             STM      R0!,{R1-R4}
   \   00000012   0x3820             SUBS     R0,R0,#+32
    562             memset( spi_out[1].raw, 0 , sizeof( spi_out[1].raw ) );
   \   00000014   0xF100 0x0120      ADD      R1,R0,#+32
   \   00000018   0x2500             MOVS     R5,#+0
   \   0000001A   0xC13C             STM      R1!,{R2-R5}
   \   0000001C   0xC13C             STM      R1!,{R2-R5}
    563             memset( spi_in[0].raw, 0 , sizeof( spi_in[0].raw ) );
   \   0000001E   0xF100 0x016C      ADD      R1,R0,#+108
   \   00000022   0xC13C             STM      R1!,{R2-R5}
   \   00000024   0xC13C             STM      R1!,{R2-R5}
    564             memset( spi_in[1].raw, 0 , sizeof( spi_in[1].raw ) );
   \   00000026   0xC13C             STM      R1!,{R2-R5}
   \   00000028   0xC13C             STM      R1!,{R2-R5}
    565             memset( prev_spi_out.raw, 0 , sizeof( prev_spi_out.raw ) );
   \   0000002A   0xF100 0x01C0      ADD      R1,R0,#+192
    566             memset( &spi_mgr_desc, 0 , sizeof( spi_mgr_desc ) );
   \   0000002E   0x30E8             ADDS     R0,R0,#+232
   \   00000030   0xC13C             STM      R1!,{R2-R5}
   \   00000032   0xC13C             STM      R1!,{R2-R5}
   \   00000034   0x2102             MOVS     R1,#+2
   \   00000036   0x.... 0x....      BL       __aeabi_memclr4
    567          
    568             /* Enable write access to IWDG_PR and IWDG_RLR registers */
    569             IWDG_WriteAccessCmd( IWDG_WriteAccess_Enable );
   \   0000003A   0xF245 0x5055      MOVW     R0,#+21845
   \   0000003E   0x.... 0x....      BL       IWDG_WriteAccessCmd
    570             /* IWDG counter clock: 40KHz(LSI) / 32 = 1.25 KHz */
    571             IWDG_SetPrescaler( IWDG_Prescaler_32 );
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x.... 0x....      BL       IWDG_SetPrescaler
    572             /* Set counter reload value to 349 */
    573             IWDG_SetReload(349*3);
   \   00000048   0xF240 0x4017      MOVW     R0,#+1047
   \   0000004C   0x.... 0x....      BL       IWDG_SetReload
    574             /* Reload IWDG counter */
    575             IWDG_ReloadCounter();
   \   00000050   0x.... 0x....      BL       IWDG_ReloadCounter
    576             /* Enable IWDG (the LSI oscillator will be enabled by hardware) */
    577          
    578             DBGMCU_Config( DBGMCU_IWDG_STOP, ENABLE );
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0xF44F 0x7080      MOV      R0,#+256
   \   0000005A   0x.... 0x....      BL       DBGMCU_Config
    579             IWDG_Enable();
   \   0000005E   0x.... 0x....      BL       IWDG_Enable
    580          
    581          #if 1
    582          /* Configure SPI2 pins: SCK(PB13) and MOSI(PB15) */
    583             GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
   \   00000062   0x....             LDR.N    R4,??DataTable10_21
    584             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    585             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    586             GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000064   0x....             LDR.N    R5,??DataTable10_15  ;; 0x40011000
   \   00000066   0xF44F 0x4070      MOV      R0,#+61440
   \   0000006A   0x8020             STRH     R0,[R4, #+0]
   \   0000006C   0x4621             MOV      R1,R4
   \   0000006E   0x2003             MOVS     R0,#+3
   \   00000070   0x70A0             STRB     R0,[R4, #+2]
   \   00000072   0x2018             MOVS     R0,#+24
   \   00000074   0x70E0             STRB     R0,[R4, #+3]
   \   00000076   0x....             LDR.N    R0,??DataTable10_22  ;; 0x40010c00
   \   00000078   0x.... 0x....      BL       GPIO_Init
    587          
    588             //LED3
    589             GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \   0000007C   0xF44F 0x7000      MOV      R0,#+512
   \   00000080   0x8020             STRH     R0,[R4, #+0]
    590             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
    591             GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000082   0x4621             MOV      R1,R4
   \   00000084   0x2014             MOVS     R0,#+20
   \   00000086   0x70E0             STRB     R0,[R4, #+3]
   \   00000088   0x4628             MOV      R0,R5
   \   0000008A   0x.... 0x....      BL       GPIO_Init
    592             GPIO_ResetBits(GPIOC, GPIO_Pin_9);   
   \   0000008E   0xF44F 0x7100      MOV      R1,#+512
   \   00000092   0x4628             MOV      R0,R5
   \   00000094   0x.... 0x....      BL       GPIO_ResetBits
    593             GPIO_SetBits(GPIOC, GPIO_Pin_9);
   \   00000098   0xF44F 0x7100      MOV      R1,#+512
   \   0000009C   0x4628             MOV      R0,R5
   \   0000009E   0x.... 0x....      BL       GPIO_SetBits
    594          #endif
    595          
    596             configure_spi();
   \   000000A2   0xB001             ADD      SP,SP,#+4
   \   000000A4   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   000000A8   0x....             B.N      configure_spi
    597          
    598          }
    599          
    600          

   \                                 In section .text, align 2, keep-with-next
    601          void HardFault_Handler   (void) {
    602             //const u16 KR_KEY_Reload = (u16)0xAAAA;
    603             const u16 KR_KEY_Enable = (u16)0xCCCC;
    604          
    605             IWDG->KR = IWDG_WriteAccess_Enable;
   \                     HardFault_Handler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_23  ;; 0x40003000
   \   00000002   0xF245 0x5155      MOVW     R1,#+21845
   \   00000006   0x6001             STR      R1,[R0, #+0]
    606             IWDG->PR = IWDG_Prescaler_4;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6041             STR      R1,[R0, #+4]
    607             IWDG->RLR = 1;
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x6081             STR      R1,[R0, #+8]
    608             IWDG->KR = KR_KEY_Enable;
   \   00000010   0xF64C 0x41CC      MOVW     R1,#+52428
   \   00000014   0x6001             STR      R1,[R0, #+0]
    609             //NVIC_GenerateSystemReset();
    610          }
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     spi_out+0xEC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     TCB1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     spi_out

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     verMajor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     verMinor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     fb_evt_q

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     fb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     TCB2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x........         DC32     t_18b20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x........         DC32     timer100_cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     spi_ok_timer_cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x40010C08         DC32     0x40010c08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     spi_sync_timer_cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     OS_InInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x........         DC32     OS_Global

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x40020044         DC32     0x40020044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x40020058         DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x........         DC32     GPIO_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_23:
   \   00000000   0x40003000         DC32     0x40003000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x66 0x62          DC8 "fb_emu: %d\015\012"
   \              0x5F 0x65    
   \              0x6D 0x75    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x73 0x70          DC8 "spi resync, %lums\015\012"
   \              0x69 0x20    
   \              0x72 0x65    
   \              0x73 0x79    
   \              0x6E 0x63    
   \              0x2C 0x20    
   \              0x25 0x6C    
   \              0x75 0x6D    
   \              0x73 0x0D    
   \              0x0A 0x00    
    611          
    612          
    613          #if 0
    614          /*******************************************************************************
    615          * Function Name  : EXTI15_10_IRQHandler
    616          * Description    : This function handles External lines 15 to 10 interrupt request.
    617          * Input          : None
    618          * Output         : None
    619          * Return         : None
    620          *******************************************************************************/
    621          __irq void EXTI15_10_IRQHandler(void) {
    622            if(EXTI_GetITStatus(EXTI_Line12) != RESET)
    623            {
    624             //SelFunc();
    625              /* Clear the EXTI Line 15 */
    626             EXTI_ClearITPendingBit(EXTI_Line15);
    627            }
    628            if(EXTI_GetITStatus(EXTI_Line12) != RESET)
    629            {
    630              //DownFunc();
    631              /* Clear the EXTI Line 13 */
    632              EXTI_ClearITPendingBit(EXTI_Line12);
    633            }
    634            if(EXTI_GetITStatus(EXTI_Line12) != RESET)
    635              {
    636                /* SEL function */
    637                //UpFunc();
    638                /* Clear the EXTI Line 14 */
    639                EXTI_ClearITPendingBit(EXTI_Line12);
    640              }
    641          }
    642          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   DMA1_Channel4_IRQHandler
        24   -> GPIO_ResetBits
        24   -> GPIO_SetBits
        24   -> OS_RetriggerTimer
        24   -> OS_SignalEvent
        24   -> OS_SwitchFromInt
      24   DMA1_Channel5_IRQHandler
        24   -> OS_Q_GetMessageCnt
        24   -> OS_RetriggerTimer
        24   -> OS_SwitchFromInt
        24   -> isLogEmpty
       0   HardFault_Handler
       0   SPI2_IRQHandler
      24   Task_spi
        24   -> OS_ARM_EnableISR
        24   -> OS_ARM_ISRSetPrio
        24   -> OS_CreateTimer
        24   -> OS_Delay
        24   -> OS_StartTimer
        24   -> OS_WaitEvent
        24   -> configure_spi
        24   -> log1
        24   -> spi_mgr
        24   -> spi_slave_init
      32   configure_spi
        32   -> DMA_Cmd
        32   -> DMA_DeInit
        32   -> DMA_Init
         0   -> SPI_Cmd
        32   -> SPI_I2S_DeInit
        32   -> SPI_I2S_ITConfig
        32   -> SPI_Init
        32   -> __aeabi_memclr4
       8   jump
         0   -- Indirect call
         8   -> NVIC_SetVectorTable
      56   spi_mgr
        56   -- Indirect call
        56   -> NVIC_SetVectorTable
        56   -> OS_ARM_DisableISR
        56   -> OS_Q_GetPtrCond
        56   -> OS_Q_Purge
        56   -> OS_SignalEvent
        56   -> build_dt
        56   -> log1
        56   -> logRead
       0   spi_ok_timer_cb
         0   -> OS_RetriggerTimer
      16   spi_slave_init
        16   -> DBGMCU_Config
        16   -> GPIO_Init
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> IWDG_Enable
        16   -> IWDG_ReloadCounter
        16   -> IWDG_SetPrescaler
        16   -> IWDG_SetReload
        16   -> IWDG_WriteAccessCmd
        16   -> __aeabi_memclr4
         0   -> configure_spi
       0   spi_sync_timer_cb
       8   timer100_cb
         8   -> IWDG_ReloadCounter
         8   -> OS_RetriggerTimer
         0   -> OS_SignalEvent


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_23
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
      16  ?_0
      20  ?_1
     292  DMA1_Channel4_IRQHandler
     218  DMA1_Channel5_IRQHandler
      24  HardFault_Handler
       2  SPI2_IRQHandler
     188  Task_spi
     270  configure_spi
      38  jump
     494  spi_mgr
       8  spi_ok_timer_cb
     296  spi_out
          DMA_InitStructure
          spi_in
          SPI_InitStructure
          prev_spi_out
          gpiob_idr
          spi_cs_wait
          spi_mgr_desc
          timer100
          spi_ok_timer
          spi_sync_timer
     170  spi_slave_init
       2  spi_sync_timer_cb
      32  timer100_cb

 
   296 bytes in section .bss
 1 870 bytes in section .text
 
 1 870 bytes of CODE memory
   296 bytes of DATA memory

Errors: none
Warnings: none

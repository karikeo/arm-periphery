###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       12/Sep/2016  16:26:14
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ilya\vendicont\arm-periphery\library\STM32F10x_StdPeriph_Driver\src\stm32f10x_can.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\library\STM32F10x_StdPeriph_Driver\src\stm32f10x_can.c
#        -D STM32F10X_HD -D USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\stm32f10x_can.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\stm32f10x_can.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\library\STM32F10x_StdPeriph_Driver\src\stm32f10x_can.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_can.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the CAN firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_can.h"
     24          #include "stm32f10x_rcc.h"
     25          
     26          /** @addtogroup STM32F10x_StdPeriph_Driver
     27            * @{
     28            */
     29          
     30          /** @defgroup CAN 
     31            * @brief CAN driver modules
     32            * @{
     33            */ 
     34          
     35          /** @defgroup CAN_Private_TypesDefinitions
     36            * @{
     37            */
     38          
     39          /**
     40            * @}
     41            */
     42          
     43          /** @defgroup CAN_Private_Defines
     44            * @{
     45            */
     46          
     47          /* CAN Master Control Register bits */
     48          
     49          #define MCR_DBF      ((uint32_t)0x00010000) /* software master reset */
     50          
     51          /* CAN Mailbox Transmit Request */
     52          #define TMIDxR_TXRQ  ((uint32_t)0x00000001) /* Transmit mailbox request */
     53          
     54          /* CAN Filter Master Register bits */
     55          #define FMR_FINIT    ((uint32_t)0x00000001) /* Filter init mode */
     56          
     57          /* Time out for INAK bit */
     58          #define INAK_TIMEOUT        ((uint32_t)0x0000FFFF)
     59          /* Time out for SLAK bit */
     60          #define SLAK_TIMEOUT        ((uint32_t)0x0000FFFF)
     61          
     62          
     63          
     64          /* Flags in TSR register */
     65          #define CAN_FLAGS_TSR              ((uint32_t)0x08000000) 
     66          /* Flags in RF1R register */
     67          #define CAN_FLAGS_RF1R             ((uint32_t)0x04000000) 
     68          /* Flags in RF0R register */
     69          #define CAN_FLAGS_RF0R             ((uint32_t)0x02000000) 
     70          /* Flags in MSR register */
     71          #define CAN_FLAGS_MSR              ((uint32_t)0x01000000) 
     72          /* Flags in ESR register */
     73          #define CAN_FLAGS_ESR              ((uint32_t)0x00F00000) 
     74          
     75          /* Mailboxes definition */
     76          #define CAN_TXMAILBOX_0                   ((uint8_t)0x00)
     77          #define CAN_TXMAILBOX_1                   ((uint8_t)0x01)
     78          #define CAN_TXMAILBOX_2                   ((uint8_t)0x02) 
     79          
     80          
     81          
     82          #define CAN_MODE_MASK              ((uint32_t) 0x00000003)
     83          /**
     84            * @}
     85            */
     86          
     87          /** @defgroup CAN_Private_Macros
     88            * @{
     89            */
     90          
     91          /**
     92            * @}
     93            */
     94          
     95          /** @defgroup CAN_Private_Variables
     96            * @{
     97            */
     98          
     99          /**
    100            * @}
    101            */
    102          
    103          /** @defgroup CAN_Private_FunctionPrototypes
    104            * @{
    105            */
    106          
    107          static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
    108          
    109          /**
    110            * @}
    111            */
    112          
    113          /** @defgroup CAN_Private_Functions
    114            * @{
    115            */
    116          
    117          /**
    118            * @brief  Deinitializes the CAN peripheral registers to their default reset values.
    119            * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
    120            * @retval None.
    121            */

   \                                 In section .text, align 2, keep-with-next
    122          void CAN_DeInit(CAN_TypeDef* CANx)
    123          {
   \                     CAN_DeInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
    124            /* Check the parameters */
    125            assert_param(IS_CAN_ALL_PERIPH(CANx));
    126           
    127            if (CANx == CAN1)
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable6  ;; 0x40006400
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xB081             SUB      SP,SP,#+4
   \   0000000A   0xD108             BNE.N    ??CAN_DeInit_0
    128            {
    129              /* Enable CAN1 reset state */
    130              RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0xF04F 0x7000      MOV      R0,#+33554432
   \   00000012   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    131              /* Release CAN1 from reset state */
    132              RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xF04F 0x7000      MOV      R0,#+33554432
   \   0000001C   0xE007             B.N      ??CAN_DeInit_1
    133            }
    134            else
    135            {  
    136              /* Enable CAN2 reset state */
    137              RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
   \                     ??CAN_DeInit_0: (+1)
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0xF04F 0x6080      MOV      R0,#+67108864
   \   00000024   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    138              /* Release CAN2 from reset state */
    139              RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF04F 0x6080      MOV      R0,#+67108864
   \                     ??CAN_DeInit_1: (+1)
   \   0000002E   0xB001             ADD      SP,SP,#+4
   \   00000030   0xF85D 0xEB04      POP      {LR}
   \   00000034   0x.... 0x....      B.W      RCC_APB1PeriphResetCmd
    140            }
    141          }
    142          
    143          /**
    144            * @brief  Initializes the CAN peripheral according to the specified
    145            *         parameters in the CAN_InitStruct.
    146            * @param  CANx:           where x can be 1 or 2 to to select the CAN 
    147            *                         peripheral.
    148            * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that
    149            *                         contains the configuration information for the 
    150            *                         CAN peripheral.
    151            * @retval Constant indicates initialization succeed which will be 
    152            *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
    153            */

   \                                 In section .text, align 2, keep-with-next
    154          uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
    155          {
   \                     CAN_Init: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    156            uint8_t InitStatus = CAN_InitStatus_Failed;
    157            uint32_t wait_ack = 0x00000000;
    158            /* Check the parameters */
    159            assert_param(IS_CAN_ALL_PERIPH(CANx));
    160            assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
    161            assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
    162            assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
    163            assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
    164            assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
    165            assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
    166            assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
    167            assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
    168            assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
    169            assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
    170            assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
    171          
    172            /* Exit from sleep mode */
    173            CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
   \   00000002   0x6803             LDR      R3,[R0, #+0]
   \   00000004   0xF023 0x0302      BIC      R3,R3,#0x2
   \   00000008   0x6003             STR      R3,[R0, #+0]
   \   0000000A   0x2200             MOVS     R2,#+0
    174          
    175            /* Request initialisation */
    176            CANx->MCR |= CAN_MCR_INRQ ;
   \   0000000C   0x6803             LDR      R3,[R0, #+0]
   \   0000000E   0xF043 0x0301      ORR      R3,R3,#0x1
   \   00000012   0x6003             STR      R3,[R0, #+0]
   \   00000014   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000018   0x461C             MOV      R4,R3
   \   0000001A   0xE000             B.N      ??CAN_Init_0
    177          
    178            /* Wait the acknowledge */
    179            while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
    180            {
    181              wait_ack++;
   \                     ??CAN_Init_1: (+1)
   \   0000001C   0x1E64             SUBS     R4,R4,#+1
    182            }
   \                     ??CAN_Init_0: (+1)
   \   0000001E   0x6845             LDR      R5,[R0, #+4]
   \   00000020   0x07ED             LSLS     R5,R5,#+31
   \   00000022   0xD401             BMI.N    ??CAN_Init_2
   \   00000024   0x2C00             CMP      R4,#+0
   \   00000026   0xD1F9             BNE.N    ??CAN_Init_1
    183          
    184            /* Check acknowledge */
    185            if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
   \                     ??CAN_Init_2: (+1)
   \   00000028   0x6844             LDR      R4,[R0, #+4]
   \   0000002A   0x07E4             LSLS     R4,R4,#+31
   \   0000002C   0xD554             BPL.N    ??CAN_Init_3
    186            {
    187              InitStatus = CAN_InitStatus_Failed;
    188            }
    189            else 
    190            {
    191              /* Set the time triggered communication mode */
    192              if (CAN_InitStruct->CAN_TTCM == ENABLE)
   \   0000002E   0x798A             LDRB     R2,[R1, #+6]
   \   00000030   0x2A01             CMP      R2,#+1
   \   00000032   0x6802             LDR      R2,[R0, #+0]
   \   00000034   0xBF0C             ITE      EQ 
   \   00000036   0xF042 0x0280      ORREQ    R2,R2,#0x80
   \   0000003A   0xF022 0x0280      BICNE    R2,R2,#0x80
    193              {
    194                CANx->MCR |= CAN_MCR_TTCM;
    195              }
    196              else
    197              {
    198                CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
   \   0000003E   0x6002             STR      R2,[R0, #+0]
    199              }
    200          
    201              /* Set the automatic bus-off management */
    202              if (CAN_InitStruct->CAN_ABOM == ENABLE)
   \   00000040   0x79CA             LDRB     R2,[R1, #+7]
   \   00000042   0x2A01             CMP      R2,#+1
   \   00000044   0x6802             LDR      R2,[R0, #+0]
   \   00000046   0xBF0C             ITE      EQ 
   \   00000048   0xF042 0x0240      ORREQ    R2,R2,#0x40
   \   0000004C   0xF022 0x0240      BICNE    R2,R2,#0x40
    203              {
    204                CANx->MCR |= CAN_MCR_ABOM;
    205              }
    206              else
    207              {
    208                CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
   \   00000050   0x6002             STR      R2,[R0, #+0]
    209              }
    210          
    211              /* Set the automatic wake-up mode */
    212              if (CAN_InitStruct->CAN_AWUM == ENABLE)
   \   00000052   0x7A0A             LDRB     R2,[R1, #+8]
   \   00000054   0x2A01             CMP      R2,#+1
   \   00000056   0x6802             LDR      R2,[R0, #+0]
   \   00000058   0xBF0C             ITE      EQ 
   \   0000005A   0xF042 0x0220      ORREQ    R2,R2,#0x20
   \   0000005E   0xF022 0x0220      BICNE    R2,R2,#0x20
    213              {
    214                CANx->MCR |= CAN_MCR_AWUM;
    215              }
    216              else
    217              {
    218                CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
   \   00000062   0x6002             STR      R2,[R0, #+0]
    219              }
    220          
    221              /* Set the no automatic retransmission */
    222              if (CAN_InitStruct->CAN_NART == ENABLE)
   \   00000064   0x7A4A             LDRB     R2,[R1, #+9]
   \   00000066   0x2A01             CMP      R2,#+1
   \   00000068   0x6802             LDR      R2,[R0, #+0]
   \   0000006A   0xBF0C             ITE      EQ 
   \   0000006C   0xF042 0x0210      ORREQ    R2,R2,#0x10
   \   00000070   0xF022 0x0210      BICNE    R2,R2,#0x10
    223              {
    224                CANx->MCR |= CAN_MCR_NART;
    225              }
    226              else
    227              {
    228                CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
   \   00000074   0x6002             STR      R2,[R0, #+0]
    229              }
    230          
    231              /* Set the receive FIFO locked mode */
    232              if (CAN_InitStruct->CAN_RFLM == ENABLE)
   \   00000076   0x7A8A             LDRB     R2,[R1, #+10]
   \   00000078   0x2A01             CMP      R2,#+1
   \   0000007A   0x6802             LDR      R2,[R0, #+0]
   \   0000007C   0xBF0C             ITE      EQ 
   \   0000007E   0xF042 0x0208      ORREQ    R2,R2,#0x8
   \   00000082   0xF022 0x0208      BICNE    R2,R2,#0x8
    233              {
    234                CANx->MCR |= CAN_MCR_RFLM;
    235              }
    236              else
    237              {
    238                CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
   \   00000086   0x6002             STR      R2,[R0, #+0]
    239              }
    240          
    241              /* Set the transmit FIFO priority */
    242              if (CAN_InitStruct->CAN_TXFP == ENABLE)
   \   00000088   0x7ACA             LDRB     R2,[R1, #+11]
   \   0000008A   0x2A01             CMP      R2,#+1
   \   0000008C   0x6802             LDR      R2,[R0, #+0]
   \   0000008E   0xBF0C             ITE      EQ 
   \   00000090   0xF042 0x0204      ORREQ    R2,R2,#0x4
   \   00000094   0xF022 0x0204      BICNE    R2,R2,#0x4
    243              {
    244                CANx->MCR |= CAN_MCR_TXFP;
    245              }
    246              else
    247              {
    248                CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
   \   00000098   0x6002             STR      R2,[R0, #+0]
    249              }
    250          
    251              /* Set the bit timing register */
    252              CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
    253                          ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
    254                          ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
    255                          ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
    256                         ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
   \   0000009A   0x78CC             LDRB     R4,[R1, #+3]
   \   0000009C   0x788A             LDRB     R2,[R1, #+2]
   \   0000009E   0x0624             LSLS     R4,R4,#+24
   \   000000A0   0xEA44 0x7282      ORR      R2,R4,R2, LSL #+30
   \   000000A4   0x790C             LDRB     R4,[R1, #+4]
   \   000000A6   0xEA42 0x4204      ORR      R2,R2,R4, LSL #+16
   \   000000AA   0x794C             LDRB     R4,[R1, #+5]
   \   000000AC   0x8809             LDRH     R1,[R1, #+0]
   \   000000AE   0xEA42 0x5204      ORR      R2,R2,R4, LSL #+20
   \   000000B2   0x1E49             SUBS     R1,R1,#+1
   \   000000B4   0x4311             ORRS     R1,R1,R2
   \   000000B6   0x61C1             STR      R1,[R0, #+28]
    257          
    258              /* Request leave initialisation */
    259              CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
   \   000000B8   0x6801             LDR      R1,[R0, #+0]
   \   000000BA   0x0849             LSRS     R1,R1,#+1
   \   000000BC   0x0049             LSLS     R1,R1,#+1
   \   000000BE   0x6001             STR      R1,[R0, #+0]
    260          
    261             /* Wait the acknowledge */
    262             wait_ack = 0;
   \   000000C0   0xE000             B.N      ??CAN_Init_4
    263          
    264             while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
    265             {
    266               wait_ack++;
   \                     ??CAN_Init_5: (+1)
   \   000000C2   0x1E5B             SUBS     R3,R3,#+1
    267             }
   \                     ??CAN_Init_4: (+1)
   \   000000C4   0x6841             LDR      R1,[R0, #+4]
   \   000000C6   0x07C9             LSLS     R1,R1,#+31
   \   000000C8   0xD501             BPL.N    ??CAN_Init_6
   \   000000CA   0x2B00             CMP      R3,#+0
   \   000000CC   0xD1F9             BNE.N    ??CAN_Init_5
    268          
    269              /* ...and check acknowledged */
    270              if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
    271              {
    272                InitStatus = CAN_InitStatus_Failed;
    273              }
    274              else
    275              {
    276                InitStatus = CAN_InitStatus_Success ;
   \                     ??CAN_Init_6: (+1)
   \   000000CE   0x6840             LDR      R0,[R0, #+4]
   \   000000D0   0xF000 0x0001      AND      R0,R0,#0x1
   \   000000D4   0xF080 0x0201      EOR      R2,R0,#0x1
    277              }
    278            }
    279          
    280            /* At this step, return the status of initialization */
    281            return InitStatus;
   \                     ??CAN_Init_3: (+1)
   \   000000D8   0xBC30             POP      {R4,R5}
   \   000000DA   0x4610             MOV      R0,R2
   \   000000DC   0x4770             BX       LR               ;; return
    282          }
    283          
    284          /**
    285            * @brief  Initializes the CAN peripheral according to the specified
    286            *         parameters in the CAN_FilterInitStruct.
    287            * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef
    288            *                               structure that contains the configuration 
    289            *                               information.
    290            * @retval None.
    291            */

   \                                 In section .text, align 2, keep-with-next
    292          void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
    293          {
   \                     CAN_FilterInit: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    294            uint32_t filter_number_bit_pos = 0;
    295            /* Check the parameters */
    296            assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
    297            assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
    298            assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
    299            assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
    300            assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
    301          
    302            filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
   \   00000002   0x7A82             LDRB     R2,[R0, #+10]
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x4091             LSLS     R1,R1,R2
    303          
    304            /* Initialisation mode for the filter */
    305            CAN1->FMR |= FMR_FINIT;
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable6_1  ;; 0x40006600
   \   0000000C   0x6813             LDR      R3,[R2, #+0]
   \   0000000E   0xF043 0x0301      ORR      R3,R3,#0x1
   \   00000012   0x6013             STR      R3,[R2, #+0]
    306          
    307            /* Filter Deactivation */
    308            CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
   \   00000014   0x43CB             MVNS     R3,R1
   \   00000016   0x69D4             LDR      R4,[R2, #+28]
   \   00000018   0x401C             ANDS     R4,R3,R4
   \   0000001A   0x61D4             STR      R4,[R2, #+28]
    309          
    310            /* Filter Scale */
    311            if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
   \   0000001C   0x7B04             LDRB     R4,[R0, #+12]
   \   0000001E   0xB99C             CBNZ.N   R4,??CAN_FilterInit_0
    312            {
    313              /* 16-bit scale for the filter */
    314              CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
   \   00000020   0x68D4             LDR      R4,[R2, #+12]
   \   00000022   0x401C             ANDS     R4,R3,R4
   \   00000024   0x60D4             STR      R4,[R2, #+12]
    315          
    316              /* First 16-bit identifier and First 16-bit mask */
    317              /* Or First 16-bit identifier and Second 16-bit identifier */
    318              CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    319              ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
    320                  (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
   \   00000026   0x88C5             LDRH     R5,[R0, #+6]
   \   00000028   0x8846             LDRH     R6,[R0, #+2]
   \   0000002A   0x.... 0x....      LDR.W    R4,??DataTable6_2  ;; 0x40006640
   \   0000002E   0xEA46 0x4505      ORR      R5,R6,R5, LSL #+16
   \   00000032   0x7A86             LDRB     R6,[R0, #+10]
   \   00000034   0xF844 0x5036      STR      R5,[R4, R6, LSL #+3]
    321          
    322              /* Second 16-bit identifier and Second 16-bit mask */
    323              /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    324              CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    325              ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
    326                  (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
   \   00000038   0x7A85             LDRB     R5,[R0, #+10]
   \   0000003A   0x8806             LDRH     R6,[R0, #+0]
   \   0000003C   0xEB04 0x04C5      ADD      R4,R4,R5, LSL #+3
   \   00000040   0x8885             LDRH     R5,[R0, #+4]
   \   00000042   0xEA46 0x4505      ORR      R5,R6,R5, LSL #+16
   \   00000046   0x6065             STR      R5,[R4, #+4]
    327            }
    328          
    329            if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
   \                     ??CAN_FilterInit_0: (+1)
   \   00000048   0x7B04             LDRB     R4,[R0, #+12]
   \   0000004A   0x2C01             CMP      R4,#+1
   \   0000004C   0xD113             BNE.N    ??CAN_FilterInit_1
    330            {
    331              /* 32-bit scale for the filter */
    332              CAN1->FS1R |= filter_number_bit_pos;
   \   0000004E   0x68D4             LDR      R4,[R2, #+12]
   \   00000050   0x430C             ORRS     R4,R1,R4
   \   00000052   0x60D4             STR      R4,[R2, #+12]
    333              /* 32-bit identifier or First 32-bit identifier */
    334              CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    335              ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
    336                  (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
   \   00000054   0x8805             LDRH     R5,[R0, #+0]
   \   00000056   0x8846             LDRH     R6,[R0, #+2]
   \   00000058   0x.... 0x....      LDR.W    R4,??DataTable6_2  ;; 0x40006640
   \   0000005C   0xEA46 0x4505      ORR      R5,R6,R5, LSL #+16
   \   00000060   0x7A86             LDRB     R6,[R0, #+10]
   \   00000062   0xF844 0x5036      STR      R5,[R4, R6, LSL #+3]
    337              /* 32-bit mask or Second 32-bit identifier */
    338              CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    339              ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
    340                  (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
   \   00000066   0x7A85             LDRB     R5,[R0, #+10]
   \   00000068   0x88C6             LDRH     R6,[R0, #+6]
   \   0000006A   0xEB04 0x04C5      ADD      R4,R4,R5, LSL #+3
   \   0000006E   0x8885             LDRH     R5,[R0, #+4]
   \   00000070   0xEA46 0x4505      ORR      R5,R6,R5, LSL #+16
   \   00000074   0x6065             STR      R5,[R4, #+4]
    341            }
    342          
    343            /* Filter Mode */
    344            if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
   \                     ??CAN_FilterInit_1: (+1)
   \   00000076   0x7AC4             LDRB     R4,[R0, #+11]
   \   00000078   0x2C00             CMP      R4,#+0
   \   0000007A   0x6854             LDR      R4,[R2, #+4]
   \   0000007C   0xBF0C             ITE      EQ 
   \   0000007E   0x401C             ANDEQ    R4,R3,R4
   \   00000080   0x430C             ORRNE    R4,R1,R4
    345            {
    346              /*Id/Mask mode for the filter*/
    347              CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
    348            }
    349            else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    350            {
    351              /*Identifier list mode for the filter*/
    352              CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
   \   00000082   0x6054             STR      R4,[R2, #+4]
    353            }
    354          
    355            /* Filter FIFO assignment */
    356            if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
   \   00000084   0x8904             LDRH     R4,[R0, #+8]
   \   00000086   0xB914             CBNZ.N   R4,??CAN_FilterInit_2
    357            {
    358              /* FIFO 0 assignation for the filter */
    359              CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
   \   00000088   0x6955             LDR      R5,[R2, #+20]
   \   0000008A   0x402B             ANDS     R3,R3,R5
   \   0000008C   0x6153             STR      R3,[R2, #+20]
    360            }
    361          
    362            if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
   \                     ??CAN_FilterInit_2: (+1)
   \   0000008E   0x2C01             CMP      R4,#+1
   \   00000090   0xD102             BNE.N    ??CAN_FilterInit_3
    363            {
    364              /* FIFO 1 assignation for the filter */
    365              CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
   \   00000092   0x6953             LDR      R3,[R2, #+20]
   \   00000094   0x430B             ORRS     R3,R1,R3
   \   00000096   0x6153             STR      R3,[R2, #+20]
    366            }
    367            
    368            /* Filter activation */
    369            if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
   \                     ??CAN_FilterInit_3: (+1)
   \   00000098   0x7B40             LDRB     R0,[R0, #+13]
   \   0000009A   0x2801             CMP      R0,#+1
   \   0000009C   0xD102             BNE.N    ??CAN_FilterInit_4
    370            {
    371              CAN1->FA1R |= filter_number_bit_pos;
   \   0000009E   0x69D0             LDR      R0,[R2, #+28]
   \   000000A0   0x4308             ORRS     R0,R1,R0
   \   000000A2   0x61D0             STR      R0,[R2, #+28]
    372            }
    373          
    374            /* Leave the initialisation mode for the filter */
    375            CAN1->FMR &= ~FMR_FINIT;
   \                     ??CAN_FilterInit_4: (+1)
   \   000000A4   0x6810             LDR      R0,[R2, #+0]
   \   000000A6   0x0840             LSRS     R0,R0,#+1
   \   000000A8   0x0040             LSLS     R0,R0,#+1
   \   000000AA   0x6010             STR      R0,[R2, #+0]
    376          }
   \   000000AC   0xBC70             POP      {R4-R6}
   \   000000AE   0x4770             BX       LR               ;; return
    377          
    378          /**
    379            * @brief  Fills each CAN_InitStruct member with its default value.
    380            * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which
    381            *                         will be initialized.
    382            * @retval None.
    383            */

   \                                 In section .text, align 2, keep-with-next
    384          void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
    385          {
    386            /* Reset CAN init structure parameters values */
    387            
    388            /* Initialize the time triggered communication mode */
    389            CAN_InitStruct->CAN_TTCM = DISABLE;
   \                     CAN_StructInit: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x7181             STRB     R1,[R0, #+6]
    390            
    391            /* Initialize the automatic bus-off management */
    392            CAN_InitStruct->CAN_ABOM = DISABLE;
   \   00000004   0x71C1             STRB     R1,[R0, #+7]
    393            
    394            /* Initialize the automatic wake-up mode */
    395            CAN_InitStruct->CAN_AWUM = DISABLE;
   \   00000006   0x7201             STRB     R1,[R0, #+8]
    396            
    397            /* Initialize the no automatic retransmission */
    398            CAN_InitStruct->CAN_NART = DISABLE;
   \   00000008   0x7241             STRB     R1,[R0, #+9]
    399            
    400            /* Initialize the receive FIFO locked mode */
    401            CAN_InitStruct->CAN_RFLM = DISABLE;
   \   0000000A   0x7281             STRB     R1,[R0, #+10]
    402            
    403            /* Initialize the transmit FIFO priority */
    404            CAN_InitStruct->CAN_TXFP = DISABLE;
   \   0000000C   0x72C1             STRB     R1,[R0, #+11]
    405            
    406            /* Initialize the CAN_Mode member */
    407            CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
   \   0000000E   0x7081             STRB     R1,[R0, #+2]
    408            
    409            /* Initialize the CAN_SJW member */
    410            CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
   \   00000010   0x70C1             STRB     R1,[R0, #+3]
    411            
    412            /* Initialize the CAN_BS1 member */
    413            CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
   \   00000012   0x2103             MOVS     R1,#+3
   \   00000014   0x7101             STRB     R1,[R0, #+4]
    414            
    415            /* Initialize the CAN_BS2 member */
    416            CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
   \   00000016   0x2102             MOVS     R1,#+2
   \   00000018   0x7141             STRB     R1,[R0, #+5]
    417            
    418            /* Initialize the CAN_Prescaler member */
    419            CAN_InitStruct->CAN_Prescaler = 1;
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x8001             STRH     R1,[R0, #+0]
    420          }
   \   0000001E   0x4770             BX       LR               ;; return
    421          
    422          /**
    423            * @brief  Select the start bank filter for slave CAN.
    424            * @note   This function applies only to STM32 Connectivity line devices.
    425            * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
    426            * @retval None.
    427            */

   \                                 In section .text, align 2, keep-with-next
    428          void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
    429          {
    430            /* Check the parameters */
    431            assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
    432            
    433            /* Enter Initialisation mode for the filter */
    434            CAN1->FMR |= FMR_FINIT;
   \                     CAN_SlaveStartBank: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable6_1  ;; 0x40006600
    435            
    436            /* Select the start slave bank */
    437            CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable6_3  ;; 0xffffc0f1
   \   00000008   0x680A             LDR      R2,[R1, #+0]
   \   0000000A   0xF042 0x0201      ORR      R2,R2,#0x1
   \   0000000E   0x600A             STR      R2,[R1, #+0]
   \   00000010   0x680A             LDR      R2,[R1, #+0]
   \   00000012   0x401A             ANDS     R2,R3,R2
   \   00000014   0x600A             STR      R2,[R1, #+0]
    438            CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
   \   00000016   0x680A             LDR      R2,[R1, #+0]
   \   00000018   0xEA42 0x2000      ORR      R0,R2,R0, LSL #+8
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    439            
    440            /* Leave Initialisation mode for the filter */
    441            CAN1->FMR &= ~FMR_FINIT;
   \   0000001E   0x6808             LDR      R0,[R1, #+0]
   \   00000020   0x0840             LSRS     R0,R0,#+1
   \   00000022   0x0040             LSLS     R0,R0,#+1
   \   00000024   0x6008             STR      R0,[R1, #+0]
    442          }
   \   00000026   0x4770             BX       LR               ;; return
    443          
    444          /**
    445            * @brief  Enables or disables the DBG Freeze for CAN.
    446            * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
    447            * @param  NewState: new state of the CAN peripheral. This parameter can 
    448            *                   be: ENABLE or DISABLE.
    449            * @retval None.
    450            */

   \                                 In section .text, align 2, keep-with-next
    451          void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
    452          {
    453            /* Check the parameters */
    454            assert_param(IS_CAN_ALL_PERIPH(CANx));
    455            assert_param(IS_FUNCTIONAL_STATE(NewState));
    456            
    457            if (NewState != DISABLE)
   \                     CAN_DBGFreeze: (+1)
   \   00000000   0x2900             CMP      R1,#+0
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xBF14             ITE      NE 
   \   00000006   0xF441 0x3180      ORRNE    R1,R1,#0x10000
   \   0000000A   0xF421 0x3180      BICEQ    R1,R1,#0x10000
    458            {
    459              /* Enable Debug Freeze  */
    460              CANx->MCR |= MCR_DBF;
    461            }
    462            else
    463            {
    464              /* Disable Debug Freeze */
    465              CANx->MCR &= ~MCR_DBF;
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    466            }
    467          }
   \   00000010   0x4770             BX       LR               ;; return
    468          
    469          
    470          /**
    471            * @brief  Enables or disabes the CAN Time TriggerOperation communication mode.
    472            * @param  CANx:      where x can be 1 or 2 to to select the CAN peripheral.
    473            * @param  NewState : Mode new state , can be one of @ref FunctionalState.
    474            * @note   when enabled, Time stamp (TIME[15:0]) value is sent in the last 
    475            *         two data bytes of the 8-byte message: TIME[7:0] in data byte 6 
    476            *         and TIME[15:8] in data byte 7 
    477            * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
    478            *         sent over the CAN bus.  
    479            * @retval None
    480            */

   \                                 In section .text, align 2, keep-with-next
    481          void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
    482          {
    483            /* Check the parameters */
    484            assert_param(IS_CAN_ALL_PERIPH(CANx));
    485            assert_param(IS_FUNCTIONAL_STATE(NewState));
    486            if (NewState != DISABLE)
   \                     CAN_TTComModeCmd: (+1)
   \   00000000   0x2900             CMP      R1,#+0
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xD015             BEQ.N    ??CAN_TTComModeCmd_0
    487            {
    488              /* Enable the TTCM mode */
    489              CANx->MCR |= CAN_MCR_TTCM;
   \   00000006   0xF041 0x0180      ORR      R1,R1,#0x80
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    490          
    491              /* Set TGT bits */
    492              CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
   \   0000000C   0xF8D0 0x1184      LDR      R1,[R0, #+388]
   \   00000010   0xF441 0x7180      ORR      R1,R1,#0x100
   \   00000014   0xF8C0 0x1184      STR      R1,[R0, #+388]
    493              CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
   \   00000018   0xF8D0 0x1194      LDR      R1,[R0, #+404]
   \   0000001C   0xF441 0x7180      ORR      R1,R1,#0x100
   \   00000020   0xF8C0 0x1194      STR      R1,[R0, #+404]
    494              CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
   \   00000024   0xF8D0 0x11A4      LDR      R1,[R0, #+420]
   \   00000028   0xF441 0x7180      ORR      R1,R1,#0x100
   \   0000002C   0xF8C0 0x11A4      STR      R1,[R0, #+420]
    495            }
    496            else
    497            {
    498              /* Disable the TTCM mode */
    499              CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
    500          
    501              /* Reset TGT bits */
    502              CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    503              CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    504              CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
    505            }
    506          }
   \   00000030   0x4770             BX       LR
   \                     ??CAN_TTComModeCmd_0: (+1)
   \   00000032   0xF021 0x0180      BIC      R1,R1,#0x80
   \   00000036   0x6001             STR      R1,[R0, #+0]
   \   00000038   0xF8D0 0x1184      LDR      R1,[R0, #+388]
   \   0000003C   0xF421 0x7180      BIC      R1,R1,#0x100
   \   00000040   0xF8C0 0x1184      STR      R1,[R0, #+388]
   \   00000044   0xF8D0 0x1194      LDR      R1,[R0, #+404]
   \   00000048   0xF421 0x7180      BIC      R1,R1,#0x100
   \   0000004C   0xF8C0 0x1194      STR      R1,[R0, #+404]
   \   00000050   0xF8D0 0x11A4      LDR      R1,[R0, #+420]
   \   00000054   0xF421 0x7180      BIC      R1,R1,#0x100
   \   00000058   0xF8C0 0x11A4      STR      R1,[R0, #+420]
   \   0000005C   0x4770             BX       LR               ;; return
    507          /**
    508            * @brief  Initiates the transmission of a message.
    509            * @param  CANx:      where x can be 1 or 2 to to select the CAN peripheral.
    510            * @param  TxMessage: pointer to a structure which contains CAN Id, CAN
    511            *                    DLC and CAN data.
    512            * @retval The number of the mailbox that is used for transmission
    513            *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
    514            */

   \                                 In section .text, align 2, keep-with-next
    515          uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
    516          {
   \                     CAN_Transmit: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    517            uint8_t transmit_mailbox = 0;
    518            /* Check the parameters */
    519            assert_param(IS_CAN_ALL_PERIPH(CANx));
    520            assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
    521            assert_param(IS_CAN_RTR(TxMessage->RTR));
    522            assert_param(IS_CAN_DLC(TxMessage->DLC));
    523          
    524            /* Select one empty transmit mailbox */
    525            if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
   \   00000002   0x6882             LDR      R2,[R0, #+8]
   \   00000004   0x0152             LSLS     R2,R2,#+5
   \   00000006   0xD512             BPL.N    ??CAN_Transmit_0
    526            {
    527              transmit_mailbox = 0;
   \   00000008   0x2200             MOVS     R2,#+0
    528            }
    529            else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
    530            {
    531              transmit_mailbox = 1;
    532            }
    533            else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
    534            {
    535              transmit_mailbox = 2;
    536            }
    537            else
    538            {
    539              transmit_mailbox = CAN_TxStatus_NoMailBox;
    540            }
    541          
    542            if (transmit_mailbox != CAN_TxStatus_NoMailBox)
    543            {
    544              /* Set up the Id */
    545              CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
   \                     ??CAN_Transmit_1: (+1)
   \   0000000A   0xEB00 0x1002      ADD      R0,R0,R2, LSL #+4
   \   0000000E   0xF8D0 0x3180      LDR      R3,[R0, #+384]
   \   00000012   0xF003 0x0301      AND      R3,R3,#0x1
   \   00000016   0xF8C0 0x3180      STR      R3,[R0, #+384]
    546              if (TxMessage->IDE == CAN_Id_Standard)
   \   0000001A   0x7A0C             LDRB     R4,[R1, #+8]
   \   0000001C   0x7A4B             LDRB     R3,[R1, #+9]
   \   0000001E   0xB9A4             CBNZ.N   R4,??CAN_Transmit_2
    547              {
    548                assert_param(IS_CAN_STDID(TxMessage->StdId));  
    549                CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
    550                                                            TxMessage->RTR);
   \   00000020   0xF8D0 0x4180      LDR      R4,[R0, #+384]
   \   00000024   0x680D             LDR      R5,[R1, #+0]
   \   00000026   0xEA43 0x5345      ORR      R3,R3,R5, LSL #+21
   \   0000002A   0x4323             ORRS     R3,R3,R4
   \   0000002C   0xE014             B.N      ??CAN_Transmit_3
    551              }
   \                     ??CAN_Transmit_0: (+1)
   \   0000002E   0x6882             LDR      R2,[R0, #+8]
   \   00000030   0x0112             LSLS     R2,R2,#+4
   \   00000032   0xBF48             IT       MI 
   \   00000034   0x2201             MOVMI    R2,#+1
   \   00000036   0xD4E8             BMI.N    ??CAN_Transmit_1
   \   00000038   0x6882             LDR      R2,[R0, #+8]
   \   0000003A   0x00D2             LSLS     R2,R2,#+3
   \   0000003C   0xBF48             IT       MI 
   \   0000003E   0x2202             MOVMI    R2,#+2
   \   00000040   0xD4E3             BMI.N    ??CAN_Transmit_1
    552              else
    553              {
    554                assert_param(IS_CAN_EXTID(TxMessage->ExtId));
    555                CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
    556                                                            TxMessage->IDE | \
    557                                                            TxMessage->RTR);
    558              }
    559              
    560              /* Set up the DLC */
    561              TxMessage->DLC &= (uint8_t)0x0000000F;
    562              CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    563              CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
    564          
    565              /* Set up the data field */
    566              CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
    567                                                       ((uint32_t)TxMessage->Data[2] << 16) |
    568                                                       ((uint32_t)TxMessage->Data[1] << 8) | 
    569                                                       ((uint32_t)TxMessage->Data[0]));
    570              CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
    571                                                       ((uint32_t)TxMessage->Data[6] << 16) |
    572                                                       ((uint32_t)TxMessage->Data[5] << 8) |
    573                                                       ((uint32_t)TxMessage->Data[4]));
    574              /* Request transmission */
    575              CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
    576            }
    577            return transmit_mailbox;
   \   00000042   0xBC70             POP      {R4-R6}
   \   00000044   0x2204             MOVS     R2,#+4
   \   00000046   0x4610             MOV      R0,R2
   \   00000048   0x4770             BX       LR
   \                     ??CAN_Transmit_2: (+1)
   \   0000004A   0xF8D0 0x5180      LDR      R5,[R0, #+384]
   \   0000004E   0x684E             LDR      R6,[R1, #+4]
   \   00000050   0xEA44 0x04C6      ORR      R4,R4,R6, LSL #+3
   \   00000054   0x4323             ORRS     R3,R3,R4
   \   00000056   0x432B             ORRS     R3,R3,R5
   \                     ??CAN_Transmit_3: (+1)
   \   00000058   0xF8C0 0x3180      STR      R3,[R0, #+384]
   \   0000005C   0x7A8B             LDRB     R3,[R1, #+10]
   \   0000005E   0xF003 0x030F      AND      R3,R3,#0xF
   \   00000062   0x728B             STRB     R3,[R1, #+10]
   \   00000064   0xF8D0 0x3184      LDR      R3,[R0, #+388]
   \   00000068   0x091B             LSRS     R3,R3,#+4
   \   0000006A   0x011B             LSLS     R3,R3,#+4
   \   0000006C   0xF8C0 0x3184      STR      R3,[R0, #+388]
   \   00000070   0xF8D0 0x3184      LDR      R3,[R0, #+388]
   \   00000074   0x7A8C             LDRB     R4,[R1, #+10]
   \   00000076   0x4323             ORRS     R3,R4,R3
   \   00000078   0xF8C0 0x3184      STR      R3,[R0, #+388]
   \   0000007C   0x7B4C             LDRB     R4,[R1, #+13]
   \   0000007E   0x7B8B             LDRB     R3,[R1, #+14]
   \   00000080   0x0424             LSLS     R4,R4,#+16
   \   00000082   0xEA44 0x6303      ORR      R3,R4,R3, LSL #+24
   \   00000086   0x7B0C             LDRB     R4,[R1, #+12]
   \   00000088   0xEA43 0x2304      ORR      R3,R3,R4, LSL #+8
   \   0000008C   0x7ACC             LDRB     R4,[R1, #+11]
   \   0000008E   0x4323             ORRS     R3,R4,R3
   \   00000090   0xF8C0 0x3188      STR      R3,[R0, #+392]
   \   00000094   0x7C4C             LDRB     R4,[R1, #+17]
   \   00000096   0x7C8B             LDRB     R3,[R1, #+18]
   \   00000098   0x0424             LSLS     R4,R4,#+16
   \   0000009A   0xEA44 0x6303      ORR      R3,R4,R3, LSL #+24
   \   0000009E   0x7C0C             LDRB     R4,[R1, #+16]
   \   000000A0   0x7BC9             LDRB     R1,[R1, #+15]
   \   000000A2   0xEA43 0x2304      ORR      R3,R3,R4, LSL #+8
   \   000000A6   0x4319             ORRS     R1,R1,R3
   \   000000A8   0xF8C0 0x118C      STR      R1,[R0, #+396]
   \   000000AC   0xF8D0 0x1180      LDR      R1,[R0, #+384]
   \   000000B0   0xF041 0x0101      ORR      R1,R1,#0x1
   \   000000B4   0xF8C0 0x1180      STR      R1,[R0, #+384]
   \   000000B8   0x4610             MOV      R0,R2
   \   000000BA   0xBC70             POP      {R4-R6}
   \   000000BC   0x4770             BX       LR               ;; return
    578          }
    579          
    580          /**
    581            * @brief  Checks the transmission of a message.
    582            * @param  CANx:            where x can be 1 or 2 to to select the 
    583            *                          CAN peripheral.
    584            * @param  TransmitMailbox: the number of the mailbox that is used for 
    585            *                          transmission.
    586            * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, CAN_TxStatus_Failed 
    587            *         in an other case.
    588            */

   \                                 In section .text, align 2, keep-with-next
    589          uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
    590          {
    591            uint32_t state = 0;
   \                     CAN_TransmitStatus: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
    592          
    593            /* Check the parameters */
    594            assert_param(IS_CAN_ALL_PERIPH(CANx));
    595            assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
    596           
    597            switch (TransmitMailbox)
   \   00000002   0xB119             CBZ.N    R1,??CAN_TransmitStatus_0
   \   00000004   0x2902             CMP      R1,#+2
   \   00000006   0xD009             BEQ.N    ??CAN_TransmitStatus_1
   \   00000008   0xD304             BCC.N    ??CAN_TransmitStatus_2
   \   0000000A   0xE00C             B.N      ??CAN_TransmitStatus_3
    598            {
    599              case (CAN_TXMAILBOX_0): 
    600                state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
   \                     ??CAN_TransmitStatus_0: (+1)
   \   0000000C   0x6880             LDR      R0,[R0, #+8]
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable6_4  ;; 0x4000003
   \   00000012   0xE006             B.N      ??CAN_TransmitStatus_4
    601                break;
    602              case (CAN_TXMAILBOX_1): 
    603                state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
   \                     ??CAN_TransmitStatus_2: (+1)
   \   00000014   0x6880             LDR      R0,[R0, #+8]
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable6_5  ;; 0x8000300
   \   0000001A   0xE002             B.N      ??CAN_TransmitStatus_4
    604                break;
    605              case (CAN_TXMAILBOX_2): 
    606                state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
   \                     ??CAN_TransmitStatus_1: (+1)
   \   0000001C   0x6880             LDR      R0,[R0, #+8]
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable6_6  ;; 0x10030000
   \                     ??CAN_TransmitStatus_4: (+1)
   \   00000022   0xEA01 0x0200      AND      R2,R1,R0
    607                break;
    608              default:
    609                state = CAN_TxStatus_Failed;
    610                break;
    611            }
    612            switch (state)
   \                     ??CAN_TransmitStatus_3: (+1)
   \   00000026   0xB162             CBZ.N    R2,??CAN_TransmitStatus_5
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x4000003
   \   0000002C   0x4282             CMP      R2,R0
   \   0000002E   0xBF1F             ITTTT    NE 
   \   00000030   0x.... 0x....      LDRNE.W  R0,??DataTable6_5  ;; 0x8000300
   \   00000034   0x4282             CMPNE    R2,R0
   \   00000036   0x.... 0x....      LDRNE.W  R0,??DataTable6_6  ;; 0x10030000
   \   0000003A   0x4282             CMPNE    R2,R0
   \   0000003C   0xD003             BEQ.N    ??CAN_TransmitStatus_6
    613            {
    614                /* transmit pending  */
    615              case (0x0): state = CAN_TxStatus_Pending;
    616                break;
    617                /* transmit failed  */
    618               case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
    619                break;
    620               case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
    621                break;
    622               case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
    623                break;
    624                /* transmit succeeded  */
    625              case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
    626                break;
    627              case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
    628                break;
    629              case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
    630                break;
    631              default: state = CAN_TxStatus_Failed;
   \   0000003E   0x2000             MOVS     R0,#+0
    632                break;
    633            }
    634            return (uint8_t) state;
   \   00000040   0x4770             BX       LR
   \                     ??CAN_TransmitStatus_5: (+1)
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x4770             BX       LR
   \                     ??CAN_TransmitStatus_6: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x4770             BX       LR
    635          }
    636          
    637          /**
    638            * @brief  Cancels a transmit request.
    639            * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral. 
    640            * @param  Mailbox:  Mailbox number.
    641            * @retval None.
    642            */

   \                                 In section .text, align 2, keep-with-next
    643          void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
    644          {
    645            /* Check the parameters */
    646            assert_param(IS_CAN_ALL_PERIPH(CANx));
    647            assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
    648            /* abort transmission */
    649            switch (Mailbox)
   \                     CAN_CancelTransmit: (+1)
   \   00000000   0xB119             CBZ.N    R1,??CAN_CancelTransmit_0
   \   00000002   0x2902             CMP      R1,#+2
   \   00000004   0xD00B             BEQ.N    ??CAN_CancelTransmit_1
   \   00000006   0xD305             BCC.N    ??CAN_CancelTransmit_2
   \   00000008   0x4770             BX       LR
    650            {
    651              case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
   \                     ??CAN_CancelTransmit_0: (+1)
   \   0000000A   0x6881             LDR      R1,[R0, #+8]
   \   0000000C   0xF041 0x0180      ORR      R1,R1,#0x80
   \   00000010   0x6081             STR      R1,[R0, #+8]
    652                break;
    653              case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
    654                break;
    655              case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
    656                break;
    657              default:
    658                break;
    659            }
    660          }
   \   00000012   0x4770             BX       LR
   \                     ??CAN_CancelTransmit_2: (+1)
   \   00000014   0x6881             LDR      R1,[R0, #+8]
   \   00000016   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   0000001A   0x6081             STR      R1,[R0, #+8]
   \   0000001C   0x4770             BX       LR
   \                     ??CAN_CancelTransmit_1: (+1)
   \   0000001E   0x6881             LDR      R1,[R0, #+8]
   \   00000020   0xF441 0x0100      ORR      R1,R1,#0x800000
   \   00000024   0x6081             STR      R1,[R0, #+8]
   \   00000026   0x4770             BX       LR               ;; return
    661          
    662          
    663          /**
    664            * @brief  Receives a message.
    665            * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral.
    666            * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
    667            * @param  RxMessage:  pointer to a structure receive message which contains 
    668            *                     CAN Id, CAN DLC, CAN datas and FMI number.
    669            * @retval None.
    670            */

   \                                 In section .text, align 2, keep-with-next
    671          void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
    672          {
    673            /* Check the parameters */
    674            assert_param(IS_CAN_ALL_PERIPH(CANx));
    675            assert_param(IS_CAN_FIFO(FIFONumber));
    676            /* Get the Id */
    677            RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
   \                     CAN_Receive: (+1)
   \   00000000   0xEB00 0x1301      ADD      R3,R0,R1, LSL #+4
   \   00000004   0xF8D3 0xC1B0      LDR      R12,[R3, #+432]
   \   00000008   0xF01C 0x0C04      ANDS     R12,R12,#0x4
   \   0000000C   0xF882 0xC008      STRB     R12,[R2, #+8]
    678            if (RxMessage->IDE == CAN_Id_Standard)
   \   00000010   0xF8D3 0xC1B0      LDR      R12,[R3, #+432]
   \   00000014   0xBF07             ITTEE    EQ 
   \   00000016   0xEA4F 0x5C5C      LSREQ    R12,R12,#+21
   \   0000001A   0xF8C2 0xC000      STREQ    R12,[R2, #+0]
   \   0000001E   0xEA4F 0x0CDC      LSRNE    R12,R12,#+3
   \   00000022   0xF8C2 0xC004      STRNE    R12,[R2, #+4]
    679            {
    680              RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
    681            }
    682            else
    683            {
    684              RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
    685            }
    686            
    687            RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
   \   00000026   0xF8D3 0xC1B0      LDR      R12,[R3, #+432]
   \   0000002A   0xF00C 0x0C02      AND      R12,R12,#0x2
   \   0000002E   0xF882 0xC009      STRB     R12,[R2, #+9]
    688            /* Get the DLC */
    689            RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
   \   00000032   0xF8D3 0xC1B4      LDR      R12,[R3, #+436]
   \   00000036   0xF00C 0x0C0F      AND      R12,R12,#0xF
   \   0000003A   0xF882 0xC00A      STRB     R12,[R2, #+10]
    690            /* Get the FMI */
    691            RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
   \   0000003E   0xF8D3 0xC1B4      LDR      R12,[R3, #+436]
   \   00000042   0xEA4F 0x2C1C      LSR      R12,R12,#+8
   \   00000046   0xF882 0xC013      STRB     R12,[R2, #+19]
    692            /* Get the data field */
    693            RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
   \   0000004A   0xF8D3 0xC1B8      LDR      R12,[R3, #+440]
   \   0000004E   0xF882 0xC00B      STRB     R12,[R2, #+11]
    694            RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
   \   00000052   0xF8D3 0xC1B8      LDR      R12,[R3, #+440]
   \   00000056   0xEA4F 0x2C1C      LSR      R12,R12,#+8
   \   0000005A   0xF882 0xC00C      STRB     R12,[R2, #+12]
    695            RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
   \   0000005E   0xF8D3 0xC1B8      LDR      R12,[R3, #+440]
   \   00000062   0xEA4F 0x4C1C      LSR      R12,R12,#+16
   \   00000066   0xF882 0xC00D      STRB     R12,[R2, #+13]
    696            RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
   \   0000006A   0xF8D3 0xC1B8      LDR      R12,[R3, #+440]
   \   0000006E   0xEA4F 0x6C1C      LSR      R12,R12,#+24
   \   00000072   0xF882 0xC00E      STRB     R12,[R2, #+14]
    697            RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
   \   00000076   0xF8D3 0xC1BC      LDR      R12,[R3, #+444]
   \   0000007A   0xF882 0xC00F      STRB     R12,[R2, #+15]
    698            RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
   \   0000007E   0xF8D3 0xC1BC      LDR      R12,[R3, #+444]
   \   00000082   0xEA4F 0x2C1C      LSR      R12,R12,#+8
   \   00000086   0xF882 0xC010      STRB     R12,[R2, #+16]
    699            RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
   \   0000008A   0xF8D3 0xC1BC      LDR      R12,[R3, #+444]
   \   0000008E   0xEA4F 0x4C1C      LSR      R12,R12,#+16
   \   00000092   0xF882 0xC011      STRB     R12,[R2, #+17]
    700            RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
   \   00000096   0xF8D3 0x31BC      LDR      R3,[R3, #+444]
   \   0000009A   0x0E1B             LSRS     R3,R3,#+24
   \   0000009C   0x7493             STRB     R3,[R2, #+18]
    701            /* Release the FIFO */
    702            /* Release FIFO0 */
    703            if (FIFONumber == CAN_FIFO0)
   \   0000009E   0xB921             CBNZ.N   R1,??CAN_Receive_0
    704            {
    705              CANx->RF0R |= CAN_RF0R_RFOM0;
   \   000000A0   0x68C1             LDR      R1,[R0, #+12]
   \   000000A2   0xF041 0x0120      ORR      R1,R1,#0x20
   \   000000A6   0x60C1             STR      R1,[R0, #+12]
   \   000000A8   0x4770             BX       LR
    706            }
    707            /* Release FIFO1 */
    708            else /* FIFONumber == CAN_FIFO1 */
    709            {
    710              CANx->RF1R |= CAN_RF1R_RFOM1;
   \                     ??CAN_Receive_0: (+1)
   \   000000AA   0x6901             LDR      R1,[R0, #+16]
   \   000000AC   0xF041 0x0120      ORR      R1,R1,#0x20
   \   000000B0   0x6101             STR      R1,[R0, #+16]
    711            }
    712          }
   \   000000B2   0x4770             BX       LR               ;; return
    713          
    714          /**
    715            * @brief  Releases the specified FIFO.
    716            * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral. 
    717            * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
    718            * @retval None.
    719            */

   \                                 In section .text, align 2, keep-with-next
    720          void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
    721          {
    722            /* Check the parameters */
    723            assert_param(IS_CAN_ALL_PERIPH(CANx));
    724            assert_param(IS_CAN_FIFO(FIFONumber));
    725            /* Release FIFO0 */
    726            if (FIFONumber == CAN_FIFO0)
   \                     CAN_FIFORelease: (+1)
   \   00000000   0xB921             CBNZ.N   R1,??CAN_FIFORelease_0
    727            {
    728              CANx->RF0R |= CAN_RF0R_RFOM0;
   \   00000002   0x68C1             LDR      R1,[R0, #+12]
   \   00000004   0xF041 0x0120      ORR      R1,R1,#0x20
   \   00000008   0x60C1             STR      R1,[R0, #+12]
   \   0000000A   0x4770             BX       LR
    729            }
    730            /* Release FIFO1 */
    731            else /* FIFONumber == CAN_FIFO1 */
    732            {
    733              CANx->RF1R |= CAN_RF1R_RFOM1;
   \                     ??CAN_FIFORelease_0: (+1)
   \   0000000C   0x6901             LDR      R1,[R0, #+16]
   \   0000000E   0xF041 0x0120      ORR      R1,R1,#0x20
   \   00000012   0x6101             STR      R1,[R0, #+16]
    734            }
    735          }
   \   00000014   0x4770             BX       LR               ;; return
    736          
    737          /**
    738            * @brief  Returns the number of pending messages.
    739            * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral.
    740            * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
    741            * @retval NbMessage : which is the number of pending message.
    742            */

   \                                 In section .text, align 2, keep-with-next
    743          uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
    744          {
    745            uint8_t message_pending=0;
   \                     CAN_MessagePending: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
    746            /* Check the parameters */
    747            assert_param(IS_CAN_ALL_PERIPH(CANx));
    748            assert_param(IS_CAN_FIFO(FIFONumber));
    749            if (FIFONumber == CAN_FIFO0)
   \   00000002   0xB909             CBNZ.N   R1,??CAN_MessagePending_0
    750            {
    751              message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
   \   00000004   0x68C0             LDR      R0,[R0, #+12]
   \   00000006   0xE002             B.N      ??CAN_MessagePending_1
    752            }
    753            else if (FIFONumber == CAN_FIFO1)
   \                     ??CAN_MessagePending_0: (+1)
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD102             BNE.N    ??CAN_MessagePending_2
    754            {
    755              message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
   \   0000000C   0x6900             LDR      R0,[R0, #+16]
   \                     ??CAN_MessagePending_1: (+1)
   \   0000000E   0xF000 0x0203      AND      R2,R0,#0x3
    756            }
    757            else
    758            {
    759              message_pending = 0;
    760            }
    761            return message_pending;
   \                     ??CAN_MessagePending_2: (+1)
   \   00000012   0x4610             MOV      R0,R2
   \   00000014   0x4770             BX       LR               ;; return
    762          }
    763          
    764          
    765          /**
    766            * @brief   Select the CAN Operation mode.
    767            * @param CAN_OperatingMode : CAN Operating Mode. This parameter can be one 
    768            *                            of @ref CAN_OperatingMode_TypeDef enumeration.
    769            * @retval status of the requested mode which can be 
    770            *         - CAN_ModeStatus_Failed    CAN failed entering the specific mode 
    771            *         - CAN_ModeStatus_Success   CAN Succeed entering the specific mode 
    772          
    773            */

   \                                 In section .text, align 2, keep-with-next
    774          uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
    775          {
   \                     CAN_OperatingModeRequest: (+1)
   \   00000000   0x460A             MOV      R2,R1
    776            uint8_t status = CAN_ModeStatus_Failed;
   \   00000002   0x2100             MOVS     R1,#+0
    777            
    778            /* Timeout for INAK or also for SLAK bits*/
    779            uint32_t timeout = INAK_TIMEOUT; 
    780          
    781            /* Check the parameters */
    782            assert_param(IS_CAN_ALL_PERIPH(CANx));
    783            assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
    784          
    785            if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
   \   00000004   0xB9AA             CBNZ.N   R2,??CAN_OperatingModeRequest_0
    786            {
    787              /* Request initialisation */
    788              CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
   \   00000006   0x6802             LDR      R2,[R0, #+0]
   \   00000008   0xF022 0x0202      BIC      R2,R2,#0x2
   \   0000000C   0xF042 0x0201      ORR      R2,R2,#0x1
   \   00000010   0x6002             STR      R2,[R0, #+0]
   \   00000012   0xF64F 0x72FF      MOVW     R2,#+65535
   \   00000016   0xE000             B.N      ??CAN_OperatingModeRequest_1
    789          
    790              /* Wait the acknowledge */
    791              while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
    792              {
    793                timeout--;
   \                     ??CAN_OperatingModeRequest_2: (+1)
   \   00000018   0x1E52             SUBS     R2,R2,#+1
    794              }
   \                     ??CAN_OperatingModeRequest_1: (+1)
   \   0000001A   0x6843             LDR      R3,[R0, #+4]
   \   0000001C   0xF003 0x0303      AND      R3,R3,#0x3
   \   00000020   0x2B01             CMP      R3,#+1
   \   00000022   0xBF18             IT       NE 
   \   00000024   0x2A00             CMPNE    R2,#+0
   \   00000026   0xD1F7             BNE.N    ??CAN_OperatingModeRequest_2
    795              if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0xF000 0x0003      AND      R0,R0,#0x3
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xE02A             B.N      ??CAN_OperatingModeRequest_3
    796              {
    797                status = CAN_ModeStatus_Failed;
    798              }
    799              else
    800              {
    801                status = CAN_ModeStatus_Success;
    802              }
    803            }
    804            else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
   \                     ??CAN_OperatingModeRequest_0: (+1)
   \   00000032   0x2A01             CMP      R2,#+1
   \   00000034   0xD111             BNE.N    ??CAN_OperatingModeRequest_4
    805            {
    806              /* Request leave initialisation and sleep mode  and enter Normal mode */
    807              CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
   \   00000036   0x6802             LDR      R2,[R0, #+0]
   \   00000038   0x0892             LSRS     R2,R2,#+2
   \   0000003A   0x0092             LSLS     R2,R2,#+2
   \   0000003C   0x6002             STR      R2,[R0, #+0]
   \   0000003E   0xF64F 0x72FF      MOVW     R2,#+65535
   \   00000042   0xE000             B.N      ??CAN_OperatingModeRequest_5
    808          
    809              /* Wait the acknowledge */
    810              while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
    811              {
    812                timeout--;
   \                     ??CAN_OperatingModeRequest_6: (+1)
   \   00000044   0x1E52             SUBS     R2,R2,#+1
    813              }
   \                     ??CAN_OperatingModeRequest_5: (+1)
   \   00000046   0x6843             LDR      R3,[R0, #+4]
   \   00000048   0xF013 0x0F03      TST      R3,#0x3
   \   0000004C   0xBF18             IT       NE 
   \   0000004E   0x2A00             CMPNE    R2,#+0
   \   00000050   0xD1F8             BNE.N    ??CAN_OperatingModeRequest_6
    814              if ((CANx->MSR & CAN_MODE_MASK) != 0)
   \   00000052   0x6840             LDR      R0,[R0, #+4]
   \   00000054   0xF010 0x0F03      TST      R0,#0x3
   \   00000058   0xE016             B.N      ??CAN_OperatingModeRequest_3
    815              {
    816                status = CAN_ModeStatus_Failed;
    817              }
    818              else
    819              {
    820                status = CAN_ModeStatus_Success;
    821              }
    822            }
    823            else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
   \                     ??CAN_OperatingModeRequest_4: (+1)
   \   0000005A   0x2A02             CMP      R2,#+2
   \   0000005C   0xD116             BNE.N    ??CAN_OperatingModeRequest_7
    824            {
    825              /* Request Sleep mode */
    826              CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
   \   0000005E   0x6802             LDR      R2,[R0, #+0]
   \   00000060   0x0852             LSRS     R2,R2,#+1
   \   00000062   0x0052             LSLS     R2,R2,#+1
   \   00000064   0xF042 0x0202      ORR      R2,R2,#0x2
   \   00000068   0x6002             STR      R2,[R0, #+0]
   \   0000006A   0xF64F 0x72FF      MOVW     R2,#+65535
   \   0000006E   0xE000             B.N      ??CAN_OperatingModeRequest_8
    827          
    828              /* Wait the acknowledge */
    829              while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
    830              {
    831                timeout--;
   \                     ??CAN_OperatingModeRequest_9: (+1)
   \   00000070   0x1E52             SUBS     R2,R2,#+1
    832              }
   \                     ??CAN_OperatingModeRequest_8: (+1)
   \   00000072   0x6843             LDR      R3,[R0, #+4]
   \   00000074   0xF003 0x0303      AND      R3,R3,#0x3
   \   00000078   0x2B02             CMP      R3,#+2
   \   0000007A   0xBF18             IT       NE 
   \   0000007C   0x2A00             CMPNE    R2,#+0
   \   0000007E   0xD1F7             BNE.N    ??CAN_OperatingModeRequest_9
    833              if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
   \   00000080   0x6840             LDR      R0,[R0, #+4]
   \   00000082   0xF000 0x0003      AND      R0,R0,#0x3
   \   00000086   0x2802             CMP      R0,#+2
   \                     ??CAN_OperatingModeRequest_3: (+1)
   \   00000088   0xBF08             IT       EQ 
   \   0000008A   0x2101             MOVEQ    R1,#+1
    834              {
    835                status = CAN_ModeStatus_Failed;
    836              }
    837              else
    838              {
    839                status = CAN_ModeStatus_Success;
    840              }
    841            }
    842            else
    843            {
    844              status = CAN_ModeStatus_Failed;
    845            }
    846          
    847            return  (uint8_t) status;
   \                     ??CAN_OperatingModeRequest_7: (+1)
   \   0000008C   0x4608             MOV      R0,R1
   \   0000008E   0x4770             BX       LR               ;; return
    848          }
    849          
    850          /**
    851            * @brief  Enters the low power mode.
    852            * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.
    853            * @retval status: CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed in an 
    854            *                 other case.
    855            */

   \                                 In section .text, align 2, keep-with-next
    856          uint8_t CAN_Sleep(CAN_TypeDef* CANx)
    857          {
    858            uint8_t sleepstatus = CAN_Sleep_Failed;
    859            
    860            /* Check the parameters */
    861            assert_param(IS_CAN_ALL_PERIPH(CANx));
    862              
    863            /* Request Sleep mode */
    864             CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
   \                     CAN_Sleep: (+1)
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0x0852             LSRS     R2,R2,#+1
   \   00000004   0x0052             LSLS     R2,R2,#+1
   \   00000006   0xF042 0x0202      ORR      R2,R2,#0x2
   \   0000000A   0x6002             STR      R2,[R0, #+0]
   \   0000000C   0x2100             MOVS     R1,#+0
    865             
    866            /* Sleep mode status */
    867            if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0xF000 0x0003      AND      R0,R0,#0x3
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xBF08             IT       EQ 
   \   00000018   0x2101             MOVEQ    R1,#+1
    868            {
    869              /* Sleep mode not entered */
    870              sleepstatus =  CAN_Sleep_Ok;
    871            }
    872            /* return sleep mode status */
    873             return (uint8_t)sleepstatus;
   \   0000001A   0x4608             MOV      R0,R1
   \   0000001C   0x4770             BX       LR               ;; return
    874          }
    875          
    876          /**
    877            * @brief  Wakes the CAN up.
    878            * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
    879            * @retval status:  CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed in an 
    880            *                  other case.
    881            */

   \                                 In section .text, align 2, keep-with-next
    882          uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
    883          {
    884            uint32_t wait_slak = SLAK_TIMEOUT;
    885            uint8_t wakeupstatus = CAN_WakeUp_Failed;
    886            
    887            /* Check the parameters */
    888            assert_param(IS_CAN_ALL_PERIPH(CANx));
    889              
    890            /* Wake up request */
    891            CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
   \                     CAN_WakeUp: (+1)
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0xF022 0x0202      BIC      R2,R2,#0x2
   \   00000006   0x6002             STR      R2,[R0, #+0]
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0xF64F 0x72FF      MOVW     R2,#+65535
   \   0000000E   0xE000             B.N      ??CAN_WakeUp_0
    892              
    893            /* Sleep mode status */
    894            while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
    895            {
    896             wait_slak--;
   \                     ??CAN_WakeUp_1: (+1)
   \   00000010   0x1E52             SUBS     R2,R2,#+1
    897            }
   \                     ??CAN_WakeUp_0: (+1)
   \   00000012   0x6843             LDR      R3,[R0, #+4]
   \   00000014   0x079B             LSLS     R3,R3,#+30
   \   00000016   0xD501             BPL.N    ??CAN_WakeUp_2
   \   00000018   0x2A00             CMP      R2,#+0
   \   0000001A   0xD1F9             BNE.N    ??CAN_WakeUp_1
    898            if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
   \                     ??CAN_WakeUp_2: (+1)
   \   0000001C   0x6840             LDR      R0,[R0, #+4]
   \   0000001E   0x0780             LSLS     R0,R0,#+30
   \   00000020   0xBF58             IT       PL 
   \   00000022   0x2101             MOVPL    R1,#+1
    899            {
    900             /* wake up done : Sleep mode exited */
    901              wakeupstatus = CAN_WakeUp_Ok;
    902            }
    903            /* return wakeup status */
    904            return (uint8_t)wakeupstatus;
   \   00000024   0x4608             MOV      R0,R1
   \   00000026   0x4770             BX       LR               ;; return
    905          }
    906          
    907          
    908          /**
    909            * @brief  Returns the CANx's last error code (LEC).
    910            * @param  CANx:          where x can be 1 or 2 to to select the CAN peripheral.  
    911            * @retval CAN_ErrorCode: specifies the Error code : 
    912            *                        - CAN_ERRORCODE_NoErr            No Error  
    913            *                        - CAN_ERRORCODE_StuffErr         Stuff Error
    914            *                        - CAN_ERRORCODE_FormErr          Form Error
    915            *                        - CAN_ERRORCODE_ACKErr           Acknowledgment Error
    916            *                        - CAN_ERRORCODE_BitRecessiveErr  Bit Recessive Error
    917            *                        - CAN_ERRORCODE_BitDominantErr   Bit Dominant Error
    918            *                        - CAN_ERRORCODE_CRCErr           CRC Error
    919            *                        - CAN_ERRORCODE_SoftwareSetErr   Software Set Error  
    920            */
    921           

   \                                 In section .text, align 2, keep-with-next
    922          uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
    923          {
    924            uint8_t errorcode=0;
    925            
    926            /* Check the parameters */
    927            assert_param(IS_CAN_ALL_PERIPH(CANx));
    928            
    929            /* Get the error code*/
    930            errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
   \                     CAN_GetLastErrorCode: (+1)
   \   00000000   0x6980             LDR      R0,[R0, #+24]
    931            
    932            /* Return the error code*/
    933            return errorcode;
   \   00000002   0xF000 0x0070      AND      R0,R0,#0x70
   \   00000006   0x4770             BX       LR               ;; return
    934          }
    935          /**
    936            * @brief  Returns the CANx Receive Error Counter (REC).
    937            * @note   In case of an error during reception, this counter is incremented 
    938            *         by 1 or by 8 depending on the error condition as defined by the CAN 
    939            *         standard. After every successful reception, the counter is 
    940            *         decremented by 1 or reset to 120 if its value was higher than 128. 
    941            *         When the counter value exceeds 127, the CAN controller enters the 
    942            *         error passive state.  
    943            * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
    944            * @retval CAN Receive Error Counter. 
    945            */

   \                                 In section .text, align 2, keep-with-next
    946          uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
    947          {
    948            uint8_t counter=0;
    949            
    950            /* Check the parameters */
    951            assert_param(IS_CAN_ALL_PERIPH(CANx));
    952            
    953            /* Get the Receive Error Counter*/
    954            counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
   \                     CAN_GetReceiveErrorCounter: (+1)
   \   00000000   0x6980             LDR      R0,[R0, #+24]
    955            
    956            /* Return the Receive Error Counter*/
    957            return counter;
   \   00000002   0x0E00             LSRS     R0,R0,#+24
   \   00000004   0x4770             BX       LR               ;; return
    958          }
    959          
    960          
    961          /**
    962            * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
    963            * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.  
    964            * @retval LSB of the 9-bit CAN Transmit Error Counter. 
    965            */

   \                                 In section .text, align 2, keep-with-next
    966          uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
    967          {
    968            uint8_t counter=0;
    969            
    970            /* Check the parameters */
    971            assert_param(IS_CAN_ALL_PERIPH(CANx));
    972            
    973            /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
    974            counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
   \                     CAN_GetLSBTransmitErrorCounter: (+1)
   \   00000000   0x6980             LDR      R0,[R0, #+24]
    975            
    976            /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
    977            return counter;
   \   00000002   0x0200             LSLS     R0,R0,#+8
   \   00000004   0x0E00             LSRS     R0,R0,#+24
   \   00000006   0x4770             BX       LR               ;; return
    978          }
    979          
    980          
    981          /**
    982            * @brief  Enables or disables the specified CANx interrupts.
    983            * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.
    984            * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
    985            *                 This parameter can be: 
    986            *                 - CAN_IT_TME, 
    987            *                 - CAN_IT_FMP0, 
    988            *                 - CAN_IT_FF0,
    989            *                 - CAN_IT_FOV0, 
    990            *                 - CAN_IT_FMP1, 
    991            *                 - CAN_IT_FF1,
    992            *                 - CAN_IT_FOV1, 
    993            *                 - CAN_IT_EWG, 
    994            *                 - CAN_IT_EPV,
    995            *                 - CAN_IT_LEC, 
    996            *                 - CAN_IT_ERR, 
    997            *                 - CAN_IT_WKU or 
    998            *                 - CAN_IT_SLK.
    999            * @param  NewState: new state of the CAN interrupts.
   1000            *                   This parameter can be: ENABLE or DISABLE.
   1001            * @retval None.
   1002            */

   \                                 In section .text, align 2, keep-with-next
   1003          void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
   1004          {
   1005            /* Check the parameters */
   1006            assert_param(IS_CAN_ALL_PERIPH(CANx));
   1007            assert_param(IS_CAN_IT(CAN_IT));
   1008            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1009          
   1010            if (NewState != DISABLE)
   \                     CAN_ITConfig: (+1)
   \   00000000   0x2A00             CMP      R2,#+0
   \   00000002   0x6942             LDR      R2,[R0, #+20]
   \   00000004   0xBF14             ITE      NE 
   \   00000006   0x4311             ORRNE    R1,R1,R2
   \   00000008   0xEA22 0x0101      BICEQ    R1,R2,R1
   1011            {
   1012              /* Enable the selected CANx interrupt */
   1013              CANx->IER |= CAN_IT;
   1014            }
   1015            else
   1016            {
   1017              /* Disable the selected CANx interrupt */
   1018              CANx->IER &= ~CAN_IT;
   \   0000000C   0x6141             STR      R1,[R0, #+20]
   1019            }
   1020          }
   \   0000000E   0x4770             BX       LR               ;; return
   1021          /**
   1022            * @brief  Checks whether the specified CAN flag is set or not.
   1023            * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
   1024            * @param  CAN_FLAG: specifies the flag to check.
   1025            *                   This parameter can be one of the following flags: 
   1026            *                  - CAN_FLAG_EWG
   1027            *                  - CAN_FLAG_EPV 
   1028            *                  - CAN_FLAG_BOF
   1029            *                  - CAN_FLAG_RQCP0
   1030            *                  - CAN_FLAG_RQCP1
   1031            *                  - CAN_FLAG_RQCP2
   1032            *                  - CAN_FLAG_FMP1   
   1033            *                  - CAN_FLAG_FF1       
   1034            *                  - CAN_FLAG_FOV1   
   1035            *                  - CAN_FLAG_FMP0   
   1036            *                  - CAN_FLAG_FF0       
   1037            *                  - CAN_FLAG_FOV0   
   1038            *                  - CAN_FLAG_WKU 
   1039            *                  - CAN_FLAG_SLAK  
   1040            *                  - CAN_FLAG_LEC       
   1041            * @retval The new state of CAN_FLAG (SET or RESET).
   1042            */

   \                                 In section .text, align 2, keep-with-next
   1043          FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
   1044          {
   \                     CAN_GetFlagStatus: (+1)
   \   00000000   0x4602             MOV      R2,R0
   1045            FlagStatus bitstatus = RESET;
   \   00000002   0x2000             MOVS     R0,#+0
   1046            
   1047            /* Check the parameters */
   1048            assert_param(IS_CAN_ALL_PERIPH(CANx));
   1049            assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
   1050            
   1051          
   1052            if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
   \   00000004   0xF411 0x0F70      TST      R1,#0xF00000
   \   00000008   0xBF18             IT       NE 
   \   0000000A   0x6992             LDRNE    R2,[R2, #+24]
   1053            { 
   1054              /* Check the status of the specified CAN flag */
   1055              if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
   \   0000000C   0xD10B             BNE.N    ??CAN_GetFlagStatus_0
   1056              { 
   1057                /* CAN_FLAG is set */
   1058                bitstatus = SET;
   1059              }
   1060              else
   1061              { 
   1062                /* CAN_FLAG is reset */
   1063                bitstatus = RESET;
   1064              }
   1065            }
   1066            else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
   \   0000000E   0x01CB             LSLS     R3,R1,#+7
   \   00000010   0xBF48             IT       MI 
   \   00000012   0x6852             LDRMI    R2,[R2, #+4]
   1067            { 
   1068              /* Check the status of the specified CAN flag */
   1069              if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
   \   00000014   0xD407             BMI.N    ??CAN_GetFlagStatus_0
   1070              { 
   1071                /* CAN_FLAG is set */
   1072                bitstatus = SET;
   1073              }
   1074              else
   1075              { 
   1076                /* CAN_FLAG is reset */
   1077                bitstatus = RESET;
   1078              }
   1079            }
   1080            else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
   \   00000016   0x010B             LSLS     R3,R1,#+4
   \   00000018   0xBF48             IT       MI 
   \   0000001A   0x6892             LDRMI    R2,[R2, #+8]
   1081            { 
   1082              /* Check the status of the specified CAN flag */
   1083              if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
   \   0000001C   0xD403             BMI.N    ??CAN_GetFlagStatus_0
   1084              { 
   1085                /* CAN_FLAG is set */
   1086                bitstatus = SET;
   1087              }
   1088              else
   1089              { 
   1090                /* CAN_FLAG is reset */
   1091                bitstatus = RESET;
   1092              }
   1093            }
   1094            else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
   \   0000001E   0x018B             LSLS     R3,R1,#+6
   \   00000020   0xBF4C             ITE      MI 
   \   00000022   0x68D2             LDRMI    R2,[R2, #+12]
   \   00000024   0x6912             LDRPL    R2,[R2, #+16]
   1095            { 
   1096              /* Check the status of the specified CAN flag */
   1097              if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
   1098              { 
   1099                /* CAN_FLAG is set */
   1100                bitstatus = SET;
   1101              }
   1102              else
   1103              { 
   1104                /* CAN_FLAG is reset */
   1105                bitstatus = RESET;
   1106              }
   1107            }
   1108            else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
   1109            { 
   1110              /* Check the status of the specified CAN flag */
   1111              if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
   \                     ??CAN_GetFlagStatus_0: (+1)
   \   00000026   0x4011             ANDS     R1,R1,R2
   \   00000028   0x0309             LSLS     R1,R1,#+12
   \   0000002A   0xBF18             IT       NE 
   \   0000002C   0x2001             MOVNE    R0,#+1
   1112              { 
   1113                /* CAN_FLAG is set */
   1114                bitstatus = SET;
   1115              }
   1116              else
   1117              { 
   1118                /* CAN_FLAG is reset */
   1119                bitstatus = RESET;
   1120              }
   1121            }
   1122            /* Return the CAN_FLAG status */
   1123            return  bitstatus;
   \   0000002E   0x4770             BX       LR               ;; return
   1124          }
   1125          
   1126          /**
   1127            * @brief  Clears the CAN's pending flags.
   1128            * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
   1129            * @param  CAN_FLAG: specifies the flag to clear.
   1130            *                   This parameter can be one of the following flags: 
   1131            *                    - CAN_FLAG_RQCP0
   1132            *                    - CAN_FLAG_RQCP1
   1133            *                    - CAN_FLAG_RQCP2
   1134            *                    - CAN_FLAG_FF1       
   1135            *                    - CAN_FLAG_FOV1   
   1136            *                    - CAN_FLAG_FF0       
   1137            *                    - CAN_FLAG_FOV0   
   1138            *                    - CAN_FLAG_WKU   
   1139            *                    - CAN_FLAG_SLAK    
   1140            *                    - CAN_FLAG_LEC       
   1141            * @retval None.
   1142            */

   \                                 In section .text, align 2, keep-with-next
   1143          void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
   1144          {
   1145            uint32_t flagtmp=0;
   1146            /* Check the parameters */
   1147            assert_param(IS_CAN_ALL_PERIPH(CANx));
   1148            assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
   1149            
   1150            if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
   \                     CAN_ClearFlag: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable6_7  ;; 0x30f00070
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0xD102             BNE.N    ??CAN_ClearFlag_0
   1151            {
   1152              /* Clear the selected CAN flags */
   1153              CANx->ESR = (uint32_t)RESET;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x6181             STR      R1,[R0, #+24]
   \   0000000A   0x4770             BX       LR
   1154            }
   1155            else /* MSR or TSR or RF0R or RF1R */
   1156            {
   1157              flagtmp = CAN_FLAG & 0x000FFFFF;
   \                     ??CAN_ClearFlag_0: (+1)
   \   0000000C   0x030A             LSLS     R2,R1,#+12
   \   0000000E   0x0B12             LSRS     R2,R2,#+12
   1158          
   1159              if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
   \   00000010   0x018B             LSLS     R3,R1,#+6
   \   00000012   0xD501             BPL.N    ??CAN_ClearFlag_1
   1160              {
   1161                /* Receive Flags */
   1162                CANx->RF0R = (uint32_t)(flagtmp);
   \   00000014   0x60C2             STR      R2,[R0, #+12]
   \   00000016   0x4770             BX       LR
   1163              }
   1164              else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
   \                     ??CAN_ClearFlag_1: (+1)
   \   00000018   0x014B             LSLS     R3,R1,#+5
   \   0000001A   0xD501             BPL.N    ??CAN_ClearFlag_2
   1165              {
   1166                /* Receive Flags */
   1167                CANx->RF1R = (uint32_t)(flagtmp);
   \   0000001C   0x6102             STR      R2,[R0, #+16]
   \   0000001E   0x4770             BX       LR
   1168              }
   1169              else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
   \                     ??CAN_ClearFlag_2: (+1)
   \   00000020   0x0109             LSLS     R1,R1,#+4
   \   00000022   0xBF4C             ITE      MI 
   \   00000024   0x6082             STRMI    R2,[R0, #+8]
   \   00000026   0x6042             STRPL    R2,[R0, #+4]
   1170              {
   1171                /* Transmit Flags */
   1172                CANx->TSR = (uint32_t)(flagtmp);
   1173              }
   1174              else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
   1175              {
   1176                /* Operating mode Flags */
   1177                CANx->MSR = (uint32_t)(flagtmp);
   \   00000028   0x4770             BX       LR
   1178              }
   1179            }
   1180          }
   1181          
   1182          /**
   1183            * @brief  Checks whether the specified CANx interrupt has occurred or not.
   1184            * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
   1185            * @param  CAN_IT:  specifies the CAN interrupt source to check.
   1186            *                  This parameter can be one of the following flags: 
   1187            *                 -  CAN_IT_TME               
   1188            *                 -  CAN_IT_FMP0              
   1189            *                 -  CAN_IT_FF0               
   1190            *                 -  CAN_IT_FOV0              
   1191            *                 -  CAN_IT_FMP1              
   1192            *                 -  CAN_IT_FF1               
   1193            *                 -  CAN_IT_FOV1              
   1194            *                 -  CAN_IT_WKU  
   1195            *                 -  CAN_IT_SLK  
   1196            *                 -  CAN_IT_EWG    
   1197            *                 -  CAN_IT_EPV    
   1198            *                 -  CAN_IT_BOF    
   1199            *                 -  CAN_IT_LEC    
   1200            *                 -  CAN_IT_ERR 
   1201            * @retval The current state of CAN_IT (SET or RESET).
   1202            */

   \                                 In section .text, align 2, keep-with-next
   1203          ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
   1204          {
   \                     CAN_GetITStatus: (+1)
   \   00000000   0x4602             MOV      R2,R0
   1205            ITStatus itstatus = RESET;
   \   00000002   0x2000             MOVS     R0,#+0
   1206            /* Check the parameters */
   1207            assert_param(IS_CAN_ALL_PERIPH(CANx));
   1208            assert_param(IS_CAN_IT(CAN_IT));
   1209            
   1210            /* check the enable interrupt bit */
   1211           if((CANx->IER & CAN_IT) != RESET)
   \   00000004   0x6953             LDR      R3,[R2, #+20]
   \   00000006   0x420B             TST      R3,R1
   \   00000008   0xD055             BEQ.N    ??CAN_GetITStatus_0
   1212           {
   1213             /* in case the Interrupt is enabled, .... */
   1214              switch (CAN_IT)
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xD021             BEQ.N    ??CAN_GetITStatus_1
   \   0000000E   0x2902             CMP      R1,#+2
   \   00000010   0xD024             BEQ.N    ??CAN_GetITStatus_2
   \   00000012   0x2904             CMP      R1,#+4
   \   00000014   0xD027             BEQ.N    ??CAN_GetITStatus_3
   \   00000016   0x2908             CMP      R1,#+8
   \   00000018   0xD028             BEQ.N    ??CAN_GetITStatus_4
   \   0000001A   0x2910             CMP      R1,#+16
   \   0000001C   0xD029             BEQ.N    ??CAN_GetITStatus_5
   \   0000001E   0x2920             CMP      R1,#+32
   \   00000020   0xD02C             BEQ.N    ??CAN_GetITStatus_6
   \   00000022   0x2940             CMP      R1,#+64
   \   00000024   0xD02D             BEQ.N    ??CAN_GetITStatus_7
   \   00000026   0xF5B1 0x7F80      CMP      R1,#+256
   \   0000002A   0xD033             BEQ.N    ??CAN_GetITStatus_8
   \   0000002C   0xF5B1 0x7F00      CMP      R1,#+512
   \   00000030   0xD033             BEQ.N    ??CAN_GetITStatus_9
   \   00000032   0xF5B1 0x6F80      CMP      R1,#+1024
   \   00000036   0xD033             BEQ.N    ??CAN_GetITStatus_10
   \   00000038   0xF5B1 0x6F00      CMP      R1,#+2048
   \   0000003C   0xD032             BEQ.N    ??CAN_GetITStatus_11
   \   0000003E   0xF5B1 0x4F00      CMP      R1,#+32768
   \   00000042   0xD034             BEQ.N    ??CAN_GetITStatus_12
   \   00000044   0xF5B1 0x3F80      CMP      R1,#+65536
   \   00000048   0xD01E             BEQ.N    ??CAN_GetITStatus_13
   \   0000004A   0xF5B1 0x3F00      CMP      R1,#+131072
   \   0000004E   0xD01E             BEQ.N    ??CAN_GetITStatus_14
   \   00000050   0x4770             BX       LR
   1215              {
   1216                case CAN_IT_TME:
   1217                         /* Check CAN_TSR_RQCPx bits */
   1218          	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
   \                     ??CAN_GetITStatus_1: (+1)
   \   00000052   0x6891             LDR      R1,[R2, #+8]
   \   00000054   0x....             LDR.N    R2,??DataTable6_8  ;; 0x10101
   \   00000056   0x4211             TST      R1,R2
   \   00000058   0xD02D             BEQ.N    ??CAN_GetITStatus_0
   \   0000005A   0xE02B             B.N      ??CAN_GetITStatus_15
   1219          	      break;
   1220                case CAN_IT_FMP0:
   1221                         /* Check CAN_RF0R_FMP0 bit */
   1222          	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
   \                     ??CAN_GetITStatus_2: (+1)
   \   0000005C   0x68D1             LDR      R1,[R2, #+12]
   \   0000005E   0xF011 0x0F03      TST      R1,#0x3
   \   00000062   0xD028             BEQ.N    ??CAN_GetITStatus_0
   \   00000064   0xE026             B.N      ??CAN_GetITStatus_15
   1223          	      break;
   1224                case CAN_IT_FF0:
   1225                         /* Check CAN_RF0R_FULL0 bit */
   1226                         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
   \                     ??CAN_GetITStatus_3: (+1)
   \   00000066   0x68D1             LDR      R1,[R2, #+12]
   \   00000068   0x0709             LSLS     R1,R1,#+28
   \   0000006A   0xE022             B.N      ??CAN_GetITStatus_16
   1227          	      break;
   1228                case CAN_IT_FOV0:
   1229                         /* Check CAN_RF0R_FOVR0 bit */
   1230                         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
   \                     ??CAN_GetITStatus_4: (+1)
   \   0000006C   0x68D1             LDR      R1,[R2, #+12]
   \   0000006E   0x06C9             LSLS     R1,R1,#+27
   \   00000070   0xE01F             B.N      ??CAN_GetITStatus_16
   1231          	      break;
   1232                case CAN_IT_FMP1:
   1233                         /* Check CAN_RF1R_FMP1 bit */
   1234                         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
   \                     ??CAN_GetITStatus_5: (+1)
   \   00000072   0x6911             LDR      R1,[R2, #+16]
   \   00000074   0xF011 0x0F03      TST      R1,#0x3
   \   00000078   0xD01D             BEQ.N    ??CAN_GetITStatus_0
   \   0000007A   0xE01B             B.N      ??CAN_GetITStatus_15
   1235          	      break;
   1236                case CAN_IT_FF1:
   1237                         /* Check CAN_RF1R_FULL1 bit */
   1238          	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
   \                     ??CAN_GetITStatus_6: (+1)
   \   0000007C   0x6911             LDR      R1,[R2, #+16]
   \   0000007E   0x0709             LSLS     R1,R1,#+28
   \   00000080   0xE017             B.N      ??CAN_GetITStatus_16
   1239          	      break;
   1240                case CAN_IT_FOV1:
   1241                         /* Check CAN_RF1R_FOVR1 bit */
   1242          	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
   \                     ??CAN_GetITStatus_7: (+1)
   \   00000082   0x6911             LDR      R1,[R2, #+16]
   \   00000084   0x06C9             LSLS     R1,R1,#+27
   \   00000086   0xE014             B.N      ??CAN_GetITStatus_16
   1243          	      break;
   1244                case CAN_IT_WKU:
   1245                         /* Check CAN_MSR_WKUI bit */
   1246                         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
   \                     ??CAN_GetITStatus_13: (+1)
   \   00000088   0x6851             LDR      R1,[R2, #+4]
   \   0000008A   0x0709             LSLS     R1,R1,#+28
   \   0000008C   0xE011             B.N      ??CAN_GetITStatus_16
   1247          	      break;
   1248                case CAN_IT_SLK:
   1249                         /* Check CAN_MSR_SLAKI bit */
   1250          	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
   \                     ??CAN_GetITStatus_14: (+1)
   \   0000008E   0x6851             LDR      R1,[R2, #+4]
   \   00000090   0x06C9             LSLS     R1,R1,#+27
   \   00000092   0xE00E             B.N      ??CAN_GetITStatus_16
   1251          	      break;
   1252                case CAN_IT_EWG:
   1253                         /* Check CAN_ESR_EWGF bit */
   1254          	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
   \                     ??CAN_GetITStatus_8: (+1)
   \   00000094   0x6991             LDR      R1,[R2, #+24]
   \   00000096   0x07C9             LSLS     R1,R1,#+31
   \   00000098   0xE00B             B.N      ??CAN_GetITStatus_16
   1255          	      break;
   1256                case CAN_IT_EPV:
   1257                         /* Check CAN_ESR_EPVF bit */
   1258          	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
   \                     ??CAN_GetITStatus_9: (+1)
   \   0000009A   0x6991             LDR      R1,[R2, #+24]
   \   0000009C   0x0789             LSLS     R1,R1,#+30
   \   0000009E   0xE008             B.N      ??CAN_GetITStatus_16
   1259          	      break;
   1260                case CAN_IT_BOF:
   1261                         /* Check CAN_ESR_BOFF bit */
   1262          	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
   \                     ??CAN_GetITStatus_10: (+1)
   \   000000A0   0x6991             LDR      R1,[R2, #+24]
   \   000000A2   0xE005             B.N      ??CAN_GetITStatus_17
   1263          	      break;
   1264                case CAN_IT_LEC:
   1265                         /* Check CAN_ESR_LEC bit */
   1266          	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
   \                     ??CAN_GetITStatus_11: (+1)
   \   000000A4   0x6991             LDR      R1,[R2, #+24]
   \   000000A6   0xF011 0x0F70      TST      R1,#0x70
   \   000000AA   0xD004             BEQ.N    ??CAN_GetITStatus_0
   \   000000AC   0xE002             B.N      ??CAN_GetITStatus_15
   1267          	      break;
   1268                case CAN_IT_ERR:
   1269                         /* Check CAN_MSR_ERRI bit */ 
   1270                         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
   \                     ??CAN_GetITStatus_12: (+1)
   \   000000AE   0x6851             LDR      R1,[R2, #+4]
   \                     ??CAN_GetITStatus_17: (+1)
   \   000000B0   0x0749             LSLS     R1,R1,#+29
   \                     ??CAN_GetITStatus_16: (+1)
   \   000000B2   0xD500             BPL.N    ??CAN_GetITStatus_0
   \                     ??CAN_GetITStatus_15: (+1)
   \   000000B4   0x2001             MOVS     R0,#+1
   1271          	      break;
   1272                default :
   1273                         /* in case of error, return RESET */
   1274                        itstatus = RESET;
   1275                        break;
   1276              }
   1277            }
   1278            else
   1279            {
   1280             /* in case the Interrupt is not enabled, return RESET */
   1281              itstatus  = RESET;
   1282            }
   1283            
   1284            /* Return the CAN_IT status */
   1285            return  itstatus;
   \                     ??CAN_GetITStatus_0: (+1)
   \   000000B6   0x4770             BX       LR               ;; return
   1286          }
   1287          
   1288          /**
   1289            * @brief  Clears the CANx's interrupt pending bits.
   1290            * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
   1291            * @param  CAN_IT: specifies the interrupt pending bit to clear.
   1292            *                  -  CAN_IT_TME                     
   1293            *                  -  CAN_IT_FF0               
   1294            *                  -  CAN_IT_FOV0                     
   1295            *                  -  CAN_IT_FF1               
   1296            *                  -  CAN_IT_FOV1              
   1297            *                  -  CAN_IT_WKU  
   1298            *                  -  CAN_IT_SLK  
   1299            *                  -  CAN_IT_EWG    
   1300            *                  -  CAN_IT_EPV    
   1301            *                  -  CAN_IT_BOF    
   1302            *                  -  CAN_IT_LEC    
   1303            *                  -  CAN_IT_ERR 
   1304            * @retval None.
   1305            */

   \                                 In section .text, align 2, keep-with-next
   1306          void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
   1307          {
   1308            /* Check the parameters */
   1309            assert_param(IS_CAN_ALL_PERIPH(CANx));
   1310            assert_param(IS_CAN_CLEAR_IT(CAN_IT));
   1311          
   1312            switch (CAN_IT)
   \                     CAN_ClearITPendingBit: (+1)
   \   00000000   0x2901             CMP      R1,#+1
   \   00000002   0xD01C             BEQ.N    ??CAN_ClearITPendingBit_0
   \   00000004   0x2904             CMP      R1,#+4
   \   00000006   0xD01D             BEQ.N    ??CAN_ClearITPendingBit_1
   \   00000008   0x2908             CMP      R1,#+8
   \   0000000A   0xD01E             BEQ.N    ??CAN_ClearITPendingBit_2
   \   0000000C   0x2920             CMP      R1,#+32
   \   0000000E   0xD01F             BEQ.N    ??CAN_ClearITPendingBit_3
   \   00000010   0x2940             CMP      R1,#+64
   \   00000012   0xD020             BEQ.N    ??CAN_ClearITPendingBit_4
   \   00000014   0xF5B1 0x7F80      CMP      R1,#+256
   \   00000018   0xBF1C             ITT      NE 
   \   0000001A   0xF5B1 0x7F00      CMPNE    R1,#+512
   \   0000001E   0xF5B1 0x6F80      CMPNE    R1,#+1024
   \   00000022   0xD023             BEQ.N    ??CAN_ClearITPendingBit_5
   \   00000024   0xF5B1 0x6F00      CMP      R1,#+2048
   \   00000028   0xBF18             IT       NE 
   \   0000002A   0xF5B1 0x4F00      CMPNE    R1,#+32768
   \   0000002E   0xD01B             BEQ.N    ??CAN_ClearITPendingBit_6
   \   00000030   0xF5B1 0x3F80      CMP      R1,#+65536
   \   00000034   0xD012             BEQ.N    ??CAN_ClearITPendingBit_7
   \   00000036   0xF5B1 0x3F00      CMP      R1,#+131072
   \   0000003A   0xD012             BEQ.N    ??CAN_ClearITPendingBit_8
   \   0000003C   0x4770             BX       LR
   1313            {
   1314                case CAN_IT_TME:
   1315                        /* Clear CAN_TSR_RQCPx (rc_w1)*/
   1316          	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
   \                     ??CAN_ClearITPendingBit_0: (+1)
   \   0000003E   0x....             LDR.N    R1,??DataTable6_8  ;; 0x10101
   \   00000040   0x6081             STR      R1,[R0, #+8]
   1317          	      break;
   \   00000042   0x4770             BX       LR
   1318                case CAN_IT_FF0:
   1319                        /* Clear CAN_RF0R_FULL0 (rc_w1)*/
   1320          	      CANx->RF0R = CAN_RF0R_FULL0; 
   \                     ??CAN_ClearITPendingBit_1: (+1)
   \   00000044   0x2108             MOVS     R1,#+8
   \   00000046   0x60C1             STR      R1,[R0, #+12]
   1321          	      break;
   1322                case CAN_IT_FOV0:
   1323                        /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
   1324          	      CANx->RF0R = CAN_RF0R_FOVR0; 
   1325          	      break;
   \   00000048   0x4770             BX       LR
   \                     ??CAN_ClearITPendingBit_2: (+1)
   \   0000004A   0x2110             MOVS     R1,#+16
   \   0000004C   0x60C1             STR      R1,[R0, #+12]
   \   0000004E   0x4770             BX       LR
   1326                case CAN_IT_FF1:
   1327                        /* Clear CAN_RF1R_FULL1 (rc_w1)*/
   1328          	      CANx->RF1R = CAN_RF1R_FULL1;  
   \                     ??CAN_ClearITPendingBit_3: (+1)
   \   00000050   0x2108             MOVS     R1,#+8
   \   00000052   0x6101             STR      R1,[R0, #+16]
   1329          	      break;
   1330                case CAN_IT_FOV1:
   1331                        /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
   1332          	      CANx->RF1R = CAN_RF1R_FOVR1; 
   1333          	      break;
   \   00000054   0x4770             BX       LR
   \                     ??CAN_ClearITPendingBit_4: (+1)
   \   00000056   0x2110             MOVS     R1,#+16
   \   00000058   0x6101             STR      R1,[R0, #+16]
   \   0000005A   0x4770             BX       LR
   1334                case CAN_IT_WKU:
   1335                        /* Clear CAN_MSR_WKUI (rc_w1)*/
   1336          	      CANx->MSR = CAN_MSR_WKUI;  
   \                     ??CAN_ClearITPendingBit_7: (+1)
   \   0000005C   0x2108             MOVS     R1,#+8
   \   0000005E   0x6041             STR      R1,[R0, #+4]
   1337          	      break;
   1338                case CAN_IT_SLK:
   1339                        /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
   1340          	      CANx->MSR = CAN_MSR_SLAKI;   
   1341          	      break;
   1342                case CAN_IT_EWG:
   1343                        /* Clear CAN_MSR_ERRI (rc_w1) */
   1344          	      CANx->MSR = CAN_MSR_ERRI;
   1345                        /* Note : the corresponding Flag is cleared by hardware depending 
   1346                                  of the CAN Bus status*/ 
   1347          	      break;
   1348                case CAN_IT_EPV:
   1349                        /* Clear CAN_MSR_ERRI (rc_w1) */
   1350          	      CANx->MSR = CAN_MSR_ERRI; 
   1351                        /* Note : the corresponding Flag is cleared by hardware depending 
   1352                                  of the CAN Bus status*/
   1353          	      break;
   1354                case CAN_IT_BOF:
   1355                        /* Clear CAN_MSR_ERRI (rc_w1) */ 
   1356          	      CANx->MSR = CAN_MSR_ERRI; 
   1357                        /* Note : the corresponding Flag is cleared by hardware depending 
   1358                                  of the CAN Bus status*/
   1359          	      break;
   1360                case CAN_IT_LEC:
   1361                        /*  Clear LEC bits */
   1362          	      CANx->ESR = RESET; 
   1363                        /* Clear CAN_MSR_ERRI (rc_w1) */
   1364          	      CANx->MSR = CAN_MSR_ERRI; 
   1365          	      break;
   1366                case CAN_IT_ERR:
   1367                        /*Clear LEC bits */
   1368          	      CANx->ESR = RESET; 
   1369                        /* Clear CAN_MSR_ERRI (rc_w1) */
   1370          	      CANx->MSR = CAN_MSR_ERRI; 
   1371          	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
   1372                            of the CAN Bus status*/
   1373          	      break;
   1374                default :
   1375          	      break;
   1376             }
   1377          }
   \   00000060   0x4770             BX       LR
   \                     ??CAN_ClearITPendingBit_8: (+1)
   \   00000062   0x2110             MOVS     R1,#+16
   \   00000064   0x6041             STR      R1,[R0, #+4]
   \   00000066   0x4770             BX       LR
   \                     ??CAN_ClearITPendingBit_6: (+1)
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x6181             STR      R1,[R0, #+24]
   \                     ??CAN_ClearITPendingBit_5: (+1)
   \   0000006C   0x2104             MOVS     R1,#+4
   \   0000006E   0x6041             STR      R1,[R0, #+4]
   \   00000070   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x40006400         DC32     0x40006400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40006600         DC32     0x40006600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40006640         DC32     0x40006640

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0xFFFFC0F1         DC32     0xffffc0f1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x04000003         DC32     0x4000003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x08000300         DC32     0x8000300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x10030000         DC32     0x10030000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x30F00070         DC32     0x30f00070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x00010101         DC32     0x10101
   1378          
   1379          /**
   1380            * @brief  Checks whether the CAN interrupt has occurred or not.
   1381            * @param  CAN_Reg: specifies the CAN interrupt register to check.
   1382            * @param  It_Bit:  specifies the interrupt source bit to check.
   1383            * @retval The new state of the CAN Interrupt (SET or RESET).
   1384            */
   1385          static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
   1386          {
   1387            ITStatus pendingbitstatus = RESET;
   1388            
   1389            if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
   1390            {
   1391              /* CAN_IT is set */
   1392              pendingbitstatus = SET;
   1393            }
   1394            else
   1395            {
   1396              /* CAN_IT is reset */
   1397              pendingbitstatus = RESET;
   1398            }
   1399            return pendingbitstatus;
   1400          }
   1401          
   1402          
   1403          /**
   1404            * @}
   1405            */
   1406          
   1407          /**
   1408            * @}
   1409            */
   1410          
   1411          /**
   1412            * @}
   1413            */
   1414          
   1415          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CAN_CancelTransmit
       0   CAN_ClearFlag
       0   CAN_ClearITPendingBit
       0   CAN_DBGFreeze
       8   CAN_DeInit
         0   -> RCC_APB1PeriphResetCmd
         8   -> RCC_APB1PeriphResetCmd
       0   CAN_FIFORelease
      12   CAN_FilterInit
       0   CAN_GetFlagStatus
       0   CAN_GetITStatus
       0   CAN_GetLSBTransmitErrorCounter
       0   CAN_GetLastErrorCode
       0   CAN_GetReceiveErrorCounter
       0   CAN_ITConfig
       8   CAN_Init
       0   CAN_MessagePending
       0   CAN_OperatingModeRequest
       0   CAN_Receive
       0   CAN_SlaveStartBank
       0   CAN_Sleep
       0   CAN_StructInit
       0   CAN_TTComModeCmd
      12   CAN_Transmit
       0   CAN_TransmitStatus
       0   CAN_WakeUp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
      40  CAN_CancelTransmit
      42  CAN_ClearFlag
     114  CAN_ClearITPendingBit
      18  CAN_DBGFreeze
      56  CAN_DeInit
      22  CAN_FIFORelease
     176  CAN_FilterInit
      48  CAN_GetFlagStatus
     184  CAN_GetITStatus
       8  CAN_GetLSBTransmitErrorCounter
       8  CAN_GetLastErrorCode
       6  CAN_GetReceiveErrorCounter
      16  CAN_ITConfig
     222  CAN_Init
      22  CAN_MessagePending
     144  CAN_OperatingModeRequest
     180  CAN_Receive
      40  CAN_SlaveStartBank
      30  CAN_Sleep
      32  CAN_StructInit
      94  CAN_TTComModeCmd
     190  CAN_Transmit
      74  CAN_TransmitStatus
      40  CAN_WakeUp

 
 1 842 bytes in section .text
 
 1 842 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       12/Sep/2016  16:26:15
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ilya\vendicont\arm-periphery\library\STM32F10x_StdPeriph_Driver\src\stm32f10x_exti.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\library\STM32F10x_StdPeriph_Driver\src\stm32f10x_exti.c
#        -D STM32F10X_HD -D USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\stm32f10x_exti.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\stm32f10x_exti.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\library\STM32F10x_StdPeriph_Driver\src\stm32f10x_exti.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_exti.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the EXTI firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_exti.h"
     24          
     25          /** @addtogroup STM32F10x_StdPeriph_Driver
     26            * @{
     27            */
     28          
     29          /** @defgroup EXTI 
     30            * @brief EXTI driver modules
     31            * @{
     32            */
     33          
     34          /** @defgroup EXTI_Private_TypesDefinitions
     35            * @{
     36            */
     37          
     38          /**
     39            * @}
     40            */
     41          
     42          /** @defgroup EXTI_Private_Defines
     43            * @{
     44            */
     45          
     46          #define EXTI_LINENONE    ((uint32_t)0x00000)  /* No interrupt selected */
     47          
     48          /**
     49            * @}
     50            */
     51          
     52          /** @defgroup EXTI_Private_Macros
     53            * @{
     54            */
     55          
     56          /**
     57            * @}
     58            */
     59          
     60          /** @defgroup EXTI_Private_Variables
     61            * @{
     62            */
     63          
     64          /**
     65            * @}
     66            */
     67          
     68          /** @defgroup EXTI_Private_FunctionPrototypes
     69            * @{
     70            */
     71          
     72          /**
     73            * @}
     74            */
     75          
     76          /** @defgroup EXTI_Private_Functions
     77            * @{
     78            */
     79          
     80          /**
     81            * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
     82            * @param  None
     83            * @retval None
     84            */

   \                                 In section .text, align 2, keep-with-next
     85          void EXTI_DeInit(void)
     86          {
     87            EXTI->IMR = 0x00000000;
   \                     EXTI_DeInit: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6  ;; 0x40010400
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
     88            EXTI->EMR = 0x00000000;
   \   00000006   0x6041             STR      R1,[R0, #+4]
     89            EXTI->RTSR = 0x00000000; 
   \   00000008   0x6081             STR      R1,[R0, #+8]
     90            EXTI->FTSR = 0x00000000; 
   \   0000000A   0x60C1             STR      R1,[R0, #+12]
     91            EXTI->PR = 0x000FFFFF;
   \   0000000C   0x....             LDR.N    R1,??DataTable6_1  ;; 0xfffff
   \   0000000E   0x6141             STR      R1,[R0, #+20]
     92          }
   \   00000010   0x4770             BX       LR               ;; return
     93          
     94          /**
     95            * @brief  Initializes the EXTI peripheral according to the specified
     96            *         parameters in the EXTI_InitStruct.
     97            * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
     98            *         that contains the configuration information for the EXTI peripheral.
     99            * @retval None
    100            */

   \                                 In section .text, align 2, keep-with-next
    101          void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
    102          {
   \                     EXTI_Init: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    103            uint32_t tmp = 0;
    104          
    105            /* Check the parameters */
    106            assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
    107            assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
    108            assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
    109            assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
    110          
    111            tmp = (uint32_t)EXTI_BASE;
    112               
    113            if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x7982             LDRB     R2,[R0, #+6]
   \   00000006   0x43CB             MVNS     R3,R1
   \   00000008   0x....             LDR.N    R1,??DataTable6  ;; 0x40010400
   \   0000000A   0xB332             CBZ.N    R2,??EXTI_Init_0
    114            {
    115              /* Clear EXTI line configuration */
    116              EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
   \   0000000C   0x460A             MOV      R2,R1
   \   0000000E   0x6814             LDR      R4,[R2, #+0]
   \   00000010   0x4023             ANDS     R3,R3,R4
   \   00000012   0x6013             STR      R3,[R2, #+0]
    117              EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
   \   00000014   0x6853             LDR      R3,[R2, #+4]
   \   00000016   0x6804             LDR      R4,[R0, #+0]
   \   00000018   0x43A3             BICS     R3,R3,R4
   \   0000001A   0x6053             STR      R3,[R2, #+4]
    118              
    119              tmp += EXTI_InitStruct->EXTI_Mode;
   \   0000001C   0x7903             LDRB     R3,[R0, #+4]
   \   0000001E   0x18CC             ADDS     R4,R1,R3
    120          
    121              *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
   \   00000020   0x6823             LDR      R3,[R4, #+0]
   \   00000022   0x6805             LDR      R5,[R0, #+0]
   \   00000024   0x432B             ORRS     R3,R5,R3
   \   00000026   0x6023             STR      R3,[R4, #+0]
    122          
    123              /* Clear Rising Falling edge configuration */
    124              EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
   \   00000028   0x6893             LDR      R3,[R2, #+8]
   \   0000002A   0x6804             LDR      R4,[R0, #+0]
   \   0000002C   0x43A3             BICS     R3,R3,R4
   \   0000002E   0x6093             STR      R3,[R2, #+8]
    125              EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
   \   00000030   0x68D3             LDR      R3,[R2, #+12]
   \   00000032   0x6804             LDR      R4,[R0, #+0]
   \   00000034   0x43A3             BICS     R3,R3,R4
   \   00000036   0x60D3             STR      R3,[R2, #+12]
    126              
    127              /* Select the trigger for the selected external interrupts */
    128              if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
   \   00000038   0x7943             LDRB     R3,[R0, #+5]
   \   0000003A   0x6805             LDR      R5,[R0, #+0]
   \   0000003C   0x2B10             CMP      R3,#+16
   \   0000003E   0xD108             BNE.N    ??EXTI_Init_1
    129              {
    130                /* Rising Falling edge */
    131                EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
   \   00000040   0x6891             LDR      R1,[R2, #+8]
   \   00000042   0x4329             ORRS     R1,R5,R1
   \   00000044   0x6091             STR      R1,[R2, #+8]
    132                EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
   \   00000046   0x68D1             LDR      R1,[R2, #+12]
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x4308             ORRS     R0,R0,R1
   \   0000004C   0x60D0             STR      R0,[R2, #+12]
    133              }
    134              else
    135              {
    136                tmp = (uint32_t)EXTI_BASE;
    137                tmp += EXTI_InitStruct->EXTI_Trigger;
    138          
    139                *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    140              }
    141            }
    142            else
    143            {
    144              tmp += EXTI_InitStruct->EXTI_Mode;
    145          
    146              /* Disable the selected external lines */
    147              *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    148            }
    149          }
   \   0000004E   0xBC30             POP      {R4,R5}
   \   00000050   0x4770             BX       LR
   \                     ??EXTI_Init_1: (+1)
   \   00000052   0x18CC             ADDS     R4,R1,R3
   \   00000054   0x6820             LDR      R0,[R4, #+0]
   \   00000056   0x4328             ORRS     R0,R5,R0
   \   00000058   0xE003             B.N      ??EXTI_Init_2
   \                     ??EXTI_Init_0: (+1)
   \   0000005A   0x7900             LDRB     R0,[R0, #+4]
   \   0000005C   0x180C             ADDS     R4,R1,R0
   \   0000005E   0x6820             LDR      R0,[R4, #+0]
   \   00000060   0x4018             ANDS     R0,R3,R0
   \                     ??EXTI_Init_2: (+1)
   \   00000062   0x6020             STR      R0,[R4, #+0]
   \   00000064   0xBC30             POP      {R4,R5}
   \   00000066   0x4770             BX       LR               ;; return
    150          
    151          /**
    152            * @brief  Fills each EXTI_InitStruct member with its reset value.
    153            * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
    154            *         be initialized.
    155            * @retval None
    156            */

   \                                 In section .text, align 2, keep-with-next
    157          void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
    158          {
    159            EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
   \                     EXTI_StructInit: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
    160            EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000004   0x7101             STRB     R1,[R0, #+4]
    161            EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
   \   00000006   0x210C             MOVS     R1,#+12
   \   00000008   0x7141             STRB     R1,[R0, #+5]
    162            EXTI_InitStruct->EXTI_LineCmd = DISABLE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7181             STRB     R1,[R0, #+6]
    163          }
   \   0000000E   0x4770             BX       LR               ;; return
    164          
    165          /**
    166            * @brief  Generates a Software interrupt.
    167            * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
    168            *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
    169            * @retval None
    170            */

   \                                 In section .text, align 2, keep-with-next
    171          void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
    172          {
    173            /* Check the parameters */
    174            assert_param(IS_EXTI_LINE(EXTI_Line));
    175            
    176            EXTI->SWIER |= EXTI_Line;
   \                     EXTI_GenerateSWInterrupt: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable6_2  ;; 0x40010410
   \   00000002   0x680A             LDR      R2,[R1, #+0]
   \   00000004   0x4310             ORRS     R0,R0,R2
   \   00000006   0x6008             STR      R0,[R1, #+0]
    177          }
   \   00000008   0x4770             BX       LR               ;; return
    178          
    179          /**
    180            * @brief  Checks whether the specified EXTI line flag is set or not.
    181            * @param  EXTI_Line: specifies the EXTI line flag to check.
    182            *   This parameter can be:
    183            *     @arg EXTI_Linex: External interrupt line x where x(0..19)
    184            * @retval The new state of EXTI_Line (SET or RESET).
    185            */

   \                                 In section .text, align 2, keep-with-next
    186          FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
    187          {
    188            FlagStatus bitstatus = RESET;
    189            /* Check the parameters */
    190            assert_param(IS_GET_EXTI_LINE(EXTI_Line));
    191            
    192            if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
   \                     EXTI_GetFlagStatus: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable6_3  ;; 0x40010414
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x4202             TST      R2,R0
   \   00000008   0xBF18             IT       NE 
   \   0000000A   0x2101             MOVNE    R1,#+1
    193            {
    194              bitstatus = SET;
    195            }
    196            else
    197            {
    198              bitstatus = RESET;
    199            }
    200            return bitstatus;
   \   0000000C   0x4608             MOV      R0,R1
   \   0000000E   0x4770             BX       LR               ;; return
    201          }
    202          
    203          /**
    204            * @brief  Clears the EXTI's line pending flags.
    205            * @param  EXTI_Line: specifies the EXTI lines flags to clear.
    206            *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
    207            * @retval None
    208            */

   \                                 In section .text, align 2, keep-with-next
    209          void EXTI_ClearFlag(uint32_t EXTI_Line)
    210          {
    211            /* Check the parameters */
    212            assert_param(IS_EXTI_LINE(EXTI_Line));
    213            
    214            EXTI->PR = EXTI_Line;
   \                     EXTI_ClearFlag: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable6_3  ;; 0x40010414
   \   00000002   0x6008             STR      R0,[R1, #+0]
    215          }
   \   00000004   0x4770             BX       LR               ;; return
    216          
    217          /**
    218            * @brief  Checks whether the specified EXTI line is asserted or not.
    219            * @param  EXTI_Line: specifies the EXTI line to check.
    220            *   This parameter can be:
    221            *     @arg EXTI_Linex: External interrupt line x where x(0..19)
    222            * @retval The new state of EXTI_Line (SET or RESET).
    223            */

   \                                 In section .text, align 2, keep-with-next
    224          ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
    225          {
    226            ITStatus bitstatus = RESET;
    227            uint32_t enablestatus = 0;
    228            /* Check the parameters */
    229            assert_param(IS_GET_EXTI_LINE(EXTI_Line));
    230            
    231            enablestatus =  EXTI->IMR & EXTI_Line;
   \                     EXTI_GetITStatus: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable6  ;; 0x40010400
   \   00000002   0x6813             LDR      R3,[R2, #+0]
    232            if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
   \   00000004   0x6952             LDR      R2,[R2, #+20]
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x4003             ANDS     R3,R0,R3
   \   0000000A   0x4202             TST      R2,R0
   \   0000000C   0xBF1C             ITT      NE 
   \   0000000E   0x2B00             CMPNE    R3,#+0
   \   00000010   0x2101             MOVNE    R1,#+1
    233            {
    234              bitstatus = SET;
    235            }
    236            else
    237            {
    238              bitstatus = RESET;
    239            }
    240            return bitstatus;
   \   00000012   0x4608             MOV      R0,R1
   \   00000014   0x4770             BX       LR               ;; return
    241          }
    242          
    243          /**
    244            * @brief  Clears the EXTI's line pending bits.
    245            * @param  EXTI_Line: specifies the EXTI lines to clear.
    246            *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
    247            * @retval None
    248            */

   \                                 In section .text, align 2, keep-with-next
    249          void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
    250          {
    251            /* Check the parameters */
    252            assert_param(IS_EXTI_LINE(EXTI_Line));
    253            
    254            EXTI->PR = EXTI_Line;
   \                     EXTI_ClearITPendingBit: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable6_3  ;; 0x40010414
   \   00000002   0x6008             STR      R0,[R1, #+0]
    255          }
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x40010400         DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x000FFFFF         DC32     0xfffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40010410         DC32     0x40010410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x40010414         DC32     0x40010414
    256          
    257          /**
    258            * @}
    259            */
    260          
    261          /**
    262            * @}
    263            */
    264          
    265          /**
    266            * @}
    267            */
    268          
    269          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   EXTI_ClearFlag
       0   EXTI_ClearITPendingBit
       0   EXTI_DeInit
       0   EXTI_GenerateSWInterrupt
       0   EXTI_GetFlagStatus
       0   EXTI_GetITStatus
       8   EXTI_Init
       0   EXTI_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       6  EXTI_ClearFlag
       6  EXTI_ClearITPendingBit
      18  EXTI_DeInit
      10  EXTI_GenerateSWInterrupt
      16  EXTI_GetFlagStatus
      22  EXTI_GetITStatus
     104  EXTI_Init
      16  EXTI_StructInit

 
 214 bytes in section .text
 
 214 bytes of CODE memory

Errors: none
Warnings: none

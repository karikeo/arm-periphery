###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       19/Oct/2016  13:34:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\ilya\vendicont\arm-periphery\Application\sw_uart.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\sw_uart.c -D STM32F10X_HD
#        -D USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\sw_uart.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\sw_uart.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\sw_uart.c
      1          #include "stm32f10x.h"
      2          #include "stm32f10x_dbgmcu.h"
      3          #include "RTOS.h"
      4          #include "BSP.h"
      5          //#include "stdio.h"
      6          //#include "log.h"
      7          //#include "vending/pt-vending.h"
      8          //#include "vending/dex.h"
      9          //#include "vending/mdb.h"
     10          #include "utils.h"
     11          #include "sw_uart.h"
     12          
     13          extern GPIO_InitTypeDef GPIO_InitStructure;
     14          TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
     15          TIM_ICInitTypeDef TIM_ICInitStruct;
     16          TIM_OCInitTypeDef TIM_OCInitStruct;
     17          
     18          t_sw_uart sw_uart;
     19          

   \                                 In section .text, align 2, keep-with-next
     20          void sw_uart_init()
     21          {
   \                     sw_uart_init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     22            //sw_uart.tx.buf[0] = 0xFF;
     23            //sw_uart.tx.size = 1;
     24            sw_uart.tx.pos = 0;   
   \   00000002   0x....             LDR.N    R4,??DataTable5
     25          
     26            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
   \   00000004   0x....             LDR.N    R5,??DataTable5_1
     27            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     28            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     29            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000006   0x....             LDR.N    R6,??DataTable5_2  ;; 0x40010c00
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x7060             STRB     R0,[R4, #+1]
   \   0000000C   0x4629             MOV      R1,R5
   \   0000000E   0xF44F 0x7080      MOV      R0,#+256
   \   00000012   0x8028             STRH     R0,[R5, #+0]
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x70A8             STRB     R0,[R5, #+2]
   \   00000018   0x2010             MOVS     R0,#+16
   \   0000001A   0x70E8             STRB     R0,[R5, #+3]
   \   0000001C   0x4630             MOV      R0,R6
   \   0000001E   0x.... 0x....      BL       GPIO_Init
     30            TX_H;
   \   00000022   0xF44F 0x7180      MOV      R1,#+256
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       GPIO_SetBits
     31          
     32            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \   0000002C   0xF44F 0x7000      MOV      R0,#+512
   \   00000030   0x8028             STRH     R0,[R5, #+0]
     33            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     34            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
     35            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x70A8             STRB     R0,[R5, #+2]
   \   00000038   0x2048             MOVS     R0,#+72
   \   0000003A   0x70E8             STRB     R0,[R5, #+3]
   \   0000003C   0x4630             MOV      R0,R6
   \   0000003E   0x.... 0x....      BL       GPIO_Init
     36          
     37            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     38          
     39            TIM_TimeBaseInitStruct.TIM_Period = (1000000/9523)-1;
   \   0000004A   0x2068             MOVS     R0,#+104
   \   0000004C   0xF8A4 0x006C      STRH     R0,[R4, #+108]
     40            TIM_TimeBaseInitStruct.TIM_Prescaler = 36-1;
   \   00000050   0x2023             MOVS     R0,#+35
   \   00000052   0xF8A4 0x0068      STRH     R0,[R4, #+104]
     41            TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0xF8A4 0x006E      STRH     R0,[R4, #+110]
     42            TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
   \   0000005C   0xF8A4 0x006A      STRH     R0,[R4, #+106]
     43            TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStruct);
   \   00000060   0xF104 0x0168      ADD      R1,R4,#+104
   \   00000064   0x....             LDR.N    R5,??DataTable5_3  ;; 0x40000800
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       TIM_TimeBaseInit
     44          
     45            TIM_ICInitStruct.TIM_Channel = TIM_Channel_4;
   \   0000006C   0x200C             MOVS     R0,#+12
   \   0000006E   0xF8A4 0x005C      STRH     R0,[R4, #+92]
     46            TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Falling;
     47            TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
     48            TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
     49            TIM_ICInitStruct.TIM_ICFilter = 0;
     50            TIM_ICInit(TIM4, &TIM_ICInitStruct);
   \   00000072   0xF104 0x015C      ADD      R1,R4,#+92
   \   00000076   0x2002             MOVS     R0,#+2
   \   00000078   0xF8A4 0x005E      STRH     R0,[R4, #+94]
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0xF8A4 0x0060      STRH     R0,[R4, #+96]
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xF8A4 0x0062      STRH     R0,[R4, #+98]
   \   00000088   0xF8A4 0x0064      STRH     R0,[R4, #+100]
   \   0000008C   0x4628             MOV      R0,R5
   \   0000008E   0x.... 0x....      BL       TIM_ICInit
     51          
     52            TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE );
   \   00000092   0x2201             MOVS     R2,#+1
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x4628             MOV      R0,R5
   \   00000098   0x.... 0x....      BL       TIM_ITConfig
     53            TIM_ITConfig(TIM4, TIM_IT_CC4, ENABLE );   
   \   0000009C   0x2201             MOVS     R2,#+1
   \   0000009E   0x2110             MOVS     R1,#+16
   \   000000A0   0x4628             MOV      R0,R5
   \   000000A2   0x.... 0x....      BL       TIM_ITConfig
     54            TIM_Cmd(TIM4, ENABLE);
   \   000000A6   0x2101             MOVS     R1,#+1
   \   000000A8   0x4628             MOV      R0,R5
   \   000000AA   0x.... 0x....      BL       TIM_Cmd
     55            OS_ARM_EnableISR( TIM4_IRQn + 16 );
   \   000000AE   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000B2   0x202E             MOVS     R0,#+46
   \   000000B4   0x.... 0x....      B.W      OS_ARM_EnableISR
     56          }
     57          
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void sw_uart_tx(u8* p, int size)
     60          {
   \                     sw_uart_tx: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x460C             MOV      R4,R1
     61            sw_uart.tx.pos = 0;
   \   00000004   0x....             LDR.N    R5,??DataTable5
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7069             STRB     R1,[R5, #+1]
     62            memcpy( sw_uart.tx.buf, p, size );
   \   0000000C   0x4622             MOV      R2,R4
   \   0000000E   0x4601             MOV      R1,R0
   \   00000010   0x1CA8             ADDS     R0,R5,#+2
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy
     63            sw_uart.tx.size = size;  
   \   00000016   0x702C             STRB     R4,[R5, #+0]
     64          }
   \   00000018   0xB001             ADD      SP,SP,#+4
   \   0000001A   0xBD30             POP      {R4,R5,PC}       ;; return
     65          
     66          u8 pin8 = 0;
     67          

   \                                 In section .text, align 4, keep-with-next
     68          void swuart_isr_tx()
     69          {
   \                     swuart_isr_tx: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     70          #if 0
     71            if ( pin8 )
     72            {
     73              TX_H;
     74            }
     75            else
     76            {
     77              TX_L;
     78            }
     79            pin8 = !pin8;
     80          #else  
     81            
     82            static u8 st = 0;
     83            static u8 b = 0;
     84            static u8 bit_no = 0;  
     85            switch( st )
   \   00000002   0x....             LDR.N    R4,??DataTable5
   \   00000004   0xF894 0x0074      LDRB     R0,[R4, #+116]
   \   00000008   0x2814             CMP      R0,#+20
   \   0000000A   0xD839             BHI.N    ??swuart_isr_tx_1
   \   0000000C   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??swuart_isr_tx_0:
   \   00000010   0x0B 0x38          DC8      0xB,0x38,0x27,0x38
   \              0x27 0x38    
   \   00000014   0x27 0x38          DC8      0x27,0x38,0x27,0x38
   \              0x27 0x38    
   \   00000018   0x27 0x38          DC8      0x27,0x38,0x27,0x38
   \              0x27 0x38    
   \   0000001C   0x27 0x38          DC8      0x27,0x38,0x27,0x38
   \              0x27 0x38    
   \   00000020   0x27 0x38          DC8      0x27,0x38,0x43,0x38
   \              0x43 0x38    
   \   00000024   0x47 0x00          DC8      0x47,0x0
     86            {
     87              case 0:
     88                if ( sw_uart.tx.pos < sw_uart.tx.size )
   \                     ??swuart_isr_tx_2: (+1)
   \   00000026   0x7860             LDRB     R0,[R4, #+1]
   \   00000028   0x7821             LDRB     R1,[R4, #+0]
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD211             BCS.N    ??swuart_isr_tx_3
     89                {
     90                  b = sw_uart.tx.buf[ sw_uart.tx.pos ];
   \   0000002E   0x1900             ADDS     R0,R0,R4
     91                  bit_no = 0;
     92                  TX_L;
   \   00000030   0xF44F 0x7180      MOV      R1,#+256
   \   00000034   0x7880             LDRB     R0,[R0, #+2]
   \   00000036   0xF884 0x0075      STRB     R0,[R4, #+117]
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF884 0x0076      STRB     R0,[R4, #+118]
   \   00000040   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40010c00
   \   00000042   0x.... 0x....      BL       GPIO_ResetBits
     93                  st++;
   \   00000046   0xF894 0x0074      LDRB     R0,[R4, #+116]
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \   0000004C   0xF884 0x0074      STRB     R0,[R4, #+116]
     94                  return;
     95                }
     96                else if ( sw_uart.tx.pos > 0 )
     97                {
     98                  sw_uart.tx.pos = 0;
     99                  sw_uart.tx.size = 0;
    100                }
    101                break;
    102               
    103              case 2:
    104              case 4:
    105              case 6:      
    106              case 8:
    107              case 10:
    108              case 12:
    109              case 14:      
    110              case 16:      
    111                ( b & ( 0x01 << bit_no++ ) ) ? TX_H : TX_L;
    112                break;
    113                
    114              case 18:
    115                TX_H;
    116                break;
    117                
    118              case 20:
    119                sw_uart.tx.pos++;
    120                //sw_uart.tx.buf[0]++;
    121                break;      
    122            }
    123                
    124            if ( st >= 20 )  
    125            {
    126              st = 0;
    127            }
    128            else if ( st != 0 )
    129            {
    130              st++;
    131            }
    132          #endif  
    133          }
   \   00000050   0xBD10             POP      {R4,PC}
   \                     ??swuart_isr_tx_3: (+1)
   \   00000052   0xB368             CBZ.N    R0,??swuart_isr_tx_4
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x8020             STRH     R0,[R4, #+0]
   \   00000058   0xF884 0x0074      STRB     R0,[R4, #+116]
   \   0000005C   0xBD10             POP      {R4,PC}
   \                     ??swuart_isr_tx_5: (+1)
   \   0000005E   0xF894 0x1076      LDRB     R1,[R4, #+118]
   \   00000062   0xF894 0x2075      LDRB     R2,[R4, #+117]
   \   00000066   0x1C48             ADDS     R0,R1,#+1
   \   00000068   0x2301             MOVS     R3,#+1
   \   0000006A   0xF884 0x0076      STRB     R0,[R4, #+118]
   \   0000006E   0xFA03 0xF101      LSL      R1,R3,R1
   \   00000072   0x420A             TST      R2,R1
   \   00000074   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40010c00
   \   00000076   0xF44F 0x7180      MOV      R1,#+256
   \   0000007A   0xD009             BEQ.N    ??swuart_isr_tx_6
   \                     ??swuart_isr_tx_7: (+1)
   \   0000007C   0x.... 0x....      BL       GPIO_SetBits
   \                     ??swuart_isr_tx_1: (+1)
   \   00000080   0xF894 0x0074      LDRB     R0,[R4, #+116]
   \   00000084   0x2814             CMP      R0,#+20
   \   00000086   0xDB11             BLT.N    ??swuart_isr_tx_8
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0xF884 0x0074      STRB     R0,[R4, #+116]
   \   0000008E   0xBD10             POP      {R4,PC}
   \                     ??swuart_isr_tx_6: (+1)
   \   00000090   0x.... 0x....      BL       GPIO_ResetBits
   \   00000094   0xE7F4             B.N      ??swuart_isr_tx_1
   \                     ??swuart_isr_tx_9: (+1)
   \   00000096   0xF44F 0x7180      MOV      R1,#+256
   \   0000009A   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40010c00
   \   0000009C   0xE7EE             B.N      ??swuart_isr_tx_7
   \                     ??swuart_isr_tx_10: (+1)
   \   0000009E   0x7860             LDRB     R0,[R4, #+1]
   \   000000A0   0x1C40             ADDS     R0,R0,#+1
   \   000000A2   0x7060             STRB     R0,[R4, #+1]
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0xF884 0x0074      STRB     R0,[R4, #+116]
   \   000000AA   0xBD10             POP      {R4,PC}
   \                     ??swuart_isr_tx_8: (+1)
   \   000000AC   0xB100             CBZ.N    R0,??swuart_isr_tx_4
   \   000000AE   0x1C40             ADDS     R0,R0,#+1
   \                     ??swuart_isr_tx_4: (+1)
   \   000000B0   0xF884 0x0074      STRB     R0,[R4, #+116]
   \   000000B4   0xBD10             POP      {R4,PC}          ;; return
    134          

   \                                 In section .text, align 4, keep-with-next
    135          void swuart_isr_rx(void)
    136          {
   \                     swuart_isr_rx: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    137            u8 bit = RX;
   \   00000002   0x....             LDR.N    R5,??DataTable5_2  ;; 0x40010c00
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0xF44F 0x7100      MOV      R1,#+512
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   00000010   0x4604             MOV      R4,R0
    138            u8 bit1 = RX;
   \   00000012   0xF44F 0x7100      MOV      R1,#+512
   \   00000016   0x4628             MOV      R0,R5
   \   00000018   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   0000001C   0x4607             MOV      R7,R0
    139            u8 bit2 = RX;
   \   0000001E   0xF44F 0x7100      MOV      R1,#+512
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0x.... 0x....      BL       GPIO_ReadInputDataBit
    140            u8 done = 0;
   \   00000028   0x2100             MOVS     R1,#+0
    141            u8 framing_err = 0;  
   \   0000002A   0x2600             MOVS     R6,#+0
    142            static u8 st = 0;
    143            static u8 b = 0;
    144            static u8 bit_no = 0;  
    145            
    146            if ( bit != bit1 || bit != bit2 )
   \   0000002C   0x....             LDR.N    R5,??DataTable5
   \   0000002E   0x42BC             CMP      R4,R7
   \   00000030   0xBF0C             ITE      EQ 
   \   00000032   0x4284             CMPEQ    R4,R0
   \   00000034   0xF885 0x1078      STRBNE   R1,[R5, #+120]
    147            {
    148              b = 0;
    149            }
    150            
    151            switch( st )
   \   00000038   0xF895 0x0077      LDRB     R0,[R5, #+119]
   \   0000003C   0x2813             CMP      R0,#+19
   \   0000003E   0xD84A             BHI.N    ??swuart_isr_rx_1
   \   00000040   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??swuart_isr_rx_0:
   \   00000044   0x0A 0x1B          DC8      0xA,0x1B,0x49,0x21
   \              0x49 0x21    
   \   00000048   0x49 0x21          DC8      0x49,0x21,0x49,0x21
   \              0x49 0x21    
   \   0000004C   0x49 0x21          DC8      0x49,0x21,0x49,0x21
   \              0x49 0x21    
   \   00000050   0x49 0x21          DC8      0x49,0x21,0x49,0x21
   \              0x49 0x21    
   \   00000054   0x49 0x21          DC8      0x49,0x21,0x49,0x2F
   \              0x49 0x2F    
    152            {
    153              case 0:
    154                TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_Timing;
   \                     ??swuart_isr_rx_2: (+1)
   \   00000058   0x64E9             STR      R1,[R5, #+76]
    155                TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Disable;
    156                TIM_OCInitStruct.TIM_OutputNState = TIM_OutputNState_Disable;
   \   0000005A   0xF8A5 0x1050      STRH     R1,[R5, #+80]
    157                TIM_OCInitStruct.TIM_Pulse = TIM4->CCR4;
   \   0000005E   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40000800
   \   00000060   0xF8B0 0x1040      LDRH     R1,[R0, #+64]
   \   00000064   0xF8A5 0x1052      STRH     R1,[R5, #+82]
    158                TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000068   0x656E             STR      R6,[R5, #+84]
    159                TIM_OCInitStruct.TIM_OCNPolarity = TIM_OCPolarity_High;
    160                TIM_OCInitStruct.TIM_OCIdleState = TIM_OCIdleState_Reset;
   \   0000006A   0x65AE             STR      R6,[R5, #+88]
    161                TIM_OCInitStruct.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    162                TIM_OC4Init(TIM4, &TIM_OCInitStruct);
   \   0000006C   0xF105 0x014C      ADD      R1,R5,#+76
   \   00000070   0x.... 0x....      BL       TIM_OC4Init
    163                st++;
   \   00000074   0xF895 0x0077      LDRB     R0,[R5, #+119]
   \   00000078   0xE04B             B.N      ??swuart_isr_rx_3
    164                return;
    165                
    166              case 1:
    167                if ( !bit )
   \                     ??swuart_isr_rx_4: (+1)
   \   0000007A   0xBB5C             CBNZ.N   R4,??swuart_isr_rx_5
    168                {//start bit
    169                  b = 0;
   \   0000007C   0xF885 0x1078      STRB     R1,[R5, #+120]
    170                  bit_no = 0;        
   \   00000080   0xF885 0x1079      STRB     R1,[R5, #+121]
   \   00000084   0xE027             B.N      ??swuart_isr_rx_1
    171                }
    172                else
    173                {//framimg error, no start bit
    174                  framing_err = 1;
    175                }
    176                break;
    177            
    178              case 3 + 0:
    179              case 3 + 2:
    180              case 3 + 4:
    181              case 3 + 6:
    182              case 3 + 8:
    183              case 3 + 10:
    184              case 3 + 12:
    185              case 3 + 14:      
    186                if ( bit )
   \                     ??swuart_isr_rx_6: (+1)
   \   00000086   0xF895 0x0079      LDRB     R0,[R5, #+121]
   \   0000008A   0xB134             CBZ.N    R4,??swuart_isr_rx_7
    187                {
    188                  b |= ( 1 << bit_no );
   \   0000008C   0xF895 0x2078      LDRB     R2,[R5, #+120]
   \   00000090   0x2301             MOVS     R3,#+1
   \   00000092   0x4083             LSLS     R3,R3,R0
   \   00000094   0x431A             ORRS     R2,R3,R2
   \   00000096   0xF885 0x2078      STRB     R2,[R5, #+120]
    189                }
    190                bit_no++;
   \                     ??swuart_isr_rx_7: (+1)
   \   0000009A   0x1C40             ADDS     R0,R0,#+1
   \   0000009C   0xF885 0x0079      STRB     R0,[R5, #+121]
    191                break;
   \   000000A0   0xE019             B.N      ??swuart_isr_rx_1
    192                
    193              case 3 + 16:
    194                if ( bit )
   \                     ??swuart_isr_rx_8: (+1)
   \   000000A2   0xB1BC             CBZ.N    R4,??swuart_isr_rx_5
    195                {
    196                  if ( sw_uart.rx.size < sizeof(sw_uart.rx.buf)-1)
   \   000000A4   0xF895 0x0024      LDRB     R0,[R5, #+36]
   \   000000A8   0x281F             CMP      R0,#+31
   \   000000AA   0xD211             BCS.N    ??swuart_isr_rx_9
    197                  {
    198                    sw_uart.rx.buf[ sw_uart.rx.size++ ] = b;       
   \   000000AC   0xF895 0x1078      LDRB     R1,[R5, #+120]
   \   000000B0   0x1940             ADDS     R0,R0,R5
   \   000000B2   0xF880 0x1025      STRB     R1,[R0, #+37]
   \   000000B6   0xF895 0x0024      LDRB     R0,[R5, #+36]
   \   000000BA   0x1C40             ADDS     R0,R0,#+1
   \   000000BC   0xF885 0x0024      STRB     R0,[R5, #+36]
    199                    if ( b == sw_uart.rx.mes && sw_uart.rx.handler )
   \   000000C0   0xF895 0x0045      LDRB     R0,[R5, #+69]
   \   000000C4   0x4281             CMP      R1,R0
   \   000000C6   0xD103             BNE.N    ??swuart_isr_rx_9
   \   000000C8   0x6CA8             LDR      R0,[R5, #+72]
   \   000000CA   0x0001             MOVS     R1,R0
   \   000000CC   0xBF18             IT       NE 
    200                    {
    201                      sw_uart.rx.handler();
   \   000000CE   0x4780             BLXNE    R0
    202                    }
    203                  }
    204                  done = 1;
   \                     ??swuart_isr_rx_9: (+1)
   \   000000D0   0x2101             MOVS     R1,#+1
   \   000000D2   0xE000             B.N      ??swuart_isr_rx_1
    205                }
    206                else
    207                {
    208                  framing_err = 1;
   \                     ??swuart_isr_rx_5: (+1)
   \   000000D4   0x2601             MOVS     R6,#+1
    209                }
    210                break;
    211                      
    212            }
    213          
    214            if ( done || framing_err )
   \                     ??swuart_isr_rx_1: (+1)
   \   000000D6   0xEA56 0x0001      ORRS     R0,R6,R1
   \   000000DA   0xD015             BEQ.N    ??swuart_isr_rx_10
    215            {
    216                st = 0;
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0xF885 0x0077      STRB     R0,[R5, #+119]
    217                TIM_ICInitStruct.TIM_Channel = TIM_Channel_4;
    218                TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Falling;
    219                TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
    220                TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
    221                TIM_ICInitStruct.TIM_ICFilter = 0;
    222                TIM_ICInit(TIM4, &TIM_ICInitStruct);                  
   \   000000E2   0xF105 0x015C      ADD      R1,R5,#+92
   \   000000E6   0x200C             MOVS     R0,#+12
   \   000000E8   0xF8A5 0x005C      STRH     R0,[R5, #+92]
   \   000000EC   0x2002             MOVS     R0,#+2
   \   000000EE   0xF8A5 0x005E      STRH     R0,[R5, #+94]
   \   000000F2   0x2001             MOVS     R0,#+1
   \   000000F4   0xF8A5 0x0060      STRH     R0,[R5, #+96]
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0xF8A5 0x0062      STRH     R0,[R5, #+98]
   \   000000FE   0xF8A5 0x0064      STRH     R0,[R5, #+100]
   \   00000102   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40000800
   \   00000104   0x.... 0x....      BL       TIM_ICInit
    223            }
    224              
    225            if ( st > 0 && st < 100 )
   \                     ??swuart_isr_rx_10: (+1)
   \   00000108   0xF895 0x0077      LDRB     R0,[R5, #+119]
   \   0000010C   0xB120             CBZ.N    R0,??swuart_isr_rx_11
   \   0000010E   0x2864             CMP      R0,#+100
   \   00000110   0xDA02             BGE.N    ??swuart_isr_rx_11
    226            {
    227              st++;
   \                     ??swuart_isr_rx_3: (+1)
   \   00000112   0x1C40             ADDS     R0,R0,#+1
   \   00000114   0xF885 0x0077      STRB     R0,[R5, #+119]
    228            }
    229          }
   \                     ??swuart_isr_rx_11: (+1)
   \   00000118   0xB001             ADD      SP,SP,#+4
   \   0000011A   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .bss, align 4
   \                     sw_uart:
   \   00000000                      DS8 76
   \                     TIM_OCInitStruct:
   \   0000004C                      DS8 16
   \                     TIM_ICInitStruct:
   \   0000005C                      DS8 12
   \                     TIM_TimeBaseInitStruct:
   \   00000068                      DS8 12
   \   00000074                      DS8 1
   \   00000075                      DS8 1
   \   00000076                      DS8 1
   \   00000077                      DS8 1
   \   00000078                      DS8 1
   \   00000079                      DS8 1

   \                                 In section .bss, align 1
   \                     pin8:
   \   00000000                      DS8 1
    230          

   \                                 In section .text, align 2, keep-with-next
    231          __irq void TIM4_IRQHandler(void) 
    232          {
   \                     TIM4_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    233            //OS_EnterNestableInterrupt();
    234            if ( TIM_GetITStatus(TIM4, TIM_IT_Update ) )
   \   00000002   0x....             LDR.N    R4,??DataTable5_3  ;; 0x40000800
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       TIM_GetITStatus
   \   0000000C   0xB128             CBZ.N    R0,??TIM4_IRQHandler_0
    235            {
    236              TIM_ClearITPendingBit(TIM4, TIM_IT_Update);    
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       TIM_ClearITPendingBit
    237              swuart_isr_tx();      
   \   00000016   0x.... 0x....      BL       swuart_isr_tx
    238            }
    239            if ( TIM_GetITStatus(TIM4, TIM_IT_CC4 ) )
   \                     ??TIM4_IRQHandler_0: (+1)
   \   0000001A   0x2110             MOVS     R1,#+16
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       TIM_GetITStatus
   \   00000022   0xB130             CBZ.N    R0,??TIM4_IRQHandler_1
    240            {
    241              TIM_ClearITPendingBit(TIM4, TIM_IT_CC4 );    
   \   00000024   0x2110             MOVS     R1,#+16
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       TIM_ClearITPendingBit
    242              swuart_isr_rx();      
   \   0000002C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000030   0x....             B.N      swuart_isr_rx
    243            }              
    244            //OS_LeaveNestableInterrupt();
    245          }
   \                     ??TIM4_IRQHandler_1: (+1)
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
    246          

   \                                 In section .text, align 2, keep-with-next
    247          void sw_uart_reset_buffers()
    248          {
   \                     sw_uart_reset_buffers: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    249            sw_uart.rx.size = 0;
   \   00000002   0x....             LDR.N    R4,??DataTable5
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF884 0x0024      STRB     R0,[R4, #+36]
    250            memset( sw_uart.rx.buf, 0, sizeof(sw_uart.rx.buf));
   \   0000000A   0x2120             MOVS     R1,#+32
   \   0000000C   0xF104 0x0025      ADD      R0,R4,#+37
   \   00000010   0x.... 0x....      BL       __aeabi_memclr
    251            sw_uart.tx.size = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x7020             STRB     R0,[R4, #+0]
    252            memset( sw_uart.tx.buf, 0, sizeof(sw_uart.tx.buf));  
   \   00000018   0x2120             MOVS     R1,#+32
   \   0000001A   0x1CA0             ADDS     R0,R4,#+2
   \   0000001C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000020   0x.... 0x....      B.W      __aeabi_memclr
    253          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     sw_uart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     GPIO_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40000800         DC32     0x40000800

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TIM4_IRQHandler
         8   -> TIM_ClearITPendingBit
         8   -> TIM_GetITStatus
         0   -> swuart_isr_rx
         8   -> swuart_isr_tx
      16   sw_uart_init
        16   -> GPIO_Init
        16   -> GPIO_SetBits
         0   -> OS_ARM_EnableISR
        16   -> RCC_APB1PeriphClockCmd
        16   -> TIM_Cmd
        16   -> TIM_ICInit
        16   -> TIM_ITConfig
        16   -> TIM_TimeBaseInit
       8   sw_uart_reset_buffers
         0   -> __aeabi_memclr
         8   -> __aeabi_memclr
      16   sw_uart_tx
        16   -> __aeabi_memcpy
      24   swuart_isr_rx
        24   -- Indirect call
        24   -> GPIO_ReadInputDataBit
        24   -> TIM_ICInit
        24   -> TIM_OC4Init
       8   swuart_isr_tx
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
      52  TIM4_IRQHandler
       1  pin8
     122  sw_uart
          TIM_OCInitStruct
          TIM_ICInitStruct
          TIM_TimeBaseInitStruct
          st
          b
          bit_no
          st
          b
          bit_no
     184  sw_uart_init
      36  sw_uart_reset_buffers
      28  sw_uart_tx
     284  swuart_isr_rx
     182  swuart_isr_tx

 
 123 bytes in section .bss
 782 bytes in section .text
 
 782 bytes of CODE memory
 123 bytes of DATA memory

Errors: none
Warnings: none

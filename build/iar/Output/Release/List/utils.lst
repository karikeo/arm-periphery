###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       12/Sep/2016  16:26:17
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\ilya\vendicont\arm-periphery\Application\utils.c
#    Command line =  
#        C:\ilya\vendicont\arm-periphery\Application\utils.c -D STM32F10X_HD -D
#        USE_STDPERIPH_DRIVER -D NDEBUG -D _FLASH_PROG -lCN
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List
#        --remarks -o
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\CMSIS\Include\
#        -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\library\STM32F10x_StdPeriph_Driver\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\rtos\embos\iar\inc\
#        -I C:\ilya\vendicont\arm-periphery\build\iar\..\..\Inc\ -I
#        C:\ilya\vendicont\arm-periphery\build\iar\..\..\Application\p-types\
#        -Ohs --use_c++_inline --require_prototypes
#    List file    =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\List\utils.lst
#    Object file  =  
#        C:\ilya\vendicont\arm-periphery\build\iar\Output\Release\Obj\utils.o
#
###############################################################################

C:\ilya\vendicont\arm-periphery\Application\utils.c
      1          #include "stm32f10x.h"
      2          #include "RTOS.h"
      3          #include "BSP.h"
      4          #include "stdio.h"
      5          #include "log.h"
      6          #if defined LCD
      7          #include "lcd_2x16.h"
      8          #endif
      9          #include "utils.h"
     10          

   \                                 In section .text, align 2, keep-with-next
     11          void short_date(char const *date, char *p)
     12          { 
   \                     short_date: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x460C             MOV      R4,R1
     13              char buf[ 16 ];
     14              int month, day, year;
     15              static const char month_names[] = "JanFebMarAprMayJunJulAugSepOctNovDec";
     16              sscanf(date, "%s %d %d", buf, &day, &year);
   \   00000006   0xA901             ADD      R1,SP,#+4
   \   00000008   0x9100             STR      R1,[SP, #+0]
   \   0000000A   0xAB02             ADD      R3,SP,#+8
   \   0000000C   0xAA03             ADD      R2,SP,#+12
   \   0000000E   0x.... 0x....      ADR.W    R1,?_0
   \   00000012   0x.... 0x....      ADR.W    R5,??month_names
   \   00000016   0x.... 0x....      BL       sscanf
     17              month = (strstr(month_names, buf)-month_names)/3+1;
   \   0000001A   0xA903             ADD      R1,SP,#+12
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x.... 0x....      BL       __iar_Strstr
     18              sprintf( p, "%d%02d%02d", year, month, day);
   \   00000022   0x9902             LDR      R1,[SP, #+8]
   \   00000024   0x9A01             LDR      R2,[SP, #+4]
   \   00000026   0x9100             STR      R1,[SP, #+0]
   \   00000028   0x1B40             SUBS     R0,R0,R5
   \   0000002A   0x2103             MOVS     R1,#+3
   \   0000002C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000030   0x1C43             ADDS     R3,R0,#+1
   \   00000032   0x.... 0x....      ADR.W    R1,?_1
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       sprintf
     19          }
   \   0000003C   0xB007             ADD      SP,SP,#+28
   \   0000003E   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??month_names:
   \   00000000   0x4A 0x61          DC8 "JanFebMarAprMayJunJulAugSepOctNovDec"
   \              0x6E 0x46    
   \              0x65 0x62    
   \              0x4D 0x61    
   \              0x72 0x41    
   \              0x70 0x72    
   \              0x4D 0x61    
   \              0x79 0x4A    
   \              0x75 0x6E    
   \              0x4A 0x75    
   \              0x6C 0x41    
   \              0x75 0x67    
   \              0x53 0x65    
   \              0x70 0x4F    
   \              0x63 0x74    
   \              0x4E 0x6F    
   \              0x76 0x44    
   \              0x65 0x63    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     20          

   \                                 In section .text, align 2, keep-with-next
     21          void build_dt(char* p)
     22          {
   \                     build_dt: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
   \   00000004   0x4604             MOV      R4,R0
     23            char buf[ 16 ];
     24            int hour, min, sec;  
     25            short_date( __DATE__, buf );
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0xAB02             ADD      R3,SP,#+8
   \   0000000C   0xAA06             ADD      R2,SP,#+24
   \   0000000E   0x.... 0x....      ADR.W    R1,?_0
   \   00000012   0x.... 0x....      ADR.W    R0,?_2
   \   00000016   0x.... 0x....      ADR.W    R5,??month_names
   \   0000001A   0x.... 0x....      BL       sscanf
   \   0000001E   0xA906             ADD      R1,SP,#+24
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0x.... 0x....      BL       __iar_Strstr
   \   00000026   0x9902             LDR      R1,[SP, #+8]
   \   00000028   0x9A01             LDR      R2,[SP, #+4]
   \   0000002A   0x9100             STR      R1,[SP, #+0]
   \   0000002C   0x1B40             SUBS     R0,R0,R5
   \   0000002E   0x2103             MOVS     R1,#+3
   \   00000030   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000034   0x1C43             ADDS     R3,R0,#+1
   \   00000036   0x.... 0x....      ADR.W    R1,?_1
   \   0000003A   0xA80A             ADD      R0,SP,#+40
   \   0000003C   0x.... 0x....      BL       sprintf
     26            sscanf(__TIME__, "%d:%d:%d", &hour, &min, &sec);  
   \   00000040   0xA803             ADD      R0,SP,#+12
   \   00000042   0x9000             STR      R0,[SP, #+0]
   \   00000044   0xAB04             ADD      R3,SP,#+16
   \   00000046   0xAA05             ADD      R2,SP,#+20
   \   00000048   0x.... 0x....      ADR.W    R1,?_4
   \   0000004C   0x.... 0x....      ADR.W    R0,?_3
   \   00000050   0x.... 0x....      BL       sscanf
     27            sprintf( p, "%s%02d%02d%02d",buf, hour, min, sec);
   \   00000054   0x9803             LDR      R0,[SP, #+12]
   \   00000056   0x9B05             LDR      R3,[SP, #+20]
   \   00000058   0x.... 0x....      ADR.W    R1,?_5
   \   0000005C   0x9001             STR      R0,[SP, #+4]
   \   0000005E   0xAA0A             ADD      R2,SP,#+40
   \   00000060   0x9804             LDR      R0,[SP, #+16]
   \   00000062   0x9000             STR      R0,[SP, #+0]
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       sprintf
     28          }
   \   0000006A   0xB00F             ADD      SP,SP,#+60
   \   0000006C   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x25 0x73          DC8 "%s %d %d"
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x25 0x64          DC8 "%d%02d%02d"
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x53 0x65          DC8 "Sep 12 2016"
   \              0x70 0x20    
   \              0x31 0x32    
   \              0x20 0x32    
   \              0x30 0x31    
   \              0x36 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x31 0x36          DC8 "16:26:17"
   \              0x3A 0x32    
   \              0x36 0x3A    
   \              0x31 0x37    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x25 0x64          DC8 "%d:%d:%d"
   \              0x3A 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x25 0x73          DC8 "%s%02d%02d%02d"
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   build_dt
        72   -> __iar_Strstr
        72   -> sprintf
        72   -> sscanf
      40   short_date
        40   -> __iar_Strstr
        40   -> sprintf
        40   -> sscanf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?_0
      12  ?_1
      12  ?_2
      12  ?_3
      12  ?_4
      16  ?_5
     110  build_dt
      40  month_names
      64  short_date

 
 290 bytes in section .text
 
 290 bytes of CODE memory

Errors: none
Warnings: none
